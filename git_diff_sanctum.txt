diff --git a/all_contents.txt b/all_contents.txt
new file mode 100644
index 0000000..c4cbaa7
--- /dev/null
+++ b/all_contents.txt
@@ -0,0 +1,7925 @@
+===== File: app/Models/UserCompany.php =====
+<?php
+
+namespace App\Models;
+
+use Illuminate\Database\Eloquent\Factories\HasFactory;
+use Illuminate\Database\Eloquent\Model;
+
+class UserCompany extends Model
+{
+    use HasFactory;
+
+    protected $fillable = ['user_id', 'company_id'];
+}
+
+
+
+===== File: app/Models/Role.php =====
+<?php
+
+namespace App\Models;
+
+use Illuminate\Database\Eloquent\Model;
+use Illuminate\Database\Eloquent\Factories\HasFactory;
+use Illuminate\Database\Eloquent\Relations\BelongsToMany;
+
+class Role extends Model
+{
+    use HasFactory;
+
+    protected $fillable = ['name'];
+
+    /**
+     * The permissions that belong to the role.
+     */
+    public function permissions(): BelongsToMany
+{
+    return $this->belongsToMany(Permission::class, 'role_permissions', 'role_id', 'permission_id')                
+    ->withTimestamps();
+}
+
+    /**
+     * The users that belong to the role.
+     */
+    public function users(): BelongsToMany
+    {
+        return $this->belongsToMany(User::class, 'user_roles');
+    }
+}
+
+
+
+===== File: app/Models/Permission.php =====
+<?php
+
+namespace App\Models;
+
+use Illuminate\Database\Eloquent\Model;
+use Illuminate\Database\Eloquent\Relations\BelongsToMany;
+
+class Permission extends Model
+{
+    protected $fillable = [
+        'name',
+        'subject'
+    ];
+
+    /**
+     * The roles that belong to the permission.
+     */
+    public function roles(): BelongsToMany
+{
+    return $this->belongsToMany(Role::class, 'role_permissions')
+                ->withTimestamps();
+}
+
+    /**
+     * The actions associated with this permission through permission_role.
+     */
+    
+}
+
+
+
+===== File: app/Models/Company.php =====
+<?php
+   // app/Models/Company.php
+
+   namespace App\Models;
+
+   use Illuminate\Database\Eloquent\Factories\HasFactory;
+   use Illuminate\Database\Eloquent\Model;
+
+   class Company extends Model
+   {
+       use HasFactory;
+
+       // Specify the table if it's not the plural of the model name
+       protected $table = 'companies';
+
+       // Specify the attributes that are mass assignable
+       protected $fillable = ['company_name'];
+   }
+
+
+
+===== File: app/Models/UserRole.php =====
+<?php
+namespace App\Models;
+
+use Illuminate\Database\Eloquent\Factories\HasFactory;
+use Illuminate\Database\Eloquent\Model;
+
+class UserRole extends Model
+{
+    use HasFactory;
+
+    protected $fillable = ['user_id', 'role_id'];
+}
+
+
+
+===== File: app/Models/User.php =====
+<?php
+
+namespace App\Models;
+
+use Illuminate\Database\Eloquent\Relations\BelongsToMany;
+use Illuminate\Foundation\Auth\User as Authenticatable;
+use Illuminate\Database\Eloquent\Factories\HasFactory;
+use Illuminate\Notifications\Notifiable;
+use Laravel\Sanctum\HasApiTokens;
+
+
+class User extends Authenticatable
+{
+    use HasApiTokens, HasFactory, Notifiable;
+
+    /**
+     * The attributes that are mass assignable.
+     */
+    protected $fillable = [
+        'name',
+        'email',
+        'password',
+        'password_reset_required',
+    ];
+
+    /**
+     * The attributes that should be hidden for serialization.
+     */
+    protected $hidden = [
+        'password',
+        'remember_token',
+    ];
+
+    /**
+     * The attributes that should be cast.
+     */
+    protected $casts = [
+        'email_verified_at' => 'datetime',
+        'password_reset_required' => 'boolean',
+    ];
+
+    /**
+     * Define a many-to-many relationship with Role.
+     *
+     * @return \Illuminate\Database\Eloquent\Relations\BelongsToMany
+     */
+    public function roles(): BelongsToMany
+    {
+        return $this->belongsToMany(
+            Role::class,    // The related model
+            'user_roles',   // The pivot table name
+            'user_id',      // The foreign key on the pivot table for the User model
+            'role_id'       // The foreign key on the pivot table for the Role model
+        );
+    }
+
+    /**
+     * Define a many-to-many relationship with Company.
+     *
+     * @return \Illuminate\Database\Eloquent\Relations\BelongsToMany
+     */
+    public function companies(): BelongsToMany
+    {
+        return $this->belongsToMany(
+            Company::class, // The related model
+            'user_company', // The pivot table name
+            'user_id',      // The foreign key on the pivot table for the User model
+            'company_id'    // The foreign key on the pivot table for the Company model
+        );
+    }
+
+    /**
+     * The subjects that belong to the user.
+     */
+    public function subjects(): BelongsToMany
+    {
+        return $this->belongsToMany(Subject::class, 'subject_user')
+                    ->withTimestamps();
+    }
+
+    /**
+     * Get all permissions for the user through their roles.
+     *
+     * @return \Illuminate\Support\Collection
+     */
+    public function getPermissionsAttribute()
+    {
+        \Log::info('Fetching permissions for user roles.');
+
+        return $this->roles->flatMap(function ($role) {
+            \Log::info('Mapping role permissions:', ['role_id' => $role->id]);
+
+            return $role->permissions->map(function ($permission) {
+                \Log::info('Mapping permission:', [
+                    'id' => $permission->id ?? 'N/A',
+                    'action' => $permission->action ?? 'N/A',
+                    'subject' => $permission->subject ?? 'N/A',
+                ]);
+
+                return [
+                    'id' => $permission->id,
+                    'action' => $permission->action,
+                    'subject' => $permission->subject,
+                ];
+            });
+        })->unique('id')->values();
+    }
+    protected static function boot()
+    {
+        parent::boot();
+
+        static::deleting(function ($user) {
+            // Detach all related companies and roles
+            $user->companies()->detach();
+            $user->roles()->detach();
+        });
+    }
+}
+
+
+
+===== File: app/Models/Subject.php =====
+<?php
+
+namespace App\Models;
+
+use Illuminate\Database\Eloquent\Model;
+use Illuminate\Database\Eloquent\Relations\BelongsToMany;
+
+class Subject extends Model
+{
+    protected $fillable = ['name'];
+
+    /**
+     * The users that belong to the subject.
+     */
+    public function users(): BelongsToMany
+    {
+        return $this->belongsToMany(User::class, 'subject_user')
+                    ->withTimestamps();
+    }
+}
+
+
+
+===== File: app/Exceptions/Handler.php =====
+<?php
+
+namespace App\Exceptions;
+
+use Illuminate\Foundation\Exceptions\Handler as ExceptionHandler;
+use Throwable;
+
+class Handler extends ExceptionHandler
+{
+    // ...
+
+    public function render($request, Throwable $exception)
+    {
+        \Log::error('Exception encountered', [
+            'exception' => $exception,
+            'message'   => $exception->getMessage(),
+            'trace'     => $exception->getTraceAsString(),
+        ]);
+
+        if ($request->expectsJson()) {
+            $status = method_exists($exception, 'getStatusCode')
+                ? $exception->getStatusCode()
+                : 500;
+
+            return response()->json([
+                'message' => $exception->getMessage(),
+                'trace'   => config('app.debug') ? $exception->getTrace() : [],
+            ], $status);
+        }
+
+        return parent::render($request, $exception);
+    }
+
+    protected function unauthenticated($request, \Illuminate\Auth\AuthenticationException $exception)
+    {
+        if ($request->expectsJson()) {
+            return response()->json(['error' => 'Unauthenticated.'], 401);
+        }
+
+        return redirect()->guest(route('login'));
+    }
+}
+
+
+
+===== File: app/Http/Middleware/VerifyCsrfToken.php =====
+<?php 
+
+namespace App\Http\Middleware;
+
+use Illuminate\Foundation\Http\Middleware\VerifyCsrfToken as Middleware;
+
+class VerifyCsrfToken extends Middleware
+{
+    protected $except = [
+        'api/*', // Allow all API requests to bypass CSRF
+    ];
+}
+
+
+
+===== File: app/Http/Controllers/RolesController.php =====
+<?php
+
+namespace App\Http\Controllers;
+
+use App\Models\Role;
+use Illuminate\Http\Request;
+
+class RolesController extends Controller
+{
+    public function index()
+    {
+        \Log::info('RolesController index method accessed');
+
+        // Fetch roles sorted alphabetically by name
+        $roles = Role::query()
+            ->orderBy('name', 'asc')
+            ->get();
+
+        // Transform roles data
+        $transformedRoles = $roles->map(function ($role) {
+            return [
+                'id' => $role->id,
+                'name' => $role->name,
+            ];
+        });
+
+        return response()->json($transformedRoles, 200, ['Content-Type' => 'application/json']);
+    }
+}
+
+
+
+===== File: app/Http/Controllers/UserController.php =====
+<?php
+
+namespace App\Http\Controllers;
+
+use App\Models\User;
+use App\Models\UserCompany;
+use App\Models\UserRole;
+use Illuminate\Http\Request;
+use Illuminate\Support\Facades\Hash;
+
+class UserController extends Controller
+{
+    public function index(Request $request)
+{
+   
+
+    $validated = $request->validate([
+        'page' => 'integer|min:1',
+        'itemsPerPage' => 'integer|min:1|max:100', // Limit items per page to prevent abuse
+        'q' => 'nullable|string',
+    ]);
+    $page = $request->get('page', 1); // Default to page 1 if not provided
+    $itemsPerPage = $request->get('itemsPerPage', 10); // Default to 10 items per page
+    \Log::info('Pagination Request Parameters:', [
+        'page' => $page,
+        'itemsPerPage' => $itemsPerPage,
+        'q' => $request->get('q'),
+    ]);
+    $users = User::query()
+    ->when($request->get('q'), function ($query, $search) {
+        $query->where('name', 'like', "%{$search}%")
+              ->orWhere('email', 'like', "%{$search}%");
+    })
+    ->paginate($itemsPerPage, ['*'], 'page', $page);
+    
+
+// Transform users data only if there are results
+$transformedUsers = $users->getCollection()->map(function ($user) {
+    return [
+        'id' => $user->id,
+        'fullName' => $user->name,
+        'email' => $user->email,
+        'role' => 'user',
+        'status' => 'active',
+        'currentPlan' => 'basic',
+        'avatar' => null,
+        'billing' => 'auto',
+        'user' => [
+            'fullName' => $user->name,
+            'email' => $user->email,
+        ],
+    ];
+});
+
+$paginatedResponse = $users->toArray();
+$paginatedResponse['data'] = $transformedUsers->toArray(); // Ensure transformation
+
+    return response()->json($paginatedResponse);
+}
+
+
+
+    public function addUser(Request $request)
+    {
+        \Log::info('Add User Request: ', $request->all());
+
+        // Validate the request
+        $validated = $request->validate([
+            'name' => 'required|string|max:255',
+            'email' => 'required|string|email|unique:users,email',
+            'password' => 'required|string|min:8',
+            'company_id' => 'required|exists:companies,id',
+            'role_id' => 'required|exists:roles,id',
+        ]);
+
+        \Log::info('Validated Data: ', $validated);
+
+        try {
+            \DB::beginTransaction();
+
+            // Create the user
+            $user = User::create([
+                'name' => $validated['name'],
+                'email' => $validated['email'],
+                'password' => Hash::make($validated['password']),
+                'password_reset_required' => true,
+            ]);
+
+            \Log::info('User created: ', ['id' => $user->id]);
+
+            // Assign company relationship
+            $user->companies()->attach($validated['company_id']);
+            \Log::info('Company assigned to user.', ['user_id' => $user->id, 'company_id' => $validated['company_id']]);
+
+            // Assign role relationship
+            $user->roles()->attach($validated['role_id']);
+            \Log::info('Role assigned to user.', ['user_id' => $user->id, 'role_id' => $validated['role_id']]);
+
+            \DB::commit();
+
+            return response()->json(['message' => 'User created successfully.', 'user' => $user], 201);
+        } catch (\Exception $e) {
+            \DB::rollBack();
+            \Log::error('Error Adding User: ', [
+                'message' => $e->getMessage(),
+                'trace' => $e->getTraceAsString(),
+            ]);
+
+            return response()->json(['error' => 'Failed to create user.', 'details' => $e->getMessage()], 500);
+        }
+    }
+    public function deleteUser($id)
+{
+    try {
+        $user = User::findOrFail($id);
+
+        \DB::transaction(function () use ($user) {
+            $user->delete();
+        });
+
+        return response()->json(['message' => 'User deleted successfully.'], 200);
+    } catch (\Exception $e) {
+        \Log::error('Error deleting user: ', ['message' => $e->getMessage()]);
+        return response()->json(['error' => 'Failed to delete user.'], 500);
+    }
+}
+public function showUser($id)
+{
+    try {
+        $user = User::with(['companies', 'roles'])->findOrFail($id);
+
+        return response()->json([
+            'id' => $user->id,
+            'name' => $user->name,
+            'email' => $user->email,
+            'company_id' => $user->companies->first()?->id, // Assuming one company per user
+            'role_id' => $user->roles->first()?->id, // Assuming one role per user
+        ]);
+    } catch (\Exception $e) {
+        \Log::error('Error fetching user details: ', ['message' => $e->getMessage()]);
+
+        return response()->json(['error' => 'User not found.'], 404);
+    }
+}
+public function updateUser(Request $request, $id)
+{
+    try {
+        $validated = $request->validate([
+            'name' => 'sometimes|required|string|max:255',
+            'email' => 'sometimes|required|string|email|unique:users,email,' . $id,
+            'company_id' => 'sometimes|required|exists:companies,id',
+            'role_id' => 'sometimes|required|exists:roles,id',
+        ]);
+
+        $user = User::findOrFail($id);
+
+        // Update user fields
+        $user->update([
+            'name' => $validated['name'] ?? $user->name,
+            'email' => $validated['email'] ?? $user->email,
+        ]);
+
+        // Update company relationship
+        if (isset($validated['company_id'])) {
+            $user->companies()->sync([$validated['company_id']]);
+        }
+
+        // Update role relationship
+        if (isset($validated['role_id'])) {
+            $user->roles()->sync([$validated['role_id']]);
+        }
+
+        return response()->json(['message' => 'User updated successfully.', 'user' => $user]);
+    } catch (\Exception $e) {
+        \Log::error('Error updating user: ', ['message' => $e->getMessage()]);
+
+        return response()->json(['error' => 'Failed to update user.', 'details' => $e->getMessage()], 500);
+    }
+}
+}
+
+
+
+===== File: app/Http/Controllers/Controller.php =====
+<?php
+
+namespace App\Http\Controllers;
+
+abstract class Controller
+{
+    //
+}
+
+
+
+===== File: app/Http/Controllers/EmailController.php =====
+<?php
+
+namespace App\Http\Controllers;
+
+use Illuminate\Http\Request;
+
+class EmailController extends Controller
+{
+    public function index(Request $request)
+    {
+        // Logic to fetch and return emails
+        return response()->json([
+            'emails' => [], // Replace with actual email fetching logic
+        ]);
+    }
+}
+
+
+
+===== File: app/Http/Controllers/AuthController.php =====
+<?php
+
+namespace App\Http\Controllers;
+
+use Illuminate\Http\Request;
+use Illuminate\Support\Facades\Auth;
+use Carbon\Carbon;
+use App\Models\User;
+use App\Models\Role;
+
+class AuthController extends Controller
+{
+    /**
+     * Create user (Registration)
+     */
+    public function register(Request $request)
+    {
+        try {
+            \Log::info('Incoming registration request:', $request->all());
+
+            // Validate input
+            $request->validate([
+                'name' => 'required|string',
+                'email' => 'required|string|email|unique:users',
+                'password' => 'required|string',
+                'c_password' => 'required|same:password',
+            ]);
+
+            \Log::info('Validation successful.');
+
+            // Create the user
+            $user = new User([
+                'name'     => $request->name,
+                'email'    => $request->email,
+                'password' => bcrypt($request->password),
+            ]);
+
+            if ($user->save()) {
+                \Log::info('User saved successfully.', ['user_id' => $user->id]);
+
+                // Optionally assign a default role named 'User'
+                $defaultRole = Role::where('name', 'User')->first();
+                if ($defaultRole) {
+                    \Log::info('Default role found.', ['role_id' => $defaultRole->id]);
+                    $user->roles()->attach($defaultRole->id);
+                    \Log::info('Role assigned to user.', [
+                        'user_id' => $user->id,
+                        'role_id' => $defaultRole->id
+                    ]);
+                } else {
+                    \Log::warning('Default role not found.');
+                }
+
+                return response()->json([
+                    'message' => 'Successfully created user with User role!'
+                ], 201);
+            } else {
+                \Log::error('Failed to save user.', $user->toArray());
+                return response()->json(['error' => 'Unable to save user.'], 500);
+            }
+        } catch (\Exception $e) {
+            \Log::error('Registration error:', [
+                'message' => $e->getMessage(),
+                'trace' => $e->getTraceAsString(),
+            ]);
+            return response()->json(['message' => 'An error occurred. Please try again.'], 500);
+        }
+    }
+
+    /**
+     * Login user and create a Sanctum token
+     */
+    public function login(Request $request)
+    {
+        try {
+            $request->validate([
+                'email'      => 'required|string|email',
+                'password'   => 'required|string',
+                'remember_me'=> 'boolean'
+            ]);
+
+            $credentials = $request->only('email', 'password');
+            \Log::info('Login attempt:', $credentials);
+
+            if (!Auth::attempt($credentials)) {
+                \Log::warning('Unauthorized login attempt for email: ' . $credentials['email']);
+                return response()->json(['message' => 'Unauthorized'], 401);
+            }
+
+            $user = Auth::user();
+            \Log::info('User authenticated:', ['user_id' => $user->id]);
+
+            // Generate Sanctum token
+            try {
+                $plainTextToken = $user->createToken('API Token')->plainTextToken;
+            } catch (\Exception $e) {
+                \Log::error('Token creation failed:', [
+                    'user_id' => $user->id,
+                    'error'   => $e->getMessage(),
+                ]);
+                return response()->json([
+                    'message' => 'Unable to generate token. Please contact support.'
+                ], 500);
+            }
+
+            // For “remember me” you no longer do $token->expires_at with Sanctum by default
+            // If you want to keep track, you can store it manually somewhere or skip it
+
+            // Fetch permissions if your User model has a "permissions" attribute
+            $userPermissions = $user->permissions ?? collect();
+            if ($userPermissions->isEmpty()) {
+                \Log::warning('User has no permissions.', ['user_id' => $user->id]);
+                return response()->json(['message' => 'User does not have sufficient permissions.'], 403);
+            }
+
+            // Fetch user role
+            $userRole = $user->roles->first()->name ?? null;
+            if (!$userRole) {
+                \Log::error('User has no role assigned.', ['user_id' => $user->id]);
+                return response()->json(['message' => 'User does not have a valid role.'], 403);
+            }
+
+            // Prepare response data
+            $userData = [
+                'id'           => $user->id,
+                'fullName'     => $user->name,
+                'username'     => $user->username ?? $user->email,
+                'email'        => $user->email,
+                'role'         => strtolower($userRole),
+                'abilityRules' => $userPermissions->toArray(),
+            ];
+
+            // Return as JSON
+            return response()->json([
+                'accessToken'   => $plainTextToken,  // This is what the Vue front end will store
+                'userData'      => $userData,
+                'abilityRules'  => $userPermissions,
+            ]);
+
+            // If you want to set a cookie for the token, you could do so:
+            // ->cookie('accessToken', $plainTextToken, 60 * 24 * 7, ...)
+            // but for a token-based approach, you typically just store it in localStorage on the frontend
+
+        } catch (\Exception $e) {
+            \Log::error('Login error:', [
+                'message' => $e->getMessage(),
+                'trace'   => $e->getTraceAsString(),
+            ]);
+            return response()->json(['message' => 'An error occurred. Please try again.'], 500);
+        }
+    }
+
+    /**
+     * Return the authenticated user
+     */
+    public function user(Request $request)
+    {
+        return response()->json($request->user());
+    }
+
+    /**
+     * Logout user (Revoke current token)
+     */
+    public function logout(Request $request)
+    {
+        \Log::info('Authorization Header:', [$request->header('Authorization')]);
+        \Log::info('Bearer Token:', [$request->bearerToken()]);
+
+        // Sanctum method to delete the currently used token:
+        if ($request->user()) {
+            $request->user()->currentAccessToken()->delete();
+            return response()->json(['message' => 'Successfully logged out'], 200);
+        }
+
+        return response()->json(['message' => 'Unable to log out.'], 401);
+    }
+
+    /**
+     * Handle unauthenticated attempts
+     */
+    protected function unauthenticated($request, array $guards)
+    {
+        return response()->json(['message' => 'Unauthenticated.'], 401);
+    }
+}
+
+
+
+===== File: app/Http/Controllers/CompanyController.php =====
+<?php
+
+namespace App\Http\Controllers;
+
+use App\Models\Company;
+use Illuminate\Http\Request;
+
+class CompanyController extends Controller
+{
+    public function index(Request $request)
+    {
+        \Log::info('CompanyController index method accessed');
+        
+        // Fetch and sort companies by 'company_name' in ascending order
+        $companies = Company::query()
+            ->when($request->get('q'), function ($query, $search) {
+                $query->where('company_name', 'like', "%{$search}%");
+            })
+            ->orderBy('company_name', 'asc') // Sort companies alphabetically
+            ->get();
+
+        // Transform companies data
+        $transformedCompanies = $companies->map(function ($company) {
+            return [
+                'id' => $company->id,
+                'companyName' => $company->company_name,
+                'createdAt' => $company->created_at,
+                'updatedAt' => $company->updated_at,
+            ];
+        });
+
+        return response()->json($transformedCompanies, 200, ['Content-Type' => 'application/json']);
+    }
+    public function allCompanies(Request $request)
+{
+    \Log::info('CompanyController allCompanies method accessed'); // Debugging Log
+
+    \Log::info('CompanyController index method accessed');
+        
+        // Fetch and sort companies by 'company_name' in ascending order
+        $companies = Company::query()
+            ->when($request->get('q'), function ($query, $search) {
+                $query->where('company_name', 'like', "%{$search}%");
+            })
+            ->orderBy('company_name', 'asc') // Sort companies alphabetically
+            ->get();
+
+        // Transform companies data
+        $transformedCompanies = $companies->map(function ($company) {
+            return [
+                'id' => $company->id,
+                'companyName' => $company->company_name,
+                'createdAt' => $company->created_at,
+                'updatedAt' => $company->updated_at,
+            ];
+        });
+
+        return response()->json($transformedCompanies, 200, ['Content-Type' => 'application/json']);
+}
+    public function paginatedIndex(Request $request)
+{
+    $validated = $request->validate([
+        'page' => 'integer|min:1',
+        'itemsPerPage' => 'integer|min:1|max:100',
+        'q' => 'nullable|string',
+    ]);
+
+    $page = $request->get('page', 1);
+    $itemsPerPage = $request->get('itemsPerPage', 10);
+
+    $companies = Company::query()
+        ->when($request->get('q'), function ($query, $search) {
+            $query->where('company_name', 'like', "%{$search}%");
+        })
+        ->paginate($itemsPerPage, ['*'], 'page', $page);
+
+    $transformedCompanies = $companies->getCollection()->map(function ($company) {
+        return [
+            'id' => $company->id,
+            'companyName' => $company->company_name,
+        ];
+    });
+
+    $paginatedResponse = $companies->toArray();
+    $paginatedResponse['data'] = $transformedCompanies->toArray();
+
+    return response()->json($paginatedResponse);
+}
+public function addCompany(Request $request)
+{
+    \Log::info('Add Company Request: ', $request->all());
+
+    $validated = $request->validate([
+        'company_name' => 'required|string|max:255|unique:companies,company_name',
+    ]);
+
+    try {
+        $company = Company::create([
+            'company_name' => $validated['company_name'],
+        ]);
+
+        \Log::info('Company created: ', ['id' => $company->id]);
+
+        return response()->json(['message' => 'Company created successfully.', 'company' => $company], 201);
+    } catch (\Exception $e) {
+        \Log::error('Error adding company: ', [
+            'message' => $e->getMessage(),
+            'trace' => $e->getTraceAsString(),
+        ]);
+
+        return response()->json(['error' => 'Failed to create company.', 'details' => $e->getMessage()], 500);
+    }
+}
+public function deleteCompany($id)
+{
+    try {
+        $company = Company::findOrFail($id);
+
+        // Use a transaction if there are related data to ensure data integrity
+        \DB::transaction(function () use ($company) {
+            $company->delete();
+        });
+
+        return response()->json(['message' => 'Company deleted successfully.'], 200);
+    } catch (\Exception $e) {
+        \Log::error('Error deleting company: ', ['message' => $e->getMessage()]);
+        return response()->json(['error' => 'Failed to delete company.'], 500);
+    }
+}   
+public function showCompany($id)
+{
+    try {
+        $company = Company::findOrFail($id);
+
+        return response()->json([
+            'id' => $company->id,
+            'companyName' => $company->company_name,
+        ]);
+    } catch (\Exception $e) {
+        \Log::error('Error fetching company details: ', ['message' => $e->getMessage()]);
+        return response()->json(['error' => 'Company not found.'], 404);
+    }
+}
+
+public function updateCompany(Request $request, $id)
+{
+    try {
+        $validated = $request->validate([
+            'company_name' => 'required|string|max:255|unique:companies,company_name,' . $id,
+        ]);
+
+        $company = Company::findOrFail($id);
+        $company->update(['company_name' => $validated['company_name']]);
+
+        return response()->json(['message' => 'Company updated successfully.', 'company' => $company]);
+    } catch (\Exception $e) {
+        \Log::error('Error updating company: ', ['message' => $e->getMessage()]);
+        return response()->json(['error' => 'Failed to update company.', 'details' => $e->getMessage()], 500);
+    }
+}
+}
+
+
+
+===== File: app/Providers/AuthServiceProvider.php =====
+<?php
+
+namespace App\Providers;
+
+use Illuminate\Foundation\Support\Providers\AuthServiceProvider as ServiceProvider;
+use Illuminate\Support\Facades\Gate;
+use Laravel\Passport\Passport;
+
+class AuthServiceProvider extends ServiceProvider
+{
+    /**
+     * The policy mappings for the application.
+     *
+     * @var array
+     */
+    protected $policies = [
+        // 'App\Models\Model' => 'App\Policies\ModelPolicy',
+    ];
+
+    /**
+     * Register any authentication / authorization services.
+     *
+     * @return void
+     */
+    public function boot()
+    {
+        $this->registerPolicies();
+
+    }
+}
+
+
+
+===== File: app/Providers/AppServiceProvider.php =====
+<?php
+
+namespace App\Providers;
+
+use Illuminate\Support\Facades\Schema;
+use Illuminate\Support\ServiceProvider;
+
+class AppServiceProvider extends ServiceProvider
+{
+    /**
+     * Register any application services.
+     */
+    public function register(): void
+    {
+        //
+    }
+
+    /**
+     * Bootstrap any application services.
+     */
+    public function boot(): void
+    {
+        Schema::defaultStringLength(191);
+    }
+    protected function mapApiRoutes()
+{
+    Route::prefix('api')
+        ->middleware('api')
+        ->namespace($this->namespace)
+        ->group(base_path('routes/api.php'));
+}
+}
+
+
+
+===== File: bootstrap/providers.php =====
+<?php
+
+return [
+    App\Providers\AppServiceProvider::class,
+];
+
+
+
+===== File: bootstrap/cache/.gitignore =====
+*
+!.gitignore
+
+
+
+===== File: bootstrap/cache/events.php =====
+<?php return array (
+  'Illuminate\\Foundation\\Support\\Providers\\EventServiceProvider' => 
+  array (
+  ),
+);
+
+
+===== File: bootstrap/cache/services.php =====
+<?php return array (
+  'providers' => 
+  array (
+    0 => 'Illuminate\\Auth\\AuthServiceProvider',
+    1 => 'Illuminate\\Broadcasting\\BroadcastServiceProvider',
+    2 => 'Illuminate\\Bus\\BusServiceProvider',
+    3 => 'Illuminate\\Cache\\CacheServiceProvider',
+    4 => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
+    5 => 'Illuminate\\Cookie\\CookieServiceProvider',
+    6 => 'Illuminate\\Database\\DatabaseServiceProvider',
+    7 => 'Illuminate\\Encryption\\EncryptionServiceProvider',
+    8 => 'Illuminate\\Filesystem\\FilesystemServiceProvider',
+    9 => 'Illuminate\\Foundation\\Providers\\FoundationServiceProvider',
+    10 => 'Illuminate\\Hashing\\HashServiceProvider',
+    11 => 'Illuminate\\Mail\\MailServiceProvider',
+    12 => 'Illuminate\\Notifications\\NotificationServiceProvider',
+    13 => 'Illuminate\\Pagination\\PaginationServiceProvider',
+    14 => 'Illuminate\\Auth\\Passwords\\PasswordResetServiceProvider',
+    15 => 'Illuminate\\Pipeline\\PipelineServiceProvider',
+    16 => 'Illuminate\\Queue\\QueueServiceProvider',
+    17 => 'Illuminate\\Redis\\RedisServiceProvider',
+    18 => 'Illuminate\\Session\\SessionServiceProvider',
+    19 => 'Illuminate\\Translation\\TranslationServiceProvider',
+    20 => 'Illuminate\\Validation\\ValidationServiceProvider',
+    21 => 'Illuminate\\View\\ViewServiceProvider',
+    22 => 'Laravel\\Sail\\SailServiceProvider',
+    23 => 'Laravel\\Sanctum\\SanctumServiceProvider',
+    24 => 'Laravel\\Tinker\\TinkerServiceProvider',
+    25 => 'Carbon\\Laravel\\ServiceProvider',
+    26 => 'NunoMaduro\\Collision\\Adapters\\Laravel\\CollisionServiceProvider',
+    27 => 'Termwind\\Laravel\\TermwindServiceProvider',
+    28 => 'App\\Providers\\AppServiceProvider',
+  ),
+  'eager' => 
+  array (
+    0 => 'Illuminate\\Auth\\AuthServiceProvider',
+    1 => 'Illuminate\\Cookie\\CookieServiceProvider',
+    2 => 'Illuminate\\Database\\DatabaseServiceProvider',
+    3 => 'Illuminate\\Encryption\\EncryptionServiceProvider',
+    4 => 'Illuminate\\Filesystem\\FilesystemServiceProvider',
+    5 => 'Illuminate\\Foundation\\Providers\\FoundationServiceProvider',
+    6 => 'Illuminate\\Notifications\\NotificationServiceProvider',
+    7 => 'Illuminate\\Pagination\\PaginationServiceProvider',
+    8 => 'Illuminate\\Session\\SessionServiceProvider',
+    9 => 'Illuminate\\View\\ViewServiceProvider',
+    10 => 'Laravel\\Sanctum\\SanctumServiceProvider',
+    11 => 'Carbon\\Laravel\\ServiceProvider',
+    12 => 'NunoMaduro\\Collision\\Adapters\\Laravel\\CollisionServiceProvider',
+    13 => 'Termwind\\Laravel\\TermwindServiceProvider',
+    14 => 'App\\Providers\\AppServiceProvider',
+  ),
+  'deferred' => 
+  array (
+    'Illuminate\\Broadcasting\\BroadcastManager' => 'Illuminate\\Broadcasting\\BroadcastServiceProvider',
+    'Illuminate\\Contracts\\Broadcasting\\Factory' => 'Illuminate\\Broadcasting\\BroadcastServiceProvider',
+    'Illuminate\\Contracts\\Broadcasting\\Broadcaster' => 'Illuminate\\Broadcasting\\BroadcastServiceProvider',
+    'Illuminate\\Bus\\Dispatcher' => 'Illuminate\\Bus\\BusServiceProvider',
+    'Illuminate\\Contracts\\Bus\\Dispatcher' => 'Illuminate\\Bus\\BusServiceProvider',
+    'Illuminate\\Contracts\\Bus\\QueueingDispatcher' => 'Illuminate\\Bus\\BusServiceProvider',
+    'Illuminate\\Bus\\BatchRepository' => 'Illuminate\\Bus\\BusServiceProvider',
+    'Illuminate\\Bus\\DatabaseBatchRepository' => 'Illuminate\\Bus\\BusServiceProvider',
+    'cache' => 'Illuminate\\Cache\\CacheServiceProvider',
+    'cache.store' => 'Illuminate\\Cache\\CacheServiceProvider',
+    'cache.psr6' => 'Illuminate\\Cache\\CacheServiceProvider',
+    'memcached.connector' => 'Illuminate\\Cache\\CacheServiceProvider',
+    'Illuminate\\Cache\\RateLimiter' => 'Illuminate\\Cache\\CacheServiceProvider',
+    'Illuminate\\Foundation\\Console\\AboutCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
+    'Illuminate\\Cache\\Console\\ClearCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
+    'Illuminate\\Cache\\Console\\ForgetCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
+    'Illuminate\\Foundation\\Console\\ClearCompiledCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
+    'Illuminate\\Auth\\Console\\ClearResetsCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
+    'Illuminate\\Foundation\\Console\\ConfigCacheCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
+    'Illuminate\\Foundation\\Console\\ConfigClearCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
+    'Illuminate\\Foundation\\Console\\ConfigShowCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
+    'Illuminate\\Database\\Console\\DbCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
+    'Illuminate\\Database\\Console\\MonitorCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
+    'Illuminate\\Database\\Console\\PruneCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
+    'Illuminate\\Database\\Console\\ShowCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
+    'Illuminate\\Database\\Console\\TableCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
+    'Illuminate\\Database\\Console\\WipeCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
+    'Illuminate\\Foundation\\Console\\DownCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
+    'Illuminate\\Foundation\\Console\\EnvironmentCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
+    'Illuminate\\Foundation\\Console\\EnvironmentDecryptCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
+    'Illuminate\\Foundation\\Console\\EnvironmentEncryptCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
+    'Illuminate\\Foundation\\Console\\EventCacheCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
+    'Illuminate\\Foundation\\Console\\EventClearCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
+    'Illuminate\\Foundation\\Console\\EventListCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
+    'Illuminate\\Foundation\\Console\\KeyGenerateCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
+    'Illuminate\\Foundation\\Console\\OptimizeCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
+    'Illuminate\\Foundation\\Console\\OptimizeClearCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
+    'Illuminate\\Foundation\\Console\\PackageDiscoverCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
+    'Illuminate\\Cache\\Console\\PruneStaleTagsCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
+    'Illuminate\\Queue\\Console\\ClearCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
+    'Illuminate\\Queue\\Console\\ListFailedCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
+    'Illuminate\\Queue\\Console\\FlushFailedCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
+    'Illuminate\\Queue\\Console\\ForgetFailedCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
+    'Illuminate\\Queue\\Console\\ListenCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
+    'Illuminate\\Queue\\Console\\MonitorCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
+    'Illuminate\\Queue\\Console\\PruneBatchesCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
+    'Illuminate\\Queue\\Console\\PruneFailedJobsCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
+    'Illuminate\\Queue\\Console\\RestartCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
+    'Illuminate\\Queue\\Console\\RetryCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
+    'Illuminate\\Queue\\Console\\RetryBatchCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
+    'Illuminate\\Queue\\Console\\WorkCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
+    'Illuminate\\Foundation\\Console\\RouteCacheCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
+    'Illuminate\\Foundation\\Console\\RouteClearCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
+    'Illuminate\\Foundation\\Console\\RouteListCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
+    'Illuminate\\Database\\Console\\DumpCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
+    'Illuminate\\Database\\Console\\Seeds\\SeedCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
+    'Illuminate\\Console\\Scheduling\\ScheduleFinishCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
+    'Illuminate\\Console\\Scheduling\\ScheduleListCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
+    'Illuminate\\Console\\Scheduling\\ScheduleRunCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
+    'Illuminate\\Console\\Scheduling\\ScheduleClearCacheCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
+    'Illuminate\\Console\\Scheduling\\ScheduleTestCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
+    'Illuminate\\Console\\Scheduling\\ScheduleWorkCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
+    'Illuminate\\Console\\Scheduling\\ScheduleInterruptCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
+    'Illuminate\\Database\\Console\\ShowModelCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
+    'Illuminate\\Foundation\\Console\\StorageLinkCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
+    'Illuminate\\Foundation\\Console\\StorageUnlinkCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
+    'Illuminate\\Foundation\\Console\\UpCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
+    'Illuminate\\Foundation\\Console\\ViewCacheCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
+    'Illuminate\\Foundation\\Console\\ViewClearCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
+    'Illuminate\\Foundation\\Console\\ApiInstallCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
+    'Illuminate\\Foundation\\Console\\BroadcastingInstallCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
+    'Illuminate\\Cache\\Console\\CacheTableCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
+    'Illuminate\\Foundation\\Console\\CastMakeCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
+    'Illuminate\\Foundation\\Console\\ChannelListCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
+    'Illuminate\\Foundation\\Console\\ChannelMakeCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
+    'Illuminate\\Foundation\\Console\\ClassMakeCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
+    'Illuminate\\Foundation\\Console\\ComponentMakeCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
+    'Illuminate\\Foundation\\Console\\ConfigPublishCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
+    'Illuminate\\Foundation\\Console\\ConsoleMakeCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
+    'Illuminate\\Routing\\Console\\ControllerMakeCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
+    'Illuminate\\Foundation\\Console\\DocsCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
+    'Illuminate\\Foundation\\Console\\EnumMakeCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
+    'Illuminate\\Foundation\\Console\\EventGenerateCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
+    'Illuminate\\Foundation\\Console\\EventMakeCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
+    'Illuminate\\Foundation\\Console\\ExceptionMakeCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
+    'Illuminate\\Database\\Console\\Factories\\FactoryMakeCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
+    'Illuminate\\Foundation\\Console\\InterfaceMakeCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
+    'Illuminate\\Foundation\\Console\\JobMakeCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
+    'Illuminate\\Foundation\\Console\\LangPublishCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
+    'Illuminate\\Foundation\\Console\\ListenerMakeCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
+    'Illuminate\\Foundation\\Console\\MailMakeCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
+    'Illuminate\\Routing\\Console\\MiddlewareMakeCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
+    'Illuminate\\Foundation\\Console\\ModelMakeCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
+    'Illuminate\\Foundation\\Console\\NotificationMakeCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
+    'Illuminate\\Notifications\\Console\\NotificationTableCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
+    'Illuminate\\Foundation\\Console\\ObserverMakeCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
+    'Illuminate\\Foundation\\Console\\PolicyMakeCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
+    'Illuminate\\Foundation\\Console\\ProviderMakeCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
+    'Illuminate\\Queue\\Console\\FailedTableCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
+    'Illuminate\\Queue\\Console\\TableCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
+    'Illuminate\\Queue\\Console\\BatchesTableCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
+    'Illuminate\\Foundation\\Console\\RequestMakeCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
+    'Illuminate\\Foundation\\Console\\ResourceMakeCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
+    'Illuminate\\Foundation\\Console\\RuleMakeCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
+    'Illuminate\\Foundation\\Console\\ScopeMakeCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
+    'Illuminate\\Database\\Console\\Seeds\\SeederMakeCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
+    'Illuminate\\Session\\Console\\SessionTableCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
+    'Illuminate\\Foundation\\Console\\ServeCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
+    'Illuminate\\Foundation\\Console\\StubPublishCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
+    'Illuminate\\Foundation\\Console\\TestMakeCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
+    'Illuminate\\Foundation\\Console\\TraitMakeCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
+    'Illuminate\\Foundation\\Console\\VendorPublishCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
+    'Illuminate\\Foundation\\Console\\ViewMakeCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
+    'migrator' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
+    'migration.repository' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
+    'migration.creator' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
+    'Illuminate\\Database\\Console\\Migrations\\MigrateCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
+    'Illuminate\\Database\\Console\\Migrations\\FreshCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
+    'Illuminate\\Database\\Console\\Migrations\\InstallCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
+    'Illuminate\\Database\\Console\\Migrations\\RefreshCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
+    'Illuminate\\Database\\Console\\Migrations\\ResetCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
+    'Illuminate\\Database\\Console\\Migrations\\RollbackCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
+    'Illuminate\\Database\\Console\\Migrations\\StatusCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
+    'Illuminate\\Database\\Console\\Migrations\\MigrateMakeCommand' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
+    'composer' => 'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider',
+    'hash' => 'Illuminate\\Hashing\\HashServiceProvider',
+    'hash.driver' => 'Illuminate\\Hashing\\HashServiceProvider',
+    'mail.manager' => 'Illuminate\\Mail\\MailServiceProvider',
+    'mailer' => 'Illuminate\\Mail\\MailServiceProvider',
+    'Illuminate\\Mail\\Markdown' => 'Illuminate\\Mail\\MailServiceProvider',
+    'auth.password' => 'Illuminate\\Auth\\Passwords\\PasswordResetServiceProvider',
+    'auth.password.broker' => 'Illuminate\\Auth\\Passwords\\PasswordResetServiceProvider',
+    'Illuminate\\Contracts\\Pipeline\\Hub' => 'Illuminate\\Pipeline\\PipelineServiceProvider',
+    'pipeline' => 'Illuminate\\Pipeline\\PipelineServiceProvider',
+    'queue' => 'Illuminate\\Queue\\QueueServiceProvider',
+    'queue.connection' => 'Illuminate\\Queue\\QueueServiceProvider',
+    'queue.failer' => 'Illuminate\\Queue\\QueueServiceProvider',
+    'queue.listener' => 'Illuminate\\Queue\\QueueServiceProvider',
+    'queue.worker' => 'Illuminate\\Queue\\QueueServiceProvider',
+    'redis' => 'Illuminate\\Redis\\RedisServiceProvider',
+    'redis.connection' => 'Illuminate\\Redis\\RedisServiceProvider',
+    'translator' => 'Illuminate\\Translation\\TranslationServiceProvider',
+    'translation.loader' => 'Illuminate\\Translation\\TranslationServiceProvider',
+    'validator' => 'Illuminate\\Validation\\ValidationServiceProvider',
+    'validation.presence' => 'Illuminate\\Validation\\ValidationServiceProvider',
+    'Illuminate\\Contracts\\Validation\\UncompromisedVerifier' => 'Illuminate\\Validation\\ValidationServiceProvider',
+    'Laravel\\Sail\\Console\\InstallCommand' => 'Laravel\\Sail\\SailServiceProvider',
+    'Laravel\\Sail\\Console\\PublishCommand' => 'Laravel\\Sail\\SailServiceProvider',
+    'command.tinker' => 'Laravel\\Tinker\\TinkerServiceProvider',
+  ),
+  'when' => 
+  array (
+    'Illuminate\\Broadcasting\\BroadcastServiceProvider' => 
+    array (
+    ),
+    'Illuminate\\Bus\\BusServiceProvider' => 
+    array (
+    ),
+    'Illuminate\\Cache\\CacheServiceProvider' => 
+    array (
+    ),
+    'Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider' => 
+    array (
+    ),
+    'Illuminate\\Hashing\\HashServiceProvider' => 
+    array (
+    ),
+    'Illuminate\\Mail\\MailServiceProvider' => 
+    array (
+    ),
+    'Illuminate\\Auth\\Passwords\\PasswordResetServiceProvider' => 
+    array (
+    ),
+    'Illuminate\\Pipeline\\PipelineServiceProvider' => 
+    array (
+    ),
+    'Illuminate\\Queue\\QueueServiceProvider' => 
+    array (
+    ),
+    'Illuminate\\Redis\\RedisServiceProvider' => 
+    array (
+    ),
+    'Illuminate\\Translation\\TranslationServiceProvider' => 
+    array (
+    ),
+    'Illuminate\\Validation\\ValidationServiceProvider' => 
+    array (
+    ),
+    'Laravel\\Sail\\SailServiceProvider' => 
+    array (
+    ),
+    'Laravel\\Tinker\\TinkerServiceProvider' => 
+    array (
+    ),
+  ),
+);
+
+
+===== File: bootstrap/cache/packages.php =====
+<?php return array (
+  'laravel/sail' => 
+  array (
+    'providers' => 
+    array (
+      0 => 'Laravel\\Sail\\SailServiceProvider',
+    ),
+  ),
+  'laravel/sanctum' => 
+  array (
+    'providers' => 
+    array (
+      0 => 'Laravel\\Sanctum\\SanctumServiceProvider',
+    ),
+  ),
+  'laravel/tinker' => 
+  array (
+    'providers' => 
+    array (
+      0 => 'Laravel\\Tinker\\TinkerServiceProvider',
+    ),
+  ),
+  'nesbot/carbon' => 
+  array (
+    'providers' => 
+    array (
+      0 => 'Carbon\\Laravel\\ServiceProvider',
+    ),
+  ),
+  'nunomaduro/collision' => 
+  array (
+    'providers' => 
+    array (
+      0 => 'NunoMaduro\\Collision\\Adapters\\Laravel\\CollisionServiceProvider',
+    ),
+  ),
+  'nunomaduro/termwind' => 
+  array (
+    'providers' => 
+    array (
+      0 => 'Termwind\\Laravel\\TermwindServiceProvider',
+    ),
+  ),
+);
+
+
+===== File: bootstrap/app.php =====
+<?php
+
+use Illuminate\Foundation\Application;
+use Illuminate\Foundation\Configuration\Exceptions;
+use Illuminate\Foundation\Configuration\Middleware;
+
+return Application::configure(basePath: dirname(__DIR__))
+    ->withRouting(
+        web: __DIR__.'/../routes/web.php',
+        api: __DIR__.'/../routes/api.php',
+        commands: __DIR__.'/../routes/console.php',
+        health: '/up',
+    )
+    ->withMiddleware(function (Middleware $middleware) {
+        //
+    })
+    ->withExceptions(function (Exceptions $exceptions) {
+        //
+    })->create();
+
+
+
+===== File: config/session.php =====
+<?php
+
+use Illuminate\Support\Str;
+
+return [
+
+    /*
+    |--------------------------------------------------------------------------
+    | Default Session Driver
+    |--------------------------------------------------------------------------
+    |
+    | This option determines the default session driver that is utilized for
+    | incoming requests. Laravel supports a variety of storage options to
+    | persist session data. Database storage is a great default choice.
+    |
+    | Supported: "file", "cookie", "database", "apc",
+    |            "memcached", "redis", "dynamodb", "array"
+    |
+    */
+
+    'driver' => env('SESSION_DRIVER', 'database'),
+
+    /*
+    |--------------------------------------------------------------------------
+    | Session Lifetime
+    |--------------------------------------------------------------------------
+    |
+    | Here you may specify the number of minutes that you wish the session
+    | to be allowed to remain idle before it expires. If you want them
+    | to expire immediately when the browser is closed then you may
+    | indicate that via the expire_on_close configuration option.
+    |
+    */
+
+    'lifetime' => env('SESSION_LIFETIME', 120),
+
+    'expire_on_close' => env('SESSION_EXPIRE_ON_CLOSE', false),
+
+    /*
+    |--------------------------------------------------------------------------
+    | Session Encryption
+    |--------------------------------------------------------------------------
+    |
+    | This option allows you to easily specify that all of your session data
+    | should be encrypted before it's stored. All encryption is performed
+    | automatically by Laravel and you may use the session like normal.
+    |
+    */
+
+    'encrypt' => env('SESSION_ENCRYPT', false),
+
+    /*
+    |--------------------------------------------------------------------------
+    | Session File Location
+    |--------------------------------------------------------------------------
+    |
+    | When utilizing the "file" session driver, the session files are placed
+    | on disk. The default storage location is defined here; however, you
+    | are free to provide another location where they should be stored.
+    |
+    */
+
+    'files' => storage_path('framework/sessions'),
+
+    /*
+    |--------------------------------------------------------------------------
+    | Session Database Connection
+    |--------------------------------------------------------------------------
+    |
+    | When using the "database" or "redis" session drivers, you may specify a
+    | connection that should be used to manage these sessions. This should
+    | correspond to a connection in your database configuration options.
+    |
+    */
+
+    'connection' => env('SESSION_CONNECTION'),
+
+    /*
+    |--------------------------------------------------------------------------
+    | Session Database Table
+    |--------------------------------------------------------------------------
+    |
+    | When using the "database" session driver, you may specify the table to
+    | be used to store sessions. Of course, a sensible default is defined
+    | for you; however, you're welcome to change this to another table.
+    |
+    */
+
+    'table' => env('SESSION_TABLE', 'sessions'),
+
+    /*
+    |--------------------------------------------------------------------------
+    | Session Cache Store
+    |--------------------------------------------------------------------------
+    |
+    | When using one of the framework's cache driven session backends, you may
+    | define the cache store which should be used to store the session data
+    | between requests. This must match one of your defined cache stores.
+    |
+    | Affects: "apc", "dynamodb", "memcached", "redis"
+    |
+    */
+
+    'store' => env('SESSION_STORE'),
+
+    /*
+    |--------------------------------------------------------------------------
+    | Session Sweeping Lottery
+    |--------------------------------------------------------------------------
+    |
+    | Some session drivers must manually sweep their storage location to get
+    | rid of old sessions from storage. Here are the chances that it will
+    | happen on a given request. By default, the odds are 2 out of 100.
+    |
+    */
+
+    'lottery' => [2, 100],
+
+    /*
+    |--------------------------------------------------------------------------
+    | Session Cookie Name
+    |--------------------------------------------------------------------------
+    |
+    | Here you may change the name of the session cookie that is created by
+    | the framework. Typically, you should not need to change this value
+    | since doing so does not grant a meaningful security improvement.
+    |
+    */
+
+    'cookie' => env(
+        'SESSION_COOKIE',
+        Str::slug(env('APP_NAME', 'laravel'), '_').'_session'
+    ),
+
+    /*
+    |--------------------------------------------------------------------------
+    | Session Cookie Path
+    |--------------------------------------------------------------------------
+    |
+    | The session cookie path determines the path for which the cookie will
+    | be regarded as available. Typically, this will be the root path of
+    | your application, but you're free to change this when necessary.
+    |
+    */
+
+    'path' => env('SESSION_PATH', '/'),
+
+    /*
+    |--------------------------------------------------------------------------
+    | Session Cookie Domain
+    |--------------------------------------------------------------------------
+    |
+    | This value determines the domain and subdomains the session cookie is
+    | available to. By default, the cookie will be available to the root
+    | domain and all subdomains. Typically, this shouldn't be changed.
+    |
+    */
+
+    'domain' => env('SESSION_DOMAIN'),
+
+    /*
+    |--------------------------------------------------------------------------
+    | HTTPS Only Cookies
+    |--------------------------------------------------------------------------
+    |
+    | By setting this option to true, session cookies will only be sent back
+    | to the server if the browser has a HTTPS connection. This will keep
+    | the cookie from being sent to you when it can't be done securely.
+    |
+    */
+
+    'secure' => env('SESSION_SECURE_COOKIE'),
+
+    /*
+    |--------------------------------------------------------------------------
+    | HTTP Access Only
+    |--------------------------------------------------------------------------
+    |
+    | Setting this value to true will prevent JavaScript from accessing the
+    | value of the cookie and the cookie will only be accessible through
+    | the HTTP protocol. It's unlikely you should disable this option.
+    |
+    */
+
+    'http_only' => env('SESSION_HTTP_ONLY', true),
+
+    /*
+    |--------------------------------------------------------------------------
+    | Same-Site Cookies
+    |--------------------------------------------------------------------------
+    |
+    | This option determines how your cookies behave when cross-site requests
+    | take place, and can be used to mitigate CSRF attacks. By default, we
+    | will set this value to "lax" to permit secure cross-site requests.
+    |
+    | See: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie#samesitesamesite-value
+    |
+    | Supported: "lax", "strict", "none", null
+    |
+    */
+
+    'same_site' => env('SESSION_SAME_SITE', 'lax'),
+
+    /*
+    |--------------------------------------------------------------------------
+    | Partitioned Cookies
+    |--------------------------------------------------------------------------
+    |
+    | Setting this value to true will tie the cookie to the top-level site for
+    | a cross-site context. Partitioned cookies are accepted by the browser
+    | when flagged "secure" and the Same-Site attribute is set to "none".
+    |
+    */
+
+    'partitioned' => env('SESSION_PARTITIONED_COOKIE', false),
+
+];
+
+
+
+===== File: config/mail.php =====
+<?php
+
+return [
+
+    /*
+    |--------------------------------------------------------------------------
+    | Default Mailer
+    |--------------------------------------------------------------------------
+    |
+    | This option controls the default mailer that is used to send all email
+    | messages unless another mailer is explicitly specified when sending
+    | the message. All additional mailers can be configured within the
+    | "mailers" array. Examples of each type of mailer are provided.
+    |
+    */
+
+    'default' => env('MAIL_MAILER', 'log'),
+
+    /*
+    |--------------------------------------------------------------------------
+    | Mailer Configurations
+    |--------------------------------------------------------------------------
+    |
+    | Here you may configure all of the mailers used by your application plus
+    | their respective settings. Several examples have been configured for
+    | you and you are free to add your own as your application requires.
+    |
+    | Laravel supports a variety of mail "transport" drivers that can be used
+    | when delivering an email. You may specify which one you're using for
+    | your mailers below. You may also add additional mailers if needed.
+    |
+    | Supported: "smtp", "sendmail", "mailgun", "ses", "ses-v2",
+    |            "postmark", "resend", "log", "array",
+    |            "failover", "roundrobin"
+    |
+    */
+
+    'mailers' => [
+
+        'smtp' => [
+            'transport' => 'smtp',
+            'url' => env('MAIL_URL'),
+            'host' => env('MAIL_HOST', '127.0.0.1'),
+            'port' => env('MAIL_PORT', 2525),
+            'encryption' => env('MAIL_ENCRYPTION', 'tls'),
+            'username' => env('MAIL_USERNAME'),
+            'password' => env('MAIL_PASSWORD'),
+            'timeout' => null,
+            'local_domain' => env('MAIL_EHLO_DOMAIN', parse_url(env('APP_URL', 'http://localhost'), PHP_URL_HOST)),
+        ],
+
+        'ses' => [
+            'transport' => 'ses',
+        ],
+
+        'postmark' => [
+            'transport' => 'postmark',
+            // 'message_stream_id' => env('POSTMARK_MESSAGE_STREAM_ID'),
+            // 'client' => [
+            //     'timeout' => 5,
+            // ],
+        ],
+
+        'resend' => [
+            'transport' => 'resend',
+        ],
+
+        'sendmail' => [
+            'transport' => 'sendmail',
+            'path' => env('MAIL_SENDMAIL_PATH', '/usr/sbin/sendmail -bs -i'),
+        ],
+
+        'log' => [
+            'transport' => 'log',
+            'channel' => env('MAIL_LOG_CHANNEL'),
+        ],
+
+        'array' => [
+            'transport' => 'array',
+        ],
+
+        'failover' => [
+            'transport' => 'failover',
+            'mailers' => [
+                'smtp',
+                'log',
+            ],
+        ],
+
+        'roundrobin' => [
+            'transport' => 'roundrobin',
+            'mailers' => [
+                'ses',
+                'postmark',
+            ],
+        ],
+
+    ],
+
+    /*
+    |--------------------------------------------------------------------------
+    | Global "From" Address
+    |--------------------------------------------------------------------------
+    |
+    | You may wish for all emails sent by your application to be sent from
+    | the same address. Here you may specify a name and address that is
+    | used globally for all emails that are sent by your application.
+    |
+    */
+
+    'from' => [
+        'address' => env('MAIL_FROM_ADDRESS', 'hello@example.com'),
+        'name' => env('MAIL_FROM_NAME', 'Example'),
+    ],
+
+];
+
+
+
+===== File: config/cors.php =====
+<?php 
+
+return [
+    'paths' => ['api/*', 'sanctum/csrf-cookie'],
+    'allowed_methods' => ['*'],
+    'allowed_origins' => ['*'],
+    'allowed_origins_patterns' => [],
+    'allowed_headers' => ['*'],
+    'exposed_headers' => [],
+    'max_age' => 0,
+    'supports_credentials' => true,
+];
+
+
+
+===== File: config/services.php =====
+<?php
+
+return [
+
+    /*
+    |--------------------------------------------------------------------------
+    | Third Party Services
+    |--------------------------------------------------------------------------
+    |
+    | This file is for storing the credentials for third party services such
+    | as Mailgun, Postmark, AWS and more. This file provides the de facto
+    | location for this type of information, allowing packages to have
+    | a conventional file to locate the various service credentials.
+    |
+    */
+
+    'postmark' => [
+        'token' => env('POSTMARK_TOKEN'),
+    ],
+
+    'ses' => [
+        'key' => env('AWS_ACCESS_KEY_ID'),
+        'secret' => env('AWS_SECRET_ACCESS_KEY'),
+        'region' => env('AWS_DEFAULT_REGION', 'us-east-1'),
+    ],
+
+    'resend' => [
+        'key' => env('RESEND_KEY'),
+    ],
+
+    'slack' => [
+        'notifications' => [
+            'bot_user_oauth_token' => env('SLACK_BOT_USER_OAUTH_TOKEN'),
+            'channel' => env('SLACK_BOT_USER_DEFAULT_CHANNEL'),
+        ],
+    ],
+
+];
+
+
+
+===== File: config/auth.php =====
+<?php
+
+return [
+
+    /*
+    |--------------------------------------------------------------------------
+    | Authentication Defaults
+    |--------------------------------------------------------------------------
+    |
+    | This option defines the default authentication "guard" and password
+    | reset "broker" for your application. You may change these values
+    | as required, but they're a perfect start for most applications.
+    |
+    */
+
+    'defaults' => [
+        'guard' => env('AUTH_GUARD', 'web'),
+        'passwords' => env('AUTH_PASSWORD_BROKER', 'users'),
+    ],
+
+    /*
+    |--------------------------------------------------------------------------
+    | Authentication Guards
+    |--------------------------------------------------------------------------
+    |
+    | Next, you may define every authentication guard for your application.
+    | Of course, a great default configuration has been defined for you
+    | which utilizes session storage plus the Eloquent user provider.
+    |
+    | All authentication guards have a user provider, which defines how the
+    | users are actually retrieved out of your database or other storage
+    | system used by the application. Typically, Eloquent is utilized.
+    |
+    | Supported: "session"
+    |
+    */
+
+    'guards' => [
+        'web' => [
+            'driver' => 'session',
+            'provider' => 'users',
+        ],
+        'api' => [
+            'driver' => 'sanctum',
+        'provider' => 'users',
+        // Hashing the api breaks authentication
+        // 'hash' => false,
+        ],
+    ],
+
+    /*
+    |--------------------------------------------------------------------------
+    | User Providers
+    |--------------------------------------------------------------------------
+    |
+    | All authentication guards have a user provider, which defines how the
+    | users are actually retrieved out of your database or other storage
+    | system used by the application. Typically, Eloquent is utilized.
+    |
+    | If you have multiple user tables or models you may configure multiple
+    | providers to represent the model / table. These providers may then
+    | be assigned to any extra authentication guards you have defined.
+    |
+    | Supported: "database", "eloquent"
+    |
+    */
+
+    'providers' => [
+        'users' => [
+            'driver' => 'eloquent',
+            'model' => env('AUTH_MODEL', App\Models\User::class),
+        ],
+
+        // 'users' => [
+        //     'driver' => 'database',
+        //     'table' => 'users',
+        // ],
+    ],
+
+    /*
+    |--------------------------------------------------------------------------
+    | Resetting Passwords
+    |--------------------------------------------------------------------------
+    |
+    | These configuration options specify the behavior of Laravel's password
+    | reset functionality, including the table utilized for token storage
+    | and the user provider that is invoked to actually retrieve users.
+    |
+    | The expiry time is the number of minutes that each reset token will be
+    | considered valid. This security feature keeps tokens short-lived so
+    | they have less time to be guessed. You may change this as needed.
+    |
+    | The throttle setting is the number of seconds a user must wait before
+    | generating more password reset tokens. This prevents the user from
+    | quickly generating a very large amount of password reset tokens.
+    |
+    */
+
+    'passwords' => [
+        'users' => [
+            'provider' => 'users',
+            'table' => env('AUTH_PASSWORD_RESET_TOKEN_TABLE', 'password_reset_tokens'),
+            'expire' => 60,
+            'throttle' => 60,
+        ],
+    ],
+
+    /*
+    |--------------------------------------------------------------------------
+    | Password Confirmation Timeout
+    |--------------------------------------------------------------------------
+    |
+    | Here you may define the amount of seconds before a password confirmation
+    | window expires and users are asked to re-enter their password via the
+    | confirmation screen. By default, the timeout lasts for three hours.
+    |
+    */
+
+    'password_timeout' => env('AUTH_PASSWORD_TIMEOUT', 10800),
+
+];
+
+
+
+===== File: config/database.php =====
+<?php
+
+use Illuminate\Support\Str;
+
+return [
+
+    /*
+    |--------------------------------------------------------------------------
+    | Default Database Connection Name
+    |--------------------------------------------------------------------------
+    |
+    | Here you may specify which of the database connections below you wish
+    | to use as your default connection for database operations. This is
+    | the connection which will be utilized unless another connection
+    | is explicitly specified when you execute a query / statement.
+    |
+    */
+
+    'default' => env('DB_CONNECTION', 'sqlite'),
+
+    /*
+    |--------------------------------------------------------------------------
+    | Database Connections
+    |--------------------------------------------------------------------------
+    |
+    | Below are all of the database connections defined for your application.
+    | An example configuration is provided for each database system which
+    | is supported by Laravel. You're free to add / remove connections.
+    |
+    */
+
+    'connections' => [
+
+        'sqlite' => [
+            'driver' => 'sqlite',
+            'url' => env('DB_URL'),
+            'database' => env('DB_DATABASE', database_path('database.sqlite')),
+            'prefix' => '',
+            'foreign_key_constraints' => env('DB_FOREIGN_KEYS', true),
+        ],
+
+        'mysql' => [
+            'driver' => 'mysql',
+            'url' => env('DB_URL'),
+            'host' => env('DB_HOST', '127.0.0.1'),
+            'port' => env('DB_PORT', '3306'),
+            'database' => env('DB_DATABASE', 'laravel'),
+            'username' => env('DB_USERNAME', 'root'),
+            'password' => env('DB_PASSWORD', ''),
+            'unix_socket' => env('DB_SOCKET', ''),
+            'charset' => env('DB_CHARSET', 'utf8mb4'),
+            'collation' => env('DB_COLLATION', 'utf8mb4_unicode_ci'),
+            'prefix' => '',
+            'prefix_indexes' => true,
+            'strict' => true,
+            'engine' => null,
+            'options' => extension_loaded('pdo_mysql') ? array_filter([
+                PDO::MYSQL_ATTR_SSL_CA => env('MYSQL_ATTR_SSL_CA'),
+            ]) : [],
+        ],
+
+        'mariadb' => [
+            'driver' => 'mariadb',
+            'url' => env('DB_URL'),
+            'host' => env('DB_HOST', '127.0.0.1'),
+            'port' => env('DB_PORT', '3306'),
+            'database' => env('DB_DATABASE', 'laravel'),
+            'username' => env('DB_USERNAME', 'root'),
+            'password' => env('DB_PASSWORD', ''),
+            'unix_socket' => env('DB_SOCKET', ''),
+            'charset' => env('DB_CHARSET', 'utf8mb4'),
+            'collation' => env('DB_COLLATION', 'utf8mb4_unicode_ci'),
+            'prefix' => '',
+            'prefix_indexes' => true,
+            'strict' => true,
+            'engine' => null,
+            'options' => extension_loaded('pdo_mysql') ? array_filter([
+                PDO::MYSQL_ATTR_SSL_CA => env('MYSQL_ATTR_SSL_CA'),
+            ]) : [],
+        ],
+
+        'pgsql' => [
+            'driver' => 'pgsql',
+            'url' => env('DB_URL'),
+            'host' => env('DB_HOST', '127.0.0.1'),
+            'port' => env('DB_PORT', '5432'),
+            'database' => env('DB_DATABASE', 'laravel'),
+            'username' => env('DB_USERNAME', 'root'),
+            'password' => env('DB_PASSWORD', ''),
+            'charset' => env('DB_CHARSET', 'utf8'),
+            'prefix' => '',
+            'prefix_indexes' => true,
+            'search_path' => 'public',
+            'sslmode' => 'prefer',
+        ],
+
+        'sqlsrv' => [
+            'driver' => 'sqlsrv',
+            'url' => env('DB_URL'),
+            'host' => env('DB_HOST', 'localhost'),
+            'port' => env('DB_PORT', '1433'),
+            'database' => env('DB_DATABASE', 'laravel'),
+            'username' => env('DB_USERNAME', 'root'),
+            'password' => env('DB_PASSWORD', ''),
+            'charset' => env('DB_CHARSET', 'utf8'),
+            'prefix' => '',
+            'prefix_indexes' => true,
+            // 'encrypt' => env('DB_ENCRYPT', 'yes'),
+            // 'trust_server_certificate' => env('DB_TRUST_SERVER_CERTIFICATE', 'false'),
+        ],
+
+    ],
+
+    /*
+    |--------------------------------------------------------------------------
+    | Migration Repository Table
+    |--------------------------------------------------------------------------
+    |
+    | This table keeps track of all the migrations that have already run for
+    | your application. Using this information, we can determine which of
+    | the migrations on disk haven't actually been run on the database.
+    |
+    */
+
+    'migrations' => [
+        'table' => 'migrations',
+        'update_date_on_publish' => true,
+    ],
+
+    /*
+    |--------------------------------------------------------------------------
+    | Redis Databases
+    |--------------------------------------------------------------------------
+    |
+    | Redis is an open source, fast, and advanced key-value store that also
+    | provides a richer body of commands than a typical key-value system
+    | such as Memcached. You may define your connection settings here.
+    |
+    */
+
+    'redis' => [
+
+        'client' => env('REDIS_CLIENT', 'phpredis'),
+
+        'options' => [
+            'cluster' => env('REDIS_CLUSTER', 'redis'),
+            'prefix' => env('REDIS_PREFIX', Str::slug(env('APP_NAME', 'laravel'), '_').'_database_'),
+        ],
+
+        'default' => [
+            'url' => env('REDIS_URL'),
+            'host' => env('REDIS_HOST', '127.0.0.1'),
+            'username' => env('REDIS_USERNAME'),
+            'password' => env('REDIS_PASSWORD'),
+            'port' => env('REDIS_PORT', '6379'),
+            'database' => env('REDIS_DB', '0'),
+        ],
+
+        'cache' => [
+            'url' => env('REDIS_URL'),
+            'host' => env('REDIS_HOST', '127.0.0.1'),
+            'username' => env('REDIS_USERNAME'),
+            'password' => env('REDIS_PASSWORD'),
+            'port' => env('REDIS_PORT', '6379'),
+            'database' => env('REDIS_CACHE_DB', '1'),
+        ],
+
+    ],
+
+];
+
+
+
+===== File: config/filesystems.php =====
+<?php
+
+return [
+
+    /*
+    |--------------------------------------------------------------------------
+    | Default Filesystem Disk
+    |--------------------------------------------------------------------------
+    |
+    | Here you may specify the default filesystem disk that should be used
+    | by the framework. The "local" disk, as well as a variety of cloud
+    | based disks are available to your application for file storage.
+    |
+    */
+
+    'default' => env('FILESYSTEM_DISK', 'local'),
+
+    /*
+    |--------------------------------------------------------------------------
+    | Filesystem Disks
+    |--------------------------------------------------------------------------
+    |
+    | Below you may configure as many filesystem disks as necessary, and you
+    | may even configure multiple disks for the same driver. Examples for
+    | most supported storage drivers are configured here for reference.
+    |
+    | Supported drivers: "local", "ftp", "sftp", "s3"
+    |
+    */
+
+    'disks' => [
+
+        'local' => [
+            'driver' => 'local',
+            'root' => storage_path('app'),
+            'throw' => false,
+        ],
+
+        'public' => [
+            'driver' => 'local',
+            'root' => storage_path('app/public'),
+            'url' => env('APP_URL').'/storage',
+            'visibility' => 'public',
+            'throw' => false,
+        ],
+
+        's3' => [
+            'driver' => 's3',
+            'key' => env('AWS_ACCESS_KEY_ID'),
+            'secret' => env('AWS_SECRET_ACCESS_KEY'),
+            'region' => env('AWS_DEFAULT_REGION'),
+            'bucket' => env('AWS_BUCKET'),
+            'url' => env('AWS_URL'),
+            'endpoint' => env('AWS_ENDPOINT'),
+            'use_path_style_endpoint' => env('AWS_USE_PATH_STYLE_ENDPOINT', false),
+            'throw' => false,
+        ],
+
+    ],
+
+    /*
+    |--------------------------------------------------------------------------
+    | Symbolic Links
+    |--------------------------------------------------------------------------
+    |
+    | Here you may configure the symbolic links that will be created when the
+    | `storage:link` Artisan command is executed. The array keys should be
+    | the locations of the links and the values should be their targets.
+    |
+    */
+
+    'links' => [
+        public_path('storage') => storage_path('app/public'),
+    ],
+
+];
+
+
+
+===== File: config/passport.php =====
+<?php
+
+return [
+    'personal_access_client' => [
+        'id' => env('PASSPORT_PERSONAL_ACCESS_CLIENT_ID'),
+        'secret' => env('PASSPORT_PERSONAL_ACCESS_CLIENT_SECRET'),
+    ],
+];
+
+
+
+===== File: config/app.php =====
+<?php
+
+return [
+
+    /*
+    |--------------------------------------------------------------------------
+    | Application Name
+    |--------------------------------------------------------------------------
+    |
+    | This value is the name of your application, which will be used when the
+    | framework needs to place the application's name in a notification or
+    | other UI elements where an application name needs to be displayed.
+    |
+    */
+
+    'name' => env('APP_NAME', 'Laravel'),
+
+    /*
+    |--------------------------------------------------------------------------
+    | Application Environment
+    |--------------------------------------------------------------------------
+    |
+    | This value determines the "environment" your application is currently
+    | running in. This may determine how you prefer to configure various
+    | services the application utilizes. Set this in your ".env" file.
+    |
+    */
+
+    'env' => env('APP_ENV', 'production'),
+
+    /*
+    |--------------------------------------------------------------------------
+    | Application Debug Mode
+    |--------------------------------------------------------------------------
+    |
+    | When your application is in debug mode, detailed error messages with
+    | stack traces will be shown on every error that occurs within your
+    | application. If disabled, a simple generic error page is shown.
+    |
+    */
+
+    'debug' => (bool) env('APP_DEBUG', false),
+
+    /*
+    |--------------------------------------------------------------------------
+    | Application URL
+    |--------------------------------------------------------------------------
+    |
+    | This URL is used by the console to properly generate URLs when using
+    | the Artisan command line tool. You should set this to the root of
+    | the application so that it's available within Artisan commands.
+    |
+    */
+
+    'url' => env('APP_URL', 'http://localhost'),
+
+    /*
+    |--------------------------------------------------------------------------
+    | Application Timezone
+    |--------------------------------------------------------------------------
+    |
+    | Here you may specify the default timezone for your application, which
+    | will be used by the PHP date and date-time functions. The timezone
+    | is set to "UTC" by default as it is suitable for most use cases.
+    |
+    */
+
+    'timezone' => env('APP_TIMEZONE', 'UTC'),
+
+    /*
+    |--------------------------------------------------------------------------
+    | Application Locale Configuration
+    |--------------------------------------------------------------------------
+    |
+    | The application locale determines the default locale that will be used
+    | by Laravel's translation / localization methods. This option can be
+    | set to any locale for which you plan to have translation strings.
+    |
+    */
+
+    'locale' => env('APP_LOCALE', 'en'),
+
+    'fallback_locale' => env('APP_FALLBACK_LOCALE', 'en'),
+
+    'faker_locale' => env('APP_FAKER_LOCALE', 'en_US'),
+
+    /*
+    |--------------------------------------------------------------------------
+    | Encryption Key
+    |--------------------------------------------------------------------------
+    |
+    | This key is utilized by Laravel's encryption services and should be set
+    | to a random, 32 character string to ensure that all encrypted values
+    | are secure. You should do this prior to deploying the application.
+    |
+    */
+
+    'cipher' => 'AES-256-CBC',
+
+    'key' => env('APP_KEY'),
+
+    'previous_keys' => [
+        ...array_filter(
+            explode(',', env('APP_PREVIOUS_KEYS', ''))
+        ),
+    ],
+
+    /*
+    |--------------------------------------------------------------------------
+    | Maintenance Mode Driver
+    |--------------------------------------------------------------------------
+    |
+    | These configuration options determine the driver used to determine and
+    | manage Laravel's "maintenance mode" status. The "cache" driver will
+    | allow maintenance mode to be controlled across multiple machines.
+    |
+    | Supported drivers: "file", "cache"
+    |
+    */
+
+    'maintenance' => [
+        'driver' => env('APP_MAINTENANCE_DRIVER', 'file'),
+        'store' => env('APP_MAINTENANCE_STORE', 'database'),
+    ],
+
+];
+
+
+
+===== File: config/sanctum.php =====
+<?php
+
+use Laravel\Sanctum\Sanctum;
+
+return [
+
+    /*
+    |--------------------------------------------------------------------------
+    | Stateful Domains
+    |--------------------------------------------------------------------------
+    |
+    | Requests from the following domains / hosts will receive stateful API
+    | authentication cookies. Typically, these should include your local
+    | and production domains which access your API via a frontend SPA.
+    |
+    */
+
+    'stateful' => explode(',', env('SANCTUM_STATEFUL_DOMAINS', sprintf(
+        '%s%s',
+        'localhost,localhost:3000,127.0.0.1,127.0.0.1:8000,::1,https://stephandouglasduval.com/',
+        Sanctum::currentApplicationUrlWithPort()
+    ))),
+
+    /*
+    |--------------------------------------------------------------------------
+    | Sanctum Guards
+    |--------------------------------------------------------------------------
+    |
+    | This array contains the authentication guards that will be checked when
+    | Sanctum is trying to authenticate a request. If none of these guards
+    | are able to authenticate the request, Sanctum will use the bearer
+    | token that's present on an incoming request for authentication.
+    |
+    */
+
+    'guard' => ['web'],
+
+    /*
+    |--------------------------------------------------------------------------
+    | Expiration Minutes
+    |--------------------------------------------------------------------------
+    |
+    | This value controls the number of minutes until an issued token will be
+    | considered expired. This will override any values set in the token's
+    | "expires_at" attribute, but first-party sessions are not affected.
+    |
+    */
+
+    'expiration' => null,
+
+    /*
+    |--------------------------------------------------------------------------
+    | Token Prefix
+    |--------------------------------------------------------------------------
+    |
+    | Sanctum can prefix new tokens in order to take advantage of numerous
+    | security scanning initiatives maintained by open source platforms
+    | that notify developers if they commit tokens into repositories.
+    |
+    | See: https://docs.github.com/en/code-security/secret-scanning/about-secret-scanning
+    |
+    */
+
+    'token_prefix' => env('SANCTUM_TOKEN_PREFIX', ''),
+
+    /*
+    |--------------------------------------------------------------------------
+    | Sanctum Middleware
+    |--------------------------------------------------------------------------
+    |
+    | When authenticating your first-party SPA with Sanctum you may need to
+    | customize some of the middleware Sanctum uses while processing the
+    | request. You may change the middleware listed below as required.
+    |
+    */
+
+    'middleware' => [
+        'authenticate_session' => Laravel\Sanctum\Http\Middleware\AuthenticateSession::class,
+        'encrypt_cookies' => Illuminate\Cookie\Middleware\EncryptCookies::class,
+        'validate_csrf_token' => Illuminate\Foundation\Http\Middleware\ValidateCsrfToken::class,
+    ],
+
+];
+
+
+
+===== File: config/logging.php =====
+<?php
+
+use Monolog\Handler\NullHandler;
+use Monolog\Handler\StreamHandler;
+use Monolog\Handler\SyslogUdpHandler;
+use Monolog\Processor\PsrLogMessageProcessor;
+
+return [
+
+    /*
+    |--------------------------------------------------------------------------
+    | Default Log Channel
+    |--------------------------------------------------------------------------
+    |
+    | This option defines the default log channel that is utilized to write
+    | messages to your logs. The value provided here should match one of
+    | the channels present in the list of "channels" configured below.
+    |
+    */
+
+    'default' => env('LOG_CHANNEL', 'stack'),
+
+    /*
+    |--------------------------------------------------------------------------
+    | Deprecations Log Channel
+    |--------------------------------------------------------------------------
+    |
+    | This option controls the log channel that should be used to log warnings
+    | regarding deprecated PHP and library features. This allows you to get
+    | your application ready for upcoming major versions of dependencies.
+    |
+    */
+
+    'deprecations' => [
+        'channel' => env('LOG_DEPRECATIONS_CHANNEL', 'null'),
+        'trace' => env('LOG_DEPRECATIONS_TRACE', false),
+    ],
+
+    /*
+    |--------------------------------------------------------------------------
+    | Log Channels
+    |--------------------------------------------------------------------------
+    |
+    | Here you may configure the log channels for your application. Laravel
+    | utilizes the Monolog PHP logging library, which includes a variety
+    | of powerful log handlers and formatters that you're free to use.
+    |
+    | Available drivers: "single", "daily", "slack", "syslog",
+    |                    "errorlog", "monolog", "custom", "stack"
+    |
+    */
+
+    'channels' => [
+
+        'stack' => [
+            'driver' => 'stack',
+            'channels' => explode(',', env('LOG_STACK', 'single')),
+            'ignore_exceptions' => false,
+        ],
+
+        'single' => [
+            'driver' => 'single',
+            'path' => storage_path('logs/laravel.log'),
+            'level' => env('LOG_LEVEL', 'debug'),
+            'replace_placeholders' => true,
+        ],
+
+        'daily' => [
+            'driver' => 'daily',
+            'path' => storage_path('logs/laravel.log'),
+            'level' => env('LOG_LEVEL', 'debug'),
+            'days' => env('LOG_DAILY_DAYS', 14),
+            'replace_placeholders' => true,
+        ],
+
+        'slack' => [
+            'driver' => 'slack',
+            'url' => env('LOG_SLACK_WEBHOOK_URL'),
+            'username' => env('LOG_SLACK_USERNAME', 'Laravel Log'),
+            'emoji' => env('LOG_SLACK_EMOJI', ':boom:'),
+            'level' => env('LOG_LEVEL', 'critical'),
+            'replace_placeholders' => true,
+        ],
+
+        'papertrail' => [
+            'driver' => 'monolog',
+            'level' => env('LOG_LEVEL', 'debug'),
+            'handler' => env('LOG_PAPERTRAIL_HANDLER', SyslogUdpHandler::class),
+            'handler_with' => [
+                'host' => env('PAPERTRAIL_URL'),
+                'port' => env('PAPERTRAIL_PORT'),
+                'connectionString' => 'tls://'.env('PAPERTRAIL_URL').':'.env('PAPERTRAIL_PORT'),
+            ],
+            'processors' => [PsrLogMessageProcessor::class],
+        ],
+
+        'stderr' => [
+            'driver' => 'monolog',
+            'level' => env('LOG_LEVEL', 'debug'),
+            'handler' => StreamHandler::class,
+            'formatter' => env('LOG_STDERR_FORMATTER'),
+            'with' => [
+                'stream' => 'php://stderr',
+            ],
+            'processors' => [PsrLogMessageProcessor::class],
+        ],
+
+        'syslog' => [
+            'driver' => 'syslog',
+            'level' => env('LOG_LEVEL', 'debug'),
+            'facility' => env('LOG_SYSLOG_FACILITY', LOG_USER),
+            'replace_placeholders' => true,
+        ],
+
+        'errorlog' => [
+            'driver' => 'errorlog',
+            'level' => env('LOG_LEVEL', 'debug'),
+            'replace_placeholders' => true,
+        ],
+
+        'null' => [
+            'driver' => 'monolog',
+            'handler' => NullHandler::class,
+        ],
+
+        'emergency' => [
+            'path' => storage_path('logs/laravel.log'),
+        ],
+
+    ],
+
+];
+
+
+
+===== File: config/cache.php =====
+<?php
+
+use Illuminate\Support\Str;
+
+return [
+
+    /*
+    |--------------------------------------------------------------------------
+    | Default Cache Store
+    |--------------------------------------------------------------------------
+    |
+    | This option controls the default cache store that will be used by the
+    | framework. This connection is utilized if another isn't explicitly
+    | specified when running a cache operation inside the application.
+    |
+    */
+
+    'default' => env('CACHE_STORE', 'database'),
+
+    /*
+    |--------------------------------------------------------------------------
+    | Cache Stores
+    |--------------------------------------------------------------------------
+    |
+    | Here you may define all of the cache "stores" for your application as
+    | well as their drivers. You may even define multiple stores for the
+    | same cache driver to group types of items stored in your caches.
+    |
+    | Supported drivers: "array", "database", "file", "memcached",
+    |                    "redis", "dynamodb", "octane", "null"
+    |
+    */
+
+    'stores' => [
+
+        'array' => [
+            'driver' => 'array',
+            'serialize' => false,
+        ],
+
+        'database' => [
+            'driver' => 'database',
+            'table' => env('DB_CACHE_TABLE', 'cache'),
+            'connection' => env('DB_CACHE_CONNECTION'),
+            'lock_connection' => env('DB_CACHE_LOCK_CONNECTION'),
+        ],
+
+        'file' => [
+            'driver' => 'file',
+            'path' => storage_path('framework/cache/data'),
+            'lock_path' => storage_path('framework/cache/data'),
+        ],
+
+        'memcached' => [
+            'driver' => 'memcached',
+            'persistent_id' => env('MEMCACHED_PERSISTENT_ID'),
+            'sasl' => [
+                env('MEMCACHED_USERNAME'),
+                env('MEMCACHED_PASSWORD'),
+            ],
+            'options' => [
+                // Memcached::OPT_CONNECT_TIMEOUT => 2000,
+            ],
+            'servers' => [
+                [
+                    'host' => env('MEMCACHED_HOST', '127.0.0.1'),
+                    'port' => env('MEMCACHED_PORT', 11211),
+                    'weight' => 100,
+                ],
+            ],
+        ],
+
+        'redis' => [
+            'driver' => 'redis',
+            'connection' => env('REDIS_CACHE_CONNECTION', 'cache'),
+            'lock_connection' => env('REDIS_CACHE_LOCK_CONNECTION', 'default'),
+        ],
+
+        'dynamodb' => [
+            'driver' => 'dynamodb',
+            'key' => env('AWS_ACCESS_KEY_ID'),
+            'secret' => env('AWS_SECRET_ACCESS_KEY'),
+            'region' => env('AWS_DEFAULT_REGION', 'us-east-1'),
+            'table' => env('DYNAMODB_CACHE_TABLE', 'cache'),
+            'endpoint' => env('DYNAMODB_ENDPOINT'),
+        ],
+
+        'octane' => [
+            'driver' => 'octane',
+        ],
+
+    ],
+
+    /*
+    |--------------------------------------------------------------------------
+    | Cache Key Prefix
+    |--------------------------------------------------------------------------
+    |
+    | When utilizing the APC, database, memcached, Redis, and DynamoDB cache
+    | stores, there might be other applications using the same cache. For
+    | that reason, you may prefix every cache key to avoid collisions.
+    |
+    */
+
+    'prefix' => env('CACHE_PREFIX', Str::slug(env('APP_NAME', 'laravel'), '_').'_cache_'),
+
+];
+
+
+
+===== File: config/app.production.php =====
+<?php
+
+return [
+
+    /*
+    |--------------------------------------------------------------------------
+    | Application Name
+    |--------------------------------------------------------------------------
+    |
+    | This value is the name of your application, which will be used when the
+    | framework needs to place the application's name in a notification or
+    | other UI elements where an application name needs to be displayed.
+    |
+    */
+
+    'name' => env('APP_NAME', 'FreynetGagnePortal'),
+
+    /*
+    |--------------------------------------------------------------------------
+    | Application Environment
+    |--------------------------------------------------------------------------
+    |
+    | This value determines the "environment" your application is currently
+    | running in. This may determine how you prefer to configure various
+    | services the application utilizes. Set this in your ".env" file.
+    |
+    */
+
+    'env' => env('APP_ENV', 'production'),
+
+    /*
+    |--------------------------------------------------------------------------
+    | Application Debug Mode
+    |--------------------------------------------------------------------------
+    |
+    | When your application is in debug mode, detailed error messages with
+    | stack traces will be shown on every error that occurs within your
+    | application. If disabled, a simple generic error page is shown.
+    |
+    */
+
+    'debug' => (bool) env('APP_DEBUG', false),
+
+    /*
+    |--------------------------------------------------------------------------
+    | Application URL
+    |--------------------------------------------------------------------------
+    |
+    | This URL is used by the console to properly generate URLs when using
+    | the Artisan command line tool. You should set this to the root of
+    | the application so that it's available within Artisan commands.
+    |
+    */
+
+    'url' => env('APP_URL', 'http://localhost'),
+
+    /*
+    |--------------------------------------------------------------------------
+    | Application Timezone
+    |--------------------------------------------------------------------------
+    |
+    | Here you may specify the default timezone for your application, which
+    | will be used by the PHP date and date-time functions. The timezone
+    | is set to "UTC" by default as it is suitable for most use cases.
+    |
+    */
+
+    'timezone' => env('APP_TIMEZONE', 'UTC'),
+
+    /*
+    |--------------------------------------------------------------------------
+    | Application Locale Configuration
+    |--------------------------------------------------------------------------
+    |
+    | The application locale determines the default locale that will be used
+    | by Laravel's translation / localization methods. This option can be
+    | set to any locale for which you plan to have translation strings.
+    |
+    */
+
+    'locale' => env('APP_LOCALE', 'en'),
+
+    'fallback_locale' => env('APP_FALLBACK_LOCALE', 'en'),
+
+    'faker_locale' => env('APP_FAKER_LOCALE', 'en_US'),
+
+    /*
+    |--------------------------------------------------------------------------
+    | Encryption Key
+    |--------------------------------------------------------------------------
+    |
+    | This key is utilized by Laravel's encryption services and should be set
+    | to a random, 32 character string to ensure that all encrypted values
+    | are secure. You should do this prior to deploying the application.
+    |
+    */
+
+    'cipher' => 'AES-256-CBC',
+
+    'key' => env('APP_KEY'),
+
+    'previous_keys' => [
+        ...array_filter(
+            explode(',', env('APP_PREVIOUS_KEYS', ''))
+        ),
+    ],
+
+    /*
+    |--------------------------------------------------------------------------
+    | Maintenance Mode Driver
+    |--------------------------------------------------------------------------
+    |
+    | These configuration options determine the driver used to determine and
+    | manage Laravel's "maintenance mode" status. The "cache" driver will
+    | allow maintenance mode to be controlled across multiple machines.
+    |
+    | Supported drivers: "file", "cache"
+    |
+    */
+
+    'maintenance' => [
+        'driver' => env('APP_MAINTENANCE_DRIVER', 'file'),
+        'store' => env('APP_MAINTENANCE_STORE', 'database'),
+    ],
+
+];
+
+
+
+===== File: config/queue.php =====
+<?php
+
+return [
+
+    /*
+    |--------------------------------------------------------------------------
+    | Default Queue Connection Name
+    |--------------------------------------------------------------------------
+    |
+    | Laravel's queue supports a variety of backends via a single, unified
+    | API, giving you convenient access to each backend using identical
+    | syntax for each. The default queue connection is defined below.
+    |
+    */
+
+    'default' => env('QUEUE_CONNECTION', 'database'),
+
+    /*
+    |--------------------------------------------------------------------------
+    | Queue Connections
+    |--------------------------------------------------------------------------
+    |
+    | Here you may configure the connection options for every queue backend
+    | used by your application. An example configuration is provided for
+    | each backend supported by Laravel. You're also free to add more.
+    |
+    | Drivers: "sync", "database", "beanstalkd", "sqs", "redis", "null"
+    |
+    */
+
+    'connections' => [
+
+        'sync' => [
+            'driver' => 'sync',
+        ],
+
+        'database' => [
+            'driver' => 'database',
+            'connection' => env('DB_QUEUE_CONNECTION'),
+            'table' => env('DB_QUEUE_TABLE', 'jobs'),
+            'queue' => env('DB_QUEUE', 'default'),
+            'retry_after' => (int) env('DB_QUEUE_RETRY_AFTER', 90),
+            'after_commit' => false,
+        ],
+
+        'beanstalkd' => [
+            'driver' => 'beanstalkd',
+            'host' => env('BEANSTALKD_QUEUE_HOST', 'localhost'),
+            'queue' => env('BEANSTALKD_QUEUE', 'default'),
+            'retry_after' => (int) env('BEANSTALKD_QUEUE_RETRY_AFTER', 90),
+            'block_for' => 0,
+            'after_commit' => false,
+        ],
+
+        'sqs' => [
+            'driver' => 'sqs',
+            'key' => env('AWS_ACCESS_KEY_ID'),
+            'secret' => env('AWS_SECRET_ACCESS_KEY'),
+            'prefix' => env('SQS_PREFIX', 'https://sqs.us-east-1.amazonaws.com/your-account-id'),
+            'queue' => env('SQS_QUEUE', 'default'),
+            'suffix' => env('SQS_SUFFIX'),
+            'region' => env('AWS_DEFAULT_REGION', 'us-east-1'),
+            'after_commit' => false,
+        ],
+
+        'redis' => [
+            'driver' => 'redis',
+            'connection' => env('REDIS_QUEUE_CONNECTION', 'default'),
+            'queue' => env('REDIS_QUEUE', 'default'),
+            'retry_after' => (int) env('REDIS_QUEUE_RETRY_AFTER', 90),
+            'block_for' => null,
+            'after_commit' => false,
+        ],
+
+    ],
+
+    /*
+    |--------------------------------------------------------------------------
+    | Job Batching
+    |--------------------------------------------------------------------------
+    |
+    | The following options configure the database and table that store job
+    | batching information. These options can be updated to any database
+    | connection and table which has been defined by your application.
+    |
+    */
+
+    'batching' => [
+        'database' => env('DB_CONNECTION', 'sqlite'),
+        'table' => 'job_batches',
+    ],
+
+    /*
+    |--------------------------------------------------------------------------
+    | Failed Queue Jobs
+    |--------------------------------------------------------------------------
+    |
+    | These options configure the behavior of failed queue job logging so you
+    | can control how and where failed jobs are stored. Laravel ships with
+    | support for storing failed jobs in a simple file or in a database.
+    |
+    | Supported drivers: "database-uuids", "dynamodb", "file", "null"
+    |
+    */
+
+    'failed' => [
+        'driver' => env('QUEUE_FAILED_DRIVER', 'database-uuids'),
+        'database' => env('DB_CONNECTION', 'sqlite'),
+        'table' => 'failed_jobs',
+    ],
+
+];
+
+
+
+===== File: database/.gitignore =====
+*.sqlite*
+
+
+
+===== File: database/seeders/DatabaseSeeder.php =====
+<?php
+
+namespace Database\Seeders;
+
+use Illuminate\Database\Seeder;
+
+class DatabaseSeeder extends Seeder
+{
+    public function run()
+    {
+        $this->call([
+            RolePermissionActionSubjectSeeder::class,
+            CompanySeeder::class,
+            UserSeeder::class,
+            // ... other seeders
+        ]);
+    }
+}
+
+
+
+===== File: database/seeders/UserSeeder.php =====
+<?php
+
+namespace Database\Seeders;
+
+use Illuminate\Database\Seeder;
+use App\Models\User;
+use App\Models\Company;
+use Illuminate\Support\Facades\Hash;
+use Illuminate\Support\Facades\DB;
+
+class UserSeeder extends Seeder
+{
+    /**
+     * Run the database seeds.
+     *
+     * @return void
+     */
+    public function run()
+    {
+        $users = [
+            [
+                'name' => 'Sophie',
+                'email' => 'sophie@freynet-gagne.com',
+                'password' => Hash::make('password123'), // Use a secure password
+            ],
+            [
+                'name' => 'Jean-Paul',
+                'email' => 'Jean-paul@freynet-gagne.com',
+                'password' => Hash::make('password123'), // Use a secure password
+            ],
+            [
+                'name' => 'Maya',
+                'email' => 'maya@freynet-gagne.com',
+                'password' => Hash::make('password123'), // Use a secure password
+            ],
+            [
+                'name' => 'admin',
+                'email' => 'admin@admin.com',
+                'password' => Hash::make('password123'), // Use a secure password
+            ],
+            [
+                'name' => 'auth',
+                'email' => 'auth@auth.com',
+                'password' => Hash::make('password123'), // Use a secure password
+            ],
+            [
+                'name' => 'manager',
+                'email' => 'manager@manager.com',
+                'password' => Hash::make('password123'), // Use a secure password
+            ],
+            [
+                'name' => 'client',
+                'email' => 'client@client.com',
+                'password' => Hash::make('password123'), // Use a secure password
+            ],
+            [
+                'name' => 'user',
+                'email' => 'user@user.com',
+                'password' => Hash::make('password123'), // Use a secure password
+            ],
+        ];
+
+        // Find or create the "Freynet-Gagné" company
+        $freynetGagne = Company::firstOrCreate(['company_name' => 'Freynet-Gagné']);
+
+        // Define roles for specific users
+        $userRoles = [
+            'admin@admin.com' => 1,   // Admin role
+            'auth@auth.com' => 2,    // Auth role
+            'manager@manager.com' => 3, // Manager role
+            'client@client.com' => 4,  // Client role
+            'user@user.com' => 5,    // User role
+        ];
+
+        foreach ($users as $userData) {
+            $user = User::firstOrCreate(['email' => $userData['email']], $userData);
+
+            // Assign specific roles if email matches, else assign manager role (role_id = 3)
+            $roleId = $userRoles[$userData['email']] ?? 3;
+
+            DB::table('user_roles')->updateOrInsert(
+                ['user_id' => $user->id, 'role_id' => $roleId],
+                ['created_at' => now(), 'updated_at' => now()]
+            );
+
+            // Assign the user to the "Freynet-Gagné" company
+            DB::table('user_company')->updateOrInsert(
+                ['user_id' => $user->id, 'company_id' => $freynetGagne->id],
+                ['created_at' => now(), 'updated_at' => now()]
+            );
+        }
+    }
+}
+
+
+
+===== File: database/seeders/RolePermissionActionSubjectSeeder.php =====
+<?php
+
+namespace Database\Seeders;
+
+use Illuminate\Database\Seeder;
+use App\Models\Role;
+use App\Models\Permission;
+use Illuminate\Support\Facades\DB;
+
+class RolePermissionActionSubjectSeeder extends Seeder
+{
+    public function run()
+    {
+        // Disable foreign key checks
+        DB::statement('SET FOREIGN_KEY_CHECKS=0;');
+
+        // Clear existing data
+        DB::table('role_permissions')->truncate();
+        DB::table('permissions')->truncate();
+        DB::table('roles')->truncate();
+
+        // Enable foreign key checks again
+        DB::statement('SET FOREIGN_KEY_CHECKS=1;');
+
+        // Define subjects and actions
+        $subjects = ['admin', 'auth', 'manager', 'client', 'user', 'all'];
+        $actions = ['create', 'read', 'update', 'delete', 'manage'];
+
+        // Create permissions
+        foreach ($subjects as $subject) {
+            foreach ($actions as $action) {
+                DB::table('permissions')->updateOrInsert(
+                    [
+                        'action' => $action,
+                        'subject' => $subject,
+                    ],
+                    [
+                        'created_at' => now(),
+                        'updated_at' => now(),
+                    ]
+                );
+            }
+        }
+
+        // Create roles
+        $roles = ['admin', 'auth', 'manager', 'client', 'user'];
+        foreach ($roles as $roleName) {
+            Role::firstOrCreate(
+                ['name' => ucfirst($roleName)]
+            );
+        }
+
+        // Define role hierarchy and permissions
+        $roleHierarchy = [
+            'auth' => ['admin', 'manager', 'user', 'client', 'auth', 'all'],
+            'admin' => ['admin', 'manager', 'user', 'client', 'all'], // Admin gets everything
+            'manager' => ['manager', 'user', 'client'],  // Manager gets their permissions plus user and client
+            'client' => ['client'],  // Client only gets client permissions
+            'user' => ['user'],  // User only gets user permissions
+            
+        ];
+
+        // Assign permissions based on hierarchy
+        $roles = Role::all();
+        foreach ($roles as $role) {
+            $roleName = strtolower($role->name);
+            if (isset($roleHierarchy[$roleName])) {
+                $allowedSubjects = $roleHierarchy[$roleName];
+                
+                // Get all permissions for allowed subjects
+                $permissions = Permission::whereIn('subject', $allowedSubjects)->get();
+
+                foreach ($permissions as $permission) {
+                    DB::table('role_permissions')->updateOrInsert(
+                        [
+                            'role_id' => $role->id,
+                            'permission_id' => $permission->id,
+                        ],
+                        [
+                            'created_at' => now(),
+                            'updated_at' => now(),
+                        ]
+                    );
+                }
+            }
+        }
+    }
+}
+
+
+
+===== File: database/seeders/CompanySeeder.php =====
+<?php
+
+namespace Database\Seeders;
+
+use Illuminate\Database\Seeder;
+use App\Models\Company;
+
+class CompanySeeder extends Seeder
+{
+    /**
+     * Run the database seeds.
+     *
+     * @return void
+     */
+    public function run()
+    {
+        $companies = [
+            'Freynet-Gagné',
+            'Brenden Achtemiuk',
+            'CDEM',
+            'Centre de santé',
+            'Editing Services',
+            'FAJEF',
+            'FLMM',
+            'Kigaana Productions',
+            'LMIC',
+            'Magnify Digital',
+            'Manito LFC 2 INC.',
+            'Manitoba Metis Federation',
+            'Manitoba Teachers\' Society',
+            'MANSO',
+            'NANB',
+            'National Gallery of Canada',
+            'Peaceful Ronin Media',
+            'Print Studio One PO 27085',
+            'Réseau Compassion Network',
+            'Roberto Bocangel',
+            'RTAM',
+            'RWB',
+            'Santé en français',
+            'Tiber River',
+            'Travel Manitoba',
+            'Université de Saint-Boniface',
+            'University of Manitoba',
+            'Ville de Winnipeg',
+            'MWEC',
+            'WEM',
+            'WEOC',
+            'Winnipeg Arts Council',
+            'Centre de Renouveau Aulneau',
+            'CFEE',
+            'Deposit Guarantee Corporation of Manitoba',
+            'FortWhyte Alive',
+            'ISED',
+            'Jessica Meza Resillas',
+            'Johnston Group',
+            'Manitoba Housing',
+            'Manitoba School Boards',
+            'Matrix Group Publishing',
+            'NNAS',
+            'Patrick Lessard',
+            'Peak of the Market',
+            'Probe Research',
+            'SFM',
+            'Taro PR',
+            'Wookey Films',
+            'Alamos Gold Inc.',
+            'Canadian Home Economics Fondation',
+            'Conseil des arts',
+            'Enjoy Creative',
+            'Event Camp',
+            'Livres Canada Books',
+            'Lorraine Prefontaine (varia)',
+            'MB School Boards',
+            'TR PO 465390',
+            'Wawanesa',
+            'WSP',
+            'Apprentissage Illimité',
+            'Association de la Neurofibromatose du Québec',
+            'Conseil des arts du Canada',
+            'Creative Manitoba',
+            'Fondation',
+            'LRSD Indigenous Education Team',
+            'Luiz Nunes',
+            'Matrix Group Publish',
+            'Alberta Education',
+            'Assiniboine Park Conservancy',
+            'Brodi Restaurants Ltd.',
+            'Chronic Centre for Veterans',
+            'FMRI',
+            'Heatmaster',
+            'Hôpital Général Saint-Boniface',
+            'MBLL',
+            'Pollard',
+            'Richardson International',
+            'Stantec',
+            'Stories for Caregivers',
+            'The Cover Guy',
+            'University of Manitoba PO 468744',
+            'Urban Shaman Contemporary Aboriginal Art',
+            'Wearecinco',
+            'Wilmar Ariza',
+            'Winnipeg School Division',
+            'Bureau du conseil Privé',
+            'Canada Council for the Arts',
+            'Manitoba School Boards Association',
+            'Musée canadien Pour les Droits de la Personne',
+            'Savoir Montfort',
+            'SodaStream',
+            'St.Amant',
+            'UpHouse',
+            'Alliance catholique canadienne de la santé',
+            'Baltic Brothers',
+            'Bounce Design',
+            'Centre national d\'excellence sur la douleur chronique pour les vétérans canadiens',
+            'EDAC',
+            'G3 Canada Limited',
+            'Guy Dumont',
+            'Johnston group',
+            'Manitoba Association of Optometrists',
+            'Paula Isaak',
+            'Rémi Courcelles',
+            'Agriculture in the Classroom-Manitoba',
+            'All Seniors Care Living Centres Inc',
+            'Animal Health Canada',
+            'Castle Health',
+            'Eupraxia Training',
+            'FCFM',
+            'Heritage Winnipeg',
+            'Manitoba child care association',
+            'PADRAIG',
+            'Phonique média',
+            'pipikwan Pêhtâkwan',
+            'PVLIP',
+            'Bounce',
+            'Chronic Pain Centre of Excellence',
+            'Direct Focus',
+            'LCTaylor',
+            'Louisiana Department of Education',
+            'Pembina Trails School Division',
+            'Provincial Court of Saskatchewan',
+            'Sapphire Springs Inc.',
+            'Sophie Bissonnette',
+            'Canadian Museum Human Rights PO 1029122',
+            'Centre Scolaire Centre Nord',
+            'MBLL - HR',
+            'Mustafa Elmi',
+            'Roadwest Pictures',
+            'Shared Health MB',
+            'ViewSource Media',
+            'After Caregiving',
+            'Génome Canada',
+            'NCTR',
+            'Urbanink',
+            'Roll Focus',
+            'Pascale Kihn',
+            'George & Fay Yee Centre for Healthcare Innovation',
+            'Sem Ltd.',
+            'Phonique Média',
+            'Great Plains Publishing',
+            'PROJETS EN ATTENTE',
+            'Louis Riel Institute',
+            'On Screen Manitoba',
+            'Mangrove',
+            'Economic Development Winnipeg (Tourism Wpg & YES! WPG)',
+            'Spadrole',
+            'Université du Manitoba',
+            'University of Manitoba',
+        ];
+
+        // Remove duplicates
+        $uniqueCompanies = array_unique($companies);
+
+        foreach ($uniqueCompanies as $companyName) {
+            Company::firstOrCreate(['company_name' => $companyName]);
+        }
+    }
+}
+
+
+
+===== File: database/factories/UserFactory.php =====
+<?php
+
+namespace Database\Factories;
+
+use Illuminate\Database\Eloquent\Factories\Factory;
+use Illuminate\Support\Facades\Hash;
+use Illuminate\Support\Str;
+
+/**
+ * @extends \Illuminate\Database\Eloquent\Factories\Factory<\App\Models\User>
+ */
+class UserFactory extends Factory
+{
+    /**
+     * The current password being used by the factory.
+     */
+    protected static ?string $password;
+
+    /**
+     * Define the model's default state.
+     *
+     * @return array<string, mixed>
+     */
+    public function definition(): array
+    {
+        return [
+            'name' => fake()->name(),
+            'email' => fake()->unique()->safeEmail(),
+            'email_verified_at' => now(),
+            'password' => static::$password ??= Hash::make('password'),
+            'remember_token' => Str::random(10),
+        ];
+    }
+
+    /**
+     * Indicate that the model's email address should be unverified.
+     */
+    public function unverified(): static
+    {
+        return $this->state(fn (array $attributes) => [
+            'email_verified_at' => null,
+        ]);
+    }
+}
+
+
+
+===== File: database/migrations/2024_10_14_191341_create_personal_access_tokens_table.php =====
+<?php
+
+use Illuminate\Database\Migrations\Migration;
+use Illuminate\Database\Schema\Blueprint;
+use Illuminate\Support\Facades\Schema;
+
+return new class extends Migration
+{
+    /**
+     * Run the migrations.
+     */
+    public function up(): void
+    {
+        Schema::create('personal_access_tokens', function (Blueprint $table) {
+            $table->id();
+            $table->morphs('tokenable');
+            $table->string('name');
+            $table->string('token', 64)->unique();
+            $table->text('abilities')->nullable();
+            $table->timestamp('last_used_at')->nullable();
+            $table->timestamp('expires_at')->nullable();
+            $table->timestamps();
+        });
+    }
+
+    /**
+     * Reverse the migrations.
+     */
+    public function down(): void
+    {
+        Schema::dropIfExists('personal_access_tokens');
+    }
+};
+
+
+
+===== File: database/migrations/2024_10_31_171540_create_user_roles_table.php =====
+<?php
+
+use Illuminate\Database\Migrations\Migration;
+use Illuminate\Database\Schema\Blueprint;
+use Illuminate\Support\Facades\Schema;
+
+return new class extends Migration
+{
+    /**
+     * Run the migrations.
+     */
+    public function up(): void
+    {
+        Schema::create('user_roles', function (Blueprint $table) {
+            $table->id();
+            $table->foreignId('user_id')->constrained()->onDelete('cascade');
+            $table->foreignId('role_id')->constrained()->onDelete('cascade');
+            $table->timestamps();
+        });
+    }
+
+    /**
+     * Reverse the migrations.
+     */
+    public function down(): void
+    {
+        Schema::dropIfExists('user_roles');
+    }
+};
+
+
+
+===== File: database/migrations/2024_10_31_171522_create_role_permissions_table.php =====
+<?php
+
+use Illuminate\Database\Migrations\Migration;
+use Illuminate\Database\Schema\Blueprint;
+use Illuminate\Support\Facades\Schema;
+
+return new class extends Migration
+{
+    /**
+     * Run the migrations.
+     */
+    public function up(): void
+    {
+        Schema::create('role_permissions', function (Blueprint $table) {
+            $table->id();
+            $table->foreignId('role_id')->constrained()->onDelete('cascade');
+            $table->foreignId('permission_id')
+                  ->references('id')
+                  ->on('permissions')
+                  ->onDelete('cascade');
+            $table->timestamps();
+        });
+    }
+
+    /**
+     * Reverse the migrations.
+     */
+    public function down(): void
+    {
+        Schema::dropIfExists('role_permissions');
+    }
+};
+
+
+
+===== File: database/migrations/2024_11_19_181147_create_user_company_table.php =====
+<?php
+
+   // database/migrations/xxxx_xx_xx_xxxxxx_create_user_company_table.php
+
+   use Illuminate\Database\Migrations\Migration;
+   use Illuminate\Database\Schema\Blueprint;
+   use Illuminate\Support\Facades\Schema;
+
+   class CreateUserCompanyTable extends Migration
+   {
+       /**
+        * Run the migrations.
+        *
+        * @return void
+        */
+       public function up()
+       {
+           Schema::create('user_company', function (Blueprint $table) {
+               $table->id();
+               $table->foreignId('user_id')->constrained()->onDelete('cascade');
+               $table->foreignId('company_id')->constrained()->onDelete('cascade');
+               $table->timestamps();
+           });
+       }
+
+       /**
+        * Reverse the migrations.
+        *
+        * @return void
+        */
+       public function down()
+       {
+           Schema::dropIfExists('user_company');
+       }
+   }
+
+
+
+===== File: database/migrations/0001_01_01_000002_create_jobs_table.php =====
+<?php
+
+use Illuminate\Database\Migrations\Migration;
+use Illuminate\Database\Schema\Blueprint;
+use Illuminate\Support\Facades\Schema;
+
+return new class extends Migration
+{
+    /**
+     * Run the migrations.
+     */
+    public function up(): void
+    {
+        Schema::create('jobs', function (Blueprint $table) {
+            $table->id();
+            $table->string('queue')->index();
+            $table->longText('payload');
+            $table->unsignedTinyInteger('attempts');
+            $table->unsignedInteger('reserved_at')->nullable();
+            $table->unsignedInteger('available_at');
+            $table->unsignedInteger('created_at');
+        });
+
+        Schema::create('job_batches', function (Blueprint $table) {
+            $table->string('id')->primary();
+            $table->string('name');
+            $table->integer('total_jobs');
+            $table->integer('pending_jobs');
+            $table->integer('failed_jobs');
+            $table->longText('failed_job_ids');
+            $table->mediumText('options')->nullable();
+            $table->integer('cancelled_at')->nullable();
+            $table->integer('created_at');
+            $table->integer('finished_at')->nullable();
+        });
+
+        Schema::create('failed_jobs', function (Blueprint $table) {
+            $table->id();
+            $table->string('uuid')->unique();
+            $table->text('connection');
+            $table->text('queue');
+            $table->longText('payload');
+            $table->longText('exception');
+            $table->timestamp('failed_at')->useCurrent();
+        });
+    }
+
+    /**
+     * Reverse the migrations.
+     */
+    public function down(): void
+    {
+        Schema::dropIfExists('jobs');
+        Schema::dropIfExists('job_batches');
+        Schema::dropIfExists('failed_jobs');
+    }
+};
+
+
+
+===== File: database/migrations/2024_11_23_031504_add_password_reset_required_to_users_table.php =====
+<?php
+// database/migrations/xxxx_xx_xx_xxxxxx_add_password_reset_required_to_users_table.php
+
+use Illuminate\Database\Migrations\Migration;
+use Illuminate\Database\Schema\Blueprint;
+use Illuminate\Support\Facades\Schema;
+
+class AddPasswordResetRequiredToUsersTable extends Migration
+{
+    public function up()
+    {
+        Schema::table('users', function (Blueprint $table) {
+            $table->boolean('password_reset_required')->default(true);
+        });
+    }
+
+    public function down()
+    {
+        Schema::table('users', function (Blueprint $table) {
+            $table->dropColumn('password_reset_required');
+        });
+    }
+}
+
+
+
+===== File: database/migrations/2024_12_05_140737_create_message_labels_and_statuses_tables.php =====
+<?php
+use Illuminate\Database\Migrations\Migration;
+use Illuminate\Database\Schema\Blueprint;
+use Illuminate\Support\Facades\Schema;
+
+class CreateMessageLabelsAndStatusesTables extends Migration
+{
+    public function up()
+    {
+        // Labels Table
+        Schema::create('labels', function (Blueprint $table) {
+            $table->id();
+            $table->string('label_name');
+            $table->unsignedBigInteger('user_id'); // The user who created the label
+            $table->timestamps();
+            $table->foreign('user_id')->references('id')->on('users');
+        });
+
+        // Message_Labels Pivot Table
+        Schema::create('message_labels', function (Blueprint $table) {
+            $table->id();
+            $table->unsignedBigInteger('message_id');
+            $table->unsignedBigInteger('label_id');
+            $table->timestamps();
+            $table->foreign('message_id')->references('id')->on('messages')->onDelete('cascade');
+            $table->foreign('label_id')->references('id')->on('labels')->onDelete('cascade');
+        });
+    }
+
+    public function down()
+    {
+        Schema::dropIfExists('message_labels');
+        Schema::dropIfExists('labels');
+    }
+}
+
+
+
+===== File: database/migrations/2024_11_19_185017_create_user_assignments_table.php =====
+<?php
+   // database/migrations/xxxx_xx_xx_xxxxxx_create_user_assignments_table.php
+
+   use Illuminate\Database\Migrations\Migration;
+   use Illuminate\Database\Schema\Blueprint;
+   use Illuminate\Support\Facades\Schema;
+
+   class CreateUserAssignmentsTable extends Migration
+   {
+       /**
+        * Run the migrations.
+        *
+        * @return void
+        */
+       public function up()
+       {
+           Schema::create('user_assignments', function (Blueprint $table) {
+               $table->id();
+               $table->foreignId('user_id')->constrained()->onDelete('cascade');
+               $table->foreignId('assignment_id')->constrained('assignments')->onDelete('cascade');
+               $table->timestamps();
+           });
+       }
+
+       /**
+        * Reverse the migrations.
+        *
+        * @return void
+        */
+       public function down()
+       {
+           Schema::dropIfExists('user_assignments');
+       }
+   }
+
+
+
+===== File: database/migrations/2024_10_31_171504_create_roles_table.php =====
+<?php
+
+use Illuminate\Database\Migrations\Migration;
+use Illuminate\Database\Schema\Blueprint;
+use Illuminate\Support\Facades\Schema;
+
+return new class extends Migration
+{
+    /**
+     * Run the migrations.
+     */
+    public function up(): void
+    {
+        Schema::create('roles', function (Blueprint $table) {
+            $table->id();
+            $table->string('name'); // e.g., Admin, User, Manager
+            $table->timestamps();
+        });
+    }
+
+    /**
+     * Reverse the migrations.
+     */
+    public function down(): void
+    {
+        // Drop foreign key constraints in all dependent tables
+        if (Schema::hasTable('user_roles')) {
+            Schema::table('user_roles', function (Blueprint $table) {
+                $table->dropForeign(['role_id']);
+            });
+        }
+
+        if (Schema::hasTable('role_permissions')) {
+            Schema::table('role_permissions', function (Blueprint $table) {
+                $table->dropForeign(['role_id']);
+            });
+        }
+
+        if (Schema::hasTable('role_ability_subject')) {
+            Schema::table('role_ability_subject', function (Blueprint $table) {
+                $table->dropForeign(['role_id']);
+            });
+        }
+
+        // Drop dependent tables if required
+        Schema::dropIfExists('user_roles');
+        Schema::dropIfExists('role_permissions');
+        Schema::dropIfExists('role_ability_subject');
+
+        // Finally, drop the 'roles' table
+        Schema::dropIfExists('roles');
+    }
+};
+
+
+
+===== File: database/migrations/2024_10_31_171426_create_permissions_table.php =====
+<?php
+
+use Illuminate\Database\Migrations\Migration;
+use Illuminate\Database\Schema\Blueprint;
+use Illuminate\Support\Facades\Schema;
+
+return new class extends Migration
+{
+    /**
+     * Run the migrations.
+     */
+    public function up(): void
+    {
+        Schema::create('permissions', function (Blueprint $table) {
+            $table->id();
+            $table->string('action');        // e.g., create, read, update, delete
+            $table->string('subject');       // e.g., Post, Comment, User
+            $table->timestamps();
+        });
+    }
+
+    /**
+     * Reverse the migrations.
+     */
+    public function down(): void
+    {
+        Schema::dropIfExists('permissions');
+    }
+};
+
+
+
+===== File: database/migrations/2024_12_05_135714_create_projects_table.php =====
+<?php
+
+use Illuminate\Database\Migrations\Migration;
+use Illuminate\Database\Schema\Blueprint;
+use Illuminate\Support\Facades\Schema;
+
+class CreateProjectsTable extends Migration
+{
+    /**
+     * Run the migrations.
+     *
+     * @return void
+     */
+    public function up()
+    {
+        Schema::create('projects', function (Blueprint $table) {
+            $table->id();
+            $table->string('name', 255);
+            $table->text('description')->nullable();
+            $table->timestamps();
+        });
+    }
+
+    /**
+     * Reverse the migrations.
+     *
+     * @return void
+     */
+    public function down()
+    {
+        Schema::dropIfExists('projects');
+    }
+}
+
+
+
+===== File: database/migrations/0001_01_01_000000_create_users_table.php =====
+<?php
+
+use Illuminate\Database\Migrations\Migration;
+use Illuminate\Database\Schema\Blueprint;
+use Illuminate\Support\Facades\Schema;
+
+return new class extends Migration
+{
+    /**
+     * Run the migrations.
+     */
+    public function up(): void
+    {
+        Schema::create('users', function (Blueprint $table) {
+            $table->id();
+            $table->string('name');
+            $table->string('email')->unique();
+            $table->timestamp('email_verified_at')->nullable();
+            $table->string('password');
+            $table->rememberToken();
+            $table->timestamps();
+        });
+
+        Schema::create('password_reset_tokens', function (Blueprint $table) {
+            $table->string('email')->primary();
+            $table->string('token');
+            $table->timestamp('created_at')->nullable();
+        });
+
+        Schema::create('sessions', function (Blueprint $table) {
+            $table->string('id')->primary();
+            $table->foreignId('user_id')->nullable()->index();
+            $table->string('ip_address', 45)->nullable();
+            $table->text('user_agent')->nullable();
+            $table->longText('payload');
+            $table->integer('last_activity')->index();
+        });
+    }
+
+    /**
+     * Reverse the migrations.
+     */
+    public function down(): void
+    {
+        Schema::dropIfExists('users');
+        Schema::dropIfExists('password_reset_tokens');
+        Schema::dropIfExists('sessions');
+    }
+};
+
+
+
+===== File: database/migrations/2024_11_19_184318_create_assignments_table.php =====
+<?php
+
+
+   use Illuminate\Database\Migrations\Migration;
+   use Illuminate\Database\Schema\Blueprint;
+   use Illuminate\Support\Facades\Schema;
+
+   class CreateAssignmentsTable extends Migration
+   {
+       /**
+        * Run the migrations.
+        *
+        * @return void
+        */
+       public function up()
+       {
+           Schema::create('assignments', function (Blueprint $table) {
+               $table->id();
+               $table->string('title');
+               $table->text('description')->nullable();
+               $table->string('location')->nullable();
+               $table->decimal('salary', 8, 2)->nullable();
+               $table->timestamps();
+           });
+       }
+
+       /**
+        * Reverse the migrations.
+        *
+        * @return void
+        */
+       public function down()
+       {
+           Schema::dropIfExists('assignments');
+       }
+   }
+
+
+
+===== File: database/migrations/2024_11_19_180625_create_companies_table.php =====
+<?php
+   // database/migrations/xxxx_xx_xx_xxxxxx_create_companies_table.php
+
+   use Illuminate\Database\Migrations\Migration;
+   use Illuminate\Database\Schema\Blueprint;
+   use Illuminate\Support\Facades\Schema;
+
+   class CreateCompaniesTable extends Migration
+   {
+       /**
+        * Run the migrations.
+        *
+        * @return void
+        */
+       public function up()
+       {
+           Schema::create('companies', function (Blueprint $table) {
+               $table->id();
+               $table->string('company_name');
+               $table->timestamps();
+           });
+       }
+
+       /**
+        * Reverse the migrations.
+        *
+        * @return void
+        */
+       public function down()
+       {
+           Schema::dropIfExists('companies');
+       }
+   }
+
+
+
+===== File: database/migrations/2024_12_05_135722_create_messages_table.php =====
+<?php
+
+use Illuminate\Database\Migrations\Migration;
+use Illuminate\Database\Schema\Blueprint;
+use Illuminate\Support\Facades\Schema;
+
+class CreateMessagesTable extends Migration
+{
+    /**
+     * Run the migrations.
+     *
+     * @return void
+     */
+    public function up()
+    {
+        Schema::create('messages', function (Blueprint $table) {
+            $table->id();
+            $table->foreignId('sender_id')->constrained('users')->onDelete('cascade');
+            $table->foreignId('company_id')->constrained('companies')->onDelete('cascade');
+            $table->foreignId('assignment_id')->constrained('assignments')->onDelete('cascade');
+            $table->foreignId('project_id')->constrained('projects')->onDelete('cascade');
+            $table->string('subject', 255);
+            $table->text('body');
+            $table->foreignId('reply_to_id')->nullable()->constrained('messages')->onDelete('cascade');
+            $table->enum('status', ['draft', 'archived', 'deleted'])->default('draft');
+            $table->timestamps();
+        });
+    }
+
+    /**
+     * Reverse the migrations.
+     *
+     * @return void
+     */
+    public function down()
+    {
+        Schema::dropIfExists('messages');
+    }
+}
+
+
+
+===== File: database/migrations/0001_01_01_000001_create_cache_table.php =====
+<?php
+
+use Illuminate\Database\Migrations\Migration;
+use Illuminate\Database\Schema\Blueprint;
+use Illuminate\Support\Facades\Schema;
+
+return new class extends Migration
+{
+    /**
+     * Run the migrations.
+     */
+    public function up(): void
+    {
+        Schema::create('cache', function (Blueprint $table) {
+            $table->string('key')->primary();
+            $table->mediumText('value');
+            $table->integer('expiration');
+        });
+
+        Schema::create('cache_locks', function (Blueprint $table) {
+            $table->string('key')->primary();
+            $table->string('owner');
+            $table->integer('expiration');
+        });
+    }
+
+    /**
+     * Reverse the migrations.
+     */
+    public function down(): void
+    {
+        Schema::dropIfExists('cache');
+        Schema::dropIfExists('cache_locks');
+    }
+};
+
+
+
+===== File: routes/web.php =====
+<?php
+
+use Illuminate\Support\Facades\Route;
+use Illuminate\Support\Facades\Auth;
+
+//Catch-All Route (Placed at the bottom)
+Route::get('{any}', function() {
+    return view('application');
+})->where('any', '.*');
+
+
+Route::get('/login', function () {
+    // Return a login view or an SPA page
+    return view('application'); 
+})->name('login');
+
+
+
+//Route::get('/build/{path}', function ($path) {
+//   return response()->file(public_path("build/{$path}"), [
+//        'Content-Type' => 'application/javascript',
+//    ]);
+//})->where('path', '.*');
+
+
+
+
+===== File: routes/api.php =====
+<?php
+
+use Illuminate\Http\Request;
+use Illuminate\Support\Facades\Route;
+use App\Http\Controllers\AuthController;
+use App\Http\Controllers\UserController;
+use App\Http\Controllers\CompanyController;
+use App\Http\Controllers\RolesController;
+use App\Http\Controllers\EmailController;
+
+/*
+|--------------------------------------------------------------------------
+| API Routes
+|--------------------------------------------------------------------------
+|
+| Register API routes for your application. These routes are loaded by the
+| RouteServiceProvider and assigned the "api" middleware group.
+|
+*/
+
+// Authentication Routes
+Route::group(['prefix' => 'auth'], function () {
+    Route::post('login', [AuthController::class, 'login']);
+    Route::post('register', [AuthController::class, 'register']);
+
+    Route::middleware('auth:sanctum')->group(function () {
+        Route::post('logout', [AuthController::class, 'logout']);
+        Route::get('user', [AuthController::class, 'user']);
+    });
+});
+
+// User Management Routes
+Route::middleware('auth:sanctum')->group(function () {
+    Route::get('/users', [UserController::class, 'index']);
+    Route::get('/users/{id}', [UserController::class, 'showUser']);
+    Route::post('/users', [UserController::class, 'addUser'])->name('users.store');
+    Route::put('/users/{id}', [UserController::class, 'updateUser']);
+    Route::delete('/users/{id}', [UserController::class, 'deleteUser']);
+});
+
+// Email Management Routes
+Route::middleware('auth:sanctum')->get('/email', [EmailController::class, 'index']);
+
+// Company Management Routes
+Route::middleware('auth:sanctum')->group(function () {
+    Route::get('/companies/all', [CompanyController::class, 'allCompanies']);
+    Route::get('/paginatedCompanies', [CompanyController::class, 'paginatedIndex']);
+    Route::post('/companies', [CompanyController::class, 'addCompany']);
+    Route::delete('/companies/{id}', [CompanyController::class, 'deleteCompany']);
+    Route::get('/companies/{id}', [CompanyController::class, 'showCompany']);
+    Route::put('/companies/{id}', [CompanyController::class, 'updateCompany']);
+});
+
+// Role Management Routes
+Route::middleware('auth:sanctum')->get('/roles', [RolesController::class, 'index']);
+
+// Fallback Route
+Route::fallback(function () {
+    return response()->json(['message' => 'Resource not found.'], 404);
+});
+
+Route::get('/diagnostic', function (Request $request) {
+    return response()->json(['message' => 'API is up', 'user' => $request->user()]);
+});
+
+
+
+===== File: routes/console.php =====
+<?php
+
+use Illuminate\Foundation\Inspiring;
+use Illuminate\Support\Facades\Artisan;
+
+Artisan::command('inspire', function () {
+    $this->comment(Inspiring::quote());
+})->purpose('Display an inspiring quote')->hourly();
+
+
+
+===== File: .env =====
+APP_NAME=Laravel
+APP_ENV=local
+APP_KEY=base64:kX94a274hawQem9zXP5bQQacsxYEcjuWjB0KkqBof5c=
+APP_DEBUG=true
+APP_TIMEZONE=UTC
+APP_URL=http://localhost:8000/
+
+APP_LOCALE=en
+APP_FALLBACK_LOCALE=en
+APP_FAKER_LOCALE=en_US
+
+APP_MAINTENANCE_DRIVER=file
+APP_MAINTENANCE_STORE=database
+
+BCRYPT_ROUNDS=12
+
+LOG_CHANNEL=stack
+LOG_STACK=single
+LOG_DEPRECATIONS_CHANNEL=null
+LOG_LEVEL=debug
+
+DB_CONNECTION=mysql
+DB_HOST=127.0.0.1
+DB_PORT=3306
+DB_DATABASE=laravelweb_db
+DB_USERNAME=laravelweb
+DB_PASSWORD='Web#laravel@123'
+
+SESSION_LIFETIME=120
+SESSION_ENCRYPT=false
+SESSION_PATH=/
+
+SESSION_DRIVER=database
+SESSION_DOMAIN=
+SANCTUM_STATEFUL_DOMAINS=
+
+CORS_ALLOWED_ORIGINS=*
+
+BROADCAST_CONNECTION=log
+FILESYSTEM_DISK=local
+QUEUE_CONNECTION=database
+
+CACHE_STORE=database
+CACHE_PREFIX=
+
+MEMCACHED_HOST=127.0.0.1
+
+REDIS_CLIENT=phpredis
+REDIS_HOST=127.0.0.1
+REDIS_PASSWORD=null
+REDIS_PORT=6379
+
+MAIL_MAILER=log
+MAIL_HOST=127.0.0.1
+MAIL_PORT=2525
+MAIL_USERNAME=null
+MAIL_PASSWORD=null
+MAIL_ENCRYPTION=null
+MAIL_FROM_ADDRESS="hello@example.com"
+MAIL_FROM_NAME="${APP_NAME}"
+
+AWS_ACCESS_KEY_ID=
+AWS_SECRET_ACCESS_KEY=
+AWS_DEFAULT_REGION=us-east-1
+AWS_BUCKET=
+AWS_USE_PATH_STYLE_ENDPOINT=false
+
+VITE_APP_NAME="${APP_NAME}"
+VITE_API_BASE_URL=http://localhost:8000/api
+VITE_API_URL=http://localhost:8000/api
+
+SANCTUM_STATEFUL_DOMAINS=127.0.0.1,localhost,https://stephandouglasduval.com/
+SESSION_DRIVER=cookie
+SESSION_DOMAIN=localhost
+
+PASSPORT_PERSONAL_ACCESS_CLIENT_ID=1
+PASSPORT_PERSONAL_ACCESS_CLIENT_SECRET=FCKF4ZWl1YKkTl93nLJRqrqb9ziozeE3HvAQjdI3
+PASSPORT_PASSWORD_GRANT_CLIENT_ID=2
+PASSPORT_PASSWORD_GRANT_CLIENT_SECRET=pfvDaMLUY8zjYSDsBDWmhrd7vrpURIcBgOuxoU8N
+
+
+
+===== File: vite.config.ts =====
+import vue from '@vitejs/plugin-vue'
+import vueJsx from '@vitejs/plugin-vue-jsx'
+import laravel from 'laravel-vite-plugin'
+import { fileURLToPath } from 'node:url'
+import AutoImport from 'unplugin-auto-import/vite'
+import Components from 'unplugin-vue-components/vite'
+import { VueRouterAutoImports, getPascalCaseRouteName } from 'unplugin-vue-router'
+import VueRouter from 'unplugin-vue-router/vite'
+import { defineConfig } from 'vite'
+import Layouts from 'vite-plugin-vue-layouts'
+import vuetify from 'vite-plugin-vuetify'
+import svgLoader from 'vite-svg-loader'
+
+// https://vitejs.dev/config/
+export default defineConfig({
+  base: '/build/', // Ensure correct base path for history mode
+
+  plugins: [
+    // Vue Router plugin should be placed before Vue plugin
+    VueRouter({
+      getRouteName: routeNode => {
+        return getPascalCaseRouteName(routeNode)
+          .replace(/([a-z\d])([A-Z])/g, '$1-$2')
+          .toLowerCase()
+      },
+      routesFolder: 'resources/ts/pages',
+    }),
+    vue({
+      template: {
+        compilerOptions: {
+          isCustomElement: tag => tag === 'swiper-container' || tag === 'swiper-slide',
+        },
+        transformAssetUrls: {
+          base: null,
+          includeAbsolute: false,
+        },
+      },
+    }),
+    laravel({
+      input: ['resources/ts/main.ts'],
+      refresh: true,
+      buildDirectory: 'public/build', // Ensure Laravel serves the correct build
+    }),
+    vueJsx(),
+    vuetify({
+      styles: {
+        configFile: 'resources/styles/variables/_vuetify.scss',
+      },
+    }),
+    Layouts({
+      layoutsDirs: './resources/ts/layouts/',
+    }),
+    Components({
+      dirs: ['resources/ts/@core/components', 'resources/ts/views/demos', 'resources/ts/components'],
+      dts: true,
+      resolvers: [
+        componentName => {
+          if (componentName === 'VueApexCharts')
+            return { name: 'default', from: 'vue3-apexcharts', as: 'VueApexCharts' }
+        },
+      ],
+    }),
+    AutoImport({
+      imports: ['vue', VueRouterAutoImports, '@vueuse/core', '@vueuse/math', 'vue-i18n', 'pinia'],
+      dirs: [
+        './resources/ts/@core/utils',
+        './resources/ts/@core/composable/',
+        './resources/ts/composables/',
+        './resources/ts/utils/',
+        './resources/ts/plugins/*/composables/*',
+      ],
+      vueTemplate: true,
+      ignore: ['useCookies', 'useStorage'],
+    }),
+    svgLoader(),
+  ],
+
+  define: { 'process.env': { VITE_API_URL: process.env.VITE_API_URL } },
+
+  resolve: {
+    alias: {
+      '@core-scss': fileURLToPath(new URL('./resources/styles/@core', import.meta.url)),
+      '@': fileURLToPath(new URL('./resources/ts', import.meta.url)),
+      '@themeConfig': fileURLToPath(new URL('./themeConfig.ts', import.meta.url)),
+      '@core': fileURLToPath(new URL('./resources/ts/@core', import.meta.url)),
+      '@layouts': fileURLToPath(new URL('./resources/ts/@layouts', import.meta.url)),
+      '@images': fileURLToPath(new URL('./resources/images/', import.meta.url)),
+      '@styles': fileURLToPath(new URL('./resources/styles/', import.meta.url)),
+      '@configured-variables': fileURLToPath(new URL('./resources/styles/variables/_template.scss', import.meta.url)),
+      '@db': fileURLToPath(new URL('./resources/ts/plugins/fake-api/handlers/', import.meta.url)),
+      '@api-utils': fileURLToPath(new URL('./resources/ts/plugins/fake-api/utils/', import.meta.url)),
+    },
+  },
+
+  build: {
+    outDir: 'public/build',
+    chunkSizeWarningLimit: 5000,
+    emptyOutDir: false, // Prevents deleting non-build files
+    rollupOptions: {
+      input: 'resources/ts/main.ts',
+    },
+  },
+
+  optimizeDeps: {
+    exclude: ['vuetify'],
+    entries: ['./resources/ts/**/*.vue'],
+  },
+});
+
+
+
+===== File: /home/rogers/Code/Sneat-Test/resources/ts/pages/apps/user/view/[id].vue =====
+<script setup lang="ts">
+import UserBioPanel from '@/views/apps/user/view/UserBioPanel.vue'
+import UserTabAccount from '@/views/apps/user/view/UserTabAccount.vue'
+import UserTabBillingsPlans from '@/views/apps/user/view/UserTabBillingsPlans.vue'
+import UserTabConnections from '@/views/apps/user/view/UserTabConnections.vue'
+import UserTabNotifications from '@/views/apps/user/view/UserTabNotifications.vue'
+import UserTabSecurity from '@/views/apps/user/view/UserTabSecurity.vue'
+
+const route = useRoute('apps-user-view-id')
+
+const userTab = ref(null)
+
+const tabs = [
+  { icon: 'bx-user', title: 'Account' },
+  { icon: 'bx-lock-alt', title: 'Security' },
+  { icon: 'bx-detail', title: 'Billing & Plan' },
+  { icon: 'bx-bell', title: 'Notifications' },
+  { icon: 'bx-link', title: 'Connections' },
+]
+
+const { data: userData } = await useApi<any>(`/apps/users/${route.params.id}`)
+
+if (userData.value) {
+  const [firstName, lastName] = userData.value.fullName.split(' ')
+
+  userData.value.firstName = firstName
+  userData.value.lastName = lastName
+}
+</script>
+
+<template>
+  <VRow v-if="userData">
+    <VCol
+      cols="12"
+      md="5"
+      lg="4"
+    >
+      <UserBioPanel :user-data="userData" />
+    </VCol>
+
+    <VCol
+      cols="12"
+      md="7"
+      lg="8"
+    >
+      <VTabs
+        v-model="userTab"
+        class="v-tabs-pill"
+      >
+        <VTab
+          v-for="tab in tabs"
+          :key="tab.icon"
+        >
+          <VIcon
+            :size="18"
+            :icon="tab.icon"
+            class="me-1"
+          />
+          <span>{{ tab.title }}</span>
+        </VTab>
+      </VTabs>
+
+      <VWindow
+        v-model="userTab"
+        class="mt-6 disable-tab-transition"
+        :touch="false"
+      >
+        <VWindowItem>
+          <UserTabAccount />
+        </VWindowItem>
+
+        <VWindowItem>
+          <UserTabSecurity />
+        </VWindowItem>
+
+        <VWindowItem>
+          <UserTabBillingsPlans />
+        </VWindowItem>
+
+        <VWindowItem>
+          <UserTabNotifications />
+        </VWindowItem>
+
+        <VWindowItem>
+          <UserTabConnections />
+        </VWindowItem>
+      </VWindow>
+    </VCol>
+  </VRow>
+  <div v-else>
+    <VAlert
+      type="error"
+      variant="tonal"
+    >
+      Invoice with ID  {{ route.params.id }} not found!
+    </VAlert>
+  </div>
+</template>
+
+
+
+===== File: /home/rogers/Code/Sneat-Test/resources/ts/pages/apps/user/list/index.vue =====
+<script setup lang="ts">
+import AddNewUserDrawer from '@/views/apps/user/list/AddNewUserDrawer.vue'
+import EditUserDrawer from '@/views/apps/user/list/EditUserDrawer.vue'
+
+import type { UserProperties } from '@db/apps/users/types'
+
+// 👉 Store
+const searchQuery = ref('')
+const selectedRole = ref()
+const selectedPlan = ref()
+const selectedStatus = ref()
+
+// Data table options
+const itemsPerPage = ref(10)
+const page = ref(1)
+const sortBy = ref()
+const orderBy = ref()
+const selectedRows = ref([])
+
+// Drawers visibility state
+const isAddNewUserDrawerVisible = ref(false)
+const isEditUserDrawerVisible = ref(false)
+const selectedUserId = ref<number | null>(null)
+
+// Update data table options
+const updateOptions = (options: any) => {
+  console.log('Options received:', options)
+
+  // Update sorting
+  if (options.sortBy?.length) {
+    sortBy.value = options.sortBy[0]?.key
+    orderBy.value = options.sortBy[0]?.order
+  }
+
+  // Update pagination
+  page.value = options.page || 1
+  itemsPerPage.value = options.itemsPerPage || 10
+
+  // Trigger API fetch
+  fetchUsers()
+}
+
+// Headers
+const headers = [
+  { title: 'User', key: 'user' },
+  { title: 'Role', key: 'role' },
+  { title: 'Company', key: 'company' },
+  { title: 'Billing', key: 'billing' },
+  { title: 'Status', key: 'status' },
+  { title: 'Actions', key: 'actions', sortable: false },
+]
+
+
+//   GPT FETCH USERCODE START
+
+
+// GPT CODE END
+
+// 👉 Fetching users
+
+const { data: usersData, execute: fetchUsers } = useApi(() => {
+  const params = new URLSearchParams({
+    page: String(page.value),
+    itemsPerPage: String(itemsPerPage.value),
+  }).toString()
+
+  const token = localStorage.getItem('accessToken')
+  console.log('Access Token before API call:', token) // Debugging line
+
+
+  console.log('Access Token:', token)
+  console.log('API URL:', `/users?${params}`)
+
+  return `/users?${params}`
+}, {
+  method: 'GET',
+  headers: {
+    'Content-Type': 'application/json',
+    'Authorization': `Bearer ${localStorage.getItem('accessToken')}`,
+  },
+  credentials: 'include',
+})
+
+// Add this to store pagination metadata
+const paginationMeta = ref({
+  currentPage: 1,
+  lastPage: 1,
+  total: 0,
+  perPage: 10,
+  from: 0,
+  to: 0,
+})
+
+// Watch for changes in usersData to update pagination
+watch(usersData, data => {
+  if (data) {
+    paginationMeta.value = {
+      currentPage: data.current_page,
+      lastPage: data.last_page,
+      total: data.total,
+      perPage: data.per_page,
+      from: data.from,
+      to: data.to,
+    }
+  }
+}, { immediate: true })
+
+watch(
+  [searchQuery, selectedRole, selectedPlan, selectedStatus, itemsPerPage, page, sortBy, orderBy],
+  () => {
+    fetchUsers()
+  },
+)
+
+const users = computed(() => usersData.value?.data || [])
+const totalUsers = computed(() => usersData.value?.total || 0)
+
+onMounted(async () => {
+  try {
+    console.log('Fetching users...')
+    await fetchUsers()
+    console.log('Users fetched:', usersData.value)
+  }
+  catch (error) {
+    console.error('Error fetching users:', error)
+  }
+})
+
+// 👉 search filters
+const roles = [
+  { title: 'Admin', value: 'admin' },
+  { title: 'Author', value: 'author' },
+  { title: 'Editor', value: 'editor' },
+  { title: 'Maintainer', value: 'maintainer' },
+  { title: 'Subscriber', value: 'subscriber' },
+]
+
+const plans = [
+  { title: 'Basic', value: 'basic' },
+  { title: 'Company', value: 'company' },
+  { title: 'Enterprise', value: 'enterprise' },
+  { title: 'Team', value: 'team' },
+]
+
+const status = [
+  { title: 'Pending', value: 'pending' },
+  { title: 'Active', value: 'active' },
+  { title: 'Inactive', value: 'inactive' },
+]
+
+const resolveUserRoleVariant = (role: string) => {
+  const roleLowerCase = role.toLowerCase()
+
+  if (roleLowerCase === 'subscriber')
+    return { color: 'success', icon: 'bx-user' }
+  if (roleLowerCase === 'author')
+    return { color: 'error', icon: 'bx-desktop' }
+  if (roleLowerCase === 'maintainer')
+    return { color: 'info', icon: 'bx-pie-chart-alt' }
+  if (roleLowerCase === 'editor')
+    return { color: 'warning', icon: 'bx-edit' }
+  if (roleLowerCase === 'admin')
+    return { color: 'primary', icon: 'bx-crown' }
+
+  return { color: 'primary', icon: 'bx-user' }
+}
+
+const resolveUserStatusVariant = (stat: string) => {
+  const statLowerCase = stat.toLowerCase()
+  if (statLowerCase === 'pending')
+    return 'warning'
+  if (statLowerCase === 'active')
+    return 'success'
+  if (statLowerCase === 'inactive')
+    return 'secondary'
+
+  return 'primary'
+}
+
+// 👉 Add new user
+const addNewUser = async (userData: UserProperties) => {
+  // await $api('/apps/users', {
+    await $api('/apps/users', {
+    method: 'POST',
+    body: userData,
+  })
+
+  // Refetch User
+  fetchUsers()
+}
+
+// 👉 Delete user
+const deleteUser = async (id: number) => {
+  try {
+    const response = await fetch(`/api/users/${id}`, {
+      method: 'DELETE',
+      headers: {
+        'Content-Type': 'application/json',
+        'Authorization': `Bearer ${localStorage.getItem('accessToken')}`,
+      },
+    })
+
+    if (!response.ok)
+      throw new Error('Failed to delete user')
+
+    console.log('User deleted successfully.')
+
+    // Refetch users to update the table
+    fetchUsers()
+  }
+  catch (error) {
+    console.error('Error deleting user:', error)
+  }
+}
+
+const widgetData = ref([
+  { title: 'Session', value: '21,459', change: 29, desc: 'Total Users', icon: 'bx-group', iconColor: 'primary' },
+  { title: 'Paid Users', value: '4,567', change: 18, desc: 'Last Week Analytics', icon: 'bx-user-plus', iconColor: 'error' },
+  { title: 'Active Users', value: '19,860', change: -14, desc: 'Last Week Analytics', icon: 'bx-user-check', iconColor: 'success' },
+  { title: 'Pending Users', value: '237', change: 42, desc: 'Last Week Analytics', icon: 'bx-user-voice', iconColor: 'warning' },
+])
+
+// Add this near your other useApi calls
+const { data: testData, execute: testApiCall } = useApi('/users?page=2&itemsPerPage=10', {
+  method: 'GET',
+  headers: {
+    'Content-Type': 'application/json',
+    'Authorization': `Bearer ${localStorage.getItem('accessToken')}`,
+  },
+  credentials: 'include',
+})
+
+// Add this to log the results
+watch(testData, newData => {
+  console.log('Test API Response:', newData)
+}, { immediate: true })
+
+// Call it on mount
+onMounted(async () => {
+  console.log('Making test API call...')
+  await testApiCall()
+
+  // Your existing code...
+  fetchUsers()
+})
+
+// Update the options handler
+const handleOptionsUpdate = (options: any) => {
+  console.log('Options received:', options)
+
+  const newOptions = {
+    page: options.page || 1,
+    itemsPerPage: options.itemsPerPage || 10,
+    sortBy: options.sortBy?.[0],
+    orderBy: options.sortBy?.[0]?.order,
+  }
+
+  console.log('Updated options:', newOptions)
+
+  // Only fetch if page or itemsPerPage changed
+  if (page.value !== newOptions.page || itemsPerPage.value !== newOptions.itemsPerPage) {
+    page.value = newOptions.page
+    itemsPerPage.value = newOptions.itemsPerPage
+    fetchUsers()
+  }
+}
+
+// Open Edit Drawer
+const openEditUserDrawer = (userId: number) => {
+  selectedUserId.value = userId
+  isEditUserDrawerVisible.value = true
+}
+</script>
+
+<template>
+  <section>
+    <!-- 👉 Widgets -->
+    <div class="d-flex mb-6">
+      <VRow>
+        <template
+          v-for="(data, id) in widgetData"
+          :key="id"
+        >
+          <VCol
+            cols="12"
+            md="3"
+            sm="6"
+          >
+            <VCard>
+              <VCardText>
+                <div class="d-flex justify-space-between">
+                  <div class="d-flex flex-column gap-y-1">
+                    <div class="text-body-1 text-high-emphasis">
+                      {{ data.title }}
+                    </div>
+                    <div class="d-flex gap-x-2 align-center">
+                      <h4 class="text-h4">
+                        {{ data.value }}
+                      </h4>
+                      <div
+                        class="text-base"
+                        :class="data.change > 0 ? 'text-success' : 'text-error'"
+                      >
+                        ({{ prefixWithPlus(data.change) }}%)
+                      </div>
+                    </div>
+                    <div class="text-sm">
+                      {{ data.desc }}
+                    </div>
+                  </div>
+                  <VAvatar
+                    :color="data.iconColor"
+                    variant="tonal"
+                    rounded
+                    size="40"
+                  >
+                    <VIcon
+                      :icon="data.icon"
+                      size="24"
+                    />
+                  </VAvatar>
+                </div>
+              </VCardText>
+            </VCard>
+          </VCol>
+        </template>
+      </VRow>
+    </div>
+
+    <VCard class="mb-6">
+      <VCardItem class="pb-4">
+        <VCardTitle>Filters</VCardTitle>
+      </VCardItem>
+
+      <VCardText>
+        <VRow>
+          <!-- 👉 Select Role -->
+          <VCol
+            cols="12"
+            sm="4"
+          >
+            <AppSelect
+              v-model="selectedRole"
+              placeholder="Select Role"
+              :items="roles"
+              clearable
+              clear-icon="bx-x"
+            />
+          </VCol>
+          <!-- 👉 Select Plan -->
+          <VCol
+            cols="12"
+            sm="4"
+          >
+            <AppSelect
+              v-model="selectedPlan"
+              placeholder="Select Plan"
+              :items="plans"
+              clearable
+              clear-icon="bx-x"
+            />
+          </VCol>
+          <!-- 👉 Select Status -->
+          <VCol
+            cols="12"
+            sm="4"
+          >
+            <AppSelect
+              v-model="selectedStatus"
+              placeholder="Select Status"
+              :items="status"
+              clearable
+              clear-icon="bx-x"
+            />
+          </VCol>
+        </VRow>
+      </VCardText>
+
+      <VDivider />
+
+      <VCardText class="d-flex flex-wrap gap-4">
+        <div class="me-3 d-flex gap-3">
+          <AppSelect
+            :model-value="itemsPerPage"
+            :items="[
+              { value: 10, title: '10' },
+              { value: 25, title: '25' },
+              { value: 50, title: '50' },
+              { value: 100, title: '100' },
+              { value: -1, title: 'All' },
+            ]"
+            style="inline-size: 6.25rem;"
+            @update:model-value="itemsPerPage = parseInt($event, 10)"
+          />
+        </div>
+        <VSpacer />
+
+        <div class="app-user-search-filter d-flex align-center flex-wrap gap-4">
+          <!-- 👉 Search  -->
+          <div style="inline-size: 15.625rem;">
+            <AppTextField
+              v-model="searchQuery"
+              placeholder="Search User"
+            />
+          </div>
+
+          <!-- 👉 Export button -->
+          <VBtn
+            variant="tonal"
+            color="secondary"
+            prepend-icon="bx-export"
+          >
+            Export
+          </VBtn>
+
+          <!-- 👉 Add user button -->
+          <VBtn
+            prepend-icon="bx-plus"
+            @click="isAddNewUserDrawerVisible = true"
+          >
+            Add New User
+          </VBtn>
+        </div>
+      </VCardText>
+      <VDivider />
+
+      <!-- SECTION datatable -->
+      <VDataTableServer
+        v-model:items-per-page="itemsPerPage"
+        v-model:model-value="selectedRows"
+        v-model:page="page"
+        :items="users"
+        item-value="id"
+        :items-length="totalUsers"
+        :headers="headers"
+        class="text-no-wrap"
+        show-select
+        @update:options="updateOptions"
+      >
+        <!-- User -->
+        <template #item.user="{ item }">
+          <div class="d-flex align-center gap-x-4">
+            <VAvatar
+              size="34"
+              :variant="!item.avatar ? 'tonal' : undefined"
+              :color="!item.avatar ? resolveUserRoleVariant(item.role).color : undefined"
+            >
+              <VImg
+                v-if="item.avatar"
+                :src="item.avatar"
+              />
+              <span v-else>{{ avatarText(item.fullName) }}</span>
+            </VAvatar>
+            <div class="d-flex flex-column">
+              <h6 class="text-base">
+                <RouterLink
+                  :to="{ name: 'apps-user-view-id', params: { id: item.id } }"
+                  class="font-weight-medium text-link"
+                >
+                  {{ item.fullName }}
+                </RouterLink>
+              </h6>
+              <div class="text-sm">
+                {{ item.email }}
+              </div>
+            </div>
+          </div>
+        </template>
+
+        <!-- Role -->
+        <template #item.role="{ item }">
+          <div class="d-flex align-center gap-x-2">
+            <VIcon
+              :size="20"
+              :icon="resolveUserRoleVariant(item.role).icon"
+              :color="resolveUserRoleVariant(item.role).color"
+            />
+
+            <div class="text-capitalize text-high-emphasis text-body-1">
+              {{ item.role }}
+            </div>
+          </div>
+        </template>
+
+        <!-- Company -->
+        <template #item.company="{ item }">
+          <div class="text-body-1 text-high-emphasis text-capitalize">
+            {{ item.company || 'N/A' }}
+          </div>
+        </template>
+
+        <!-- Status -->
+        <template #item.status="{ item }">
+          <VChip
+            :color="resolveUserStatusVariant(item.status)"
+            size="small"
+            label
+            class="text-capitalize"
+          >
+            {{ item.status }}
+          </VChip>
+        </template>
+
+        <!-- Actions -->
+        <template #item.actions="{ item }">
+          <IconBtn @click="deleteUser(item.id)">
+            <VIcon icon="bx-trash" />
+          </IconBtn>
+
+          <VBtn
+            icon
+            variant="text"
+            color="medium-emphasis"
+            @click="openEditUserDrawer(item.id)"
+          >
+            <VIcon icon="bx-pencil" />
+          </VBtn>
+        </template>
+
+        <!-- Pagination -->
+        <template #bottom>
+          <TablePagination
+            v-model:page="page"
+            :items-per-page="itemsPerPage"
+            :total-items="totalUsers"
+          />
+        </template>
+      </VDataTableServer>
+
+      <!-- SECTION -->
+    </VCard>
+    <!-- 👉 Add New User -->
+    <AddNewUserDrawer
+      v-model:isDrawerOpen="isAddNewUserDrawerVisible"
+      @user-data="addNewUser"
+    />
+
+    <!-- 👉 Edit User -->
+    <EditUserDrawer
+      v-model:isDrawerOpen="isEditUserDrawerVisible"
+      :user-id="selectedUserId"
+      @user-updated="fetchUsers"
+    />
+  </section>
+</template>
+
+
+
+===== File: /home/rogers/Code/Sneat-Test/resources/ts/views/apps/user/view/UserTabBillingsPlans.vue =====
+<script setup lang="ts">
+import americanExpress from '@images/icons/payments/american-express.png'
+import mastercard from '@images/icons/payments/mastercard.png'
+import visa from '@images/icons/payments/visa.png'
+
+interface CardDetail {
+  name: string
+  number: string
+  expiry: string
+  isPrimary: boolean
+  isExpired?: boolean
+  type: string
+  cvv: string
+  image: string
+}
+
+const isUpgradePlanDialogVisible = ref(false)
+
+const currentCardDetails = ref()
+const isCardEditDialogVisible = ref(false)
+const isCardAddDialogVisible = ref(false)
+const isEditAddressDialogVisible = ref(false)
+
+const openEditCardDialog = (cardDetails: CardDetail) => {
+  currentCardDetails.value = cardDetails
+
+  isCardEditDialogVisible.value = true
+}
+
+const creditCards: CardDetail[] = [
+  {
+    name: 'Tom McBride',
+    number: '4851234567899865',
+    expiry: '12/24',
+    isPrimary: true,
+    isExpired: false,
+    type: 'mastercard',
+    cvv: '123',
+    image: mastercard,
+  },
+  {
+    name: 'Mildred Wagner',
+    number: '5531234567895678',
+    expiry: '02/24',
+    isPrimary: false,
+    isExpired: false,
+    type: 'visa',
+    cvv: '456',
+    image: visa,
+  },
+  {
+    name: 'Lester Jennings',
+    number: '5531234567890002',
+    expiry: '08/20',
+    isPrimary: false,
+    isExpired: true,
+    type: 'visa',
+    cvv: '456',
+    image: americanExpress,
+  },
+]
+
+const currentAddress = {
+  companyName: 'Themeselection',
+  billingEmail: 'gertrude@gmail.com',
+  taxID: 'TAX-875623',
+  vatNumber: 'SDF754K77',
+  address: '100 Water Plant Avenue, Building 1303 Wake Island',
+  contact: '+1(609) 933-44-22',
+  country: 'USA',
+  state: 'Queensland',
+  zipCode: 403114,
+}
+
+const currentBillingAddress = {
+  firstName: 'Shamus',
+  lastName: 'Tuttle',
+  selectedCountry: 'USA',
+  addressLine1: '45 Rocker Terrace',
+  addressLine2: 'Latheronwheel',
+  landmark: 'KW5 8NW, London',
+  contact: '+1 (609) 972-22-22',
+  country: 'USA',
+  city: 'London',
+  state: 'London',
+  zipCode: 110001,
+}
+</script>
+
+<template>
+  <VRow>
+    <!-- 👉 Current Plan -->
+    <VCol cols="12">
+      <VCard title="Current Plan">
+        <VCardText>
+          <VRow>
+            <VCol
+              cols="12"
+              md="6"
+              order-md="1"
+              order="2"
+            >
+              <h6 class="text-h6 mb-1">
+                Your Current Plan is Basic
+              </h6>
+              <p>
+                A simple start for everyone
+              </p>
+
+              <h6 class="text-h6 mb-1">
+                Active until Dec 09, 2021
+              </h6>
+              <p>
+                We will send you a notification upon Subscription expiration
+              </p>
+
+              <h6 class="text-h6 mb-1">
+                <span class="d-inline-block me-2">$99 Per Month</span>
+                <VChip
+                  color="primary"
+                  size="small"
+                  label
+                >
+                  Popular
+                </VChip>
+              </h6>
+              <p class="mb-0">
+                Standard plan for small to medium businesses
+              </p>
+            </VCol>
+
+            <VCol
+              cols="12"
+              md="6"
+              order-md="2"
+              order="1"
+            >
+              <!-- 👉 Alert -->
+              <VAlert
+                color="warning"
+                variant="tonal"
+              >
+                <VAlertTitle class="mb-1">
+                  We need your attention!
+                </VAlertTitle>
+                <div class="text-base">
+                  Your plan requires update
+                </div>
+              </VAlert>
+
+              <!-- 👉 Progress -->
+              <div class="d-flex justify-space-between font-weight-bold mt-4 mb-1">
+                <h6 class="text-h6">
+                  Days
+                </h6>
+                <h6 class="text-h6">
+                  26 of 30 Days
+                </h6>
+              </div>
+
+              <VProgressLinear
+                rounded
+                color="primary"
+                :height="10"
+                :model-value="75"
+              />
+              <p class="text-sm mt-1">
+                Your plan requires update
+              </p>
+            </VCol>
+
+            <VCol
+              cols="12"
+              order="3"
+            >
+              <div class="d-flex flex-wrap gap-4">
+                <VBtn @click="isUpgradePlanDialogVisible = true">
+                  upgrade plan
+                </VBtn>
+
+                <VBtn
+                  color="error"
+                  variant="tonal"
+                >
+                  Cancel Subscription
+                </VBtn>
+              </div>
+            </VCol>
+          </VRow>
+        </VCardText>
+      </VCard>
+    </VCol>
+
+    <!-- 👉 Payment Methods -->
+    <VCol cols="12">
+      <VCard title="Payment Methods">
+        <template #append>
+          <VBtn
+            prepend-icon="bx-plus"
+            size="small"
+            @click="isCardAddDialogVisible = !isCardAddDialogVisible"
+          >
+            Add Card
+          </VBtn>
+        </template>
+
+        <VCardText class="d-flex flex-column gap-y-4">
+          <VCard
+            v-for="card in creditCards"
+            :key="card.name"
+            border
+            flat
+          >
+            <VCardText class="d-flex flex-sm-row flex-column gap-6 justify-space-between">
+              <div class="text-no-wrap">
+                <img
+                  :src="card.image"
+                  :height="25"
+                >
+                <div class="my-2 d-flex gap-x-2 align-center">
+                  <h6 class="text-h6">
+                    {{ card.name }}
+                  </h6>
+                  <VChip
+                    v-if="card.isPrimary || card.isExpired"
+                    label
+                    :color="card.isPrimary ? 'primary' : card.isExpired ? 'error' : 'secondary'"
+                    size="small"
+                  >
+                    {{ card.isPrimary ? 'Popular' : card.isExpired ? 'Expired' : '' }}
+                  </VChip>
+                </div>
+                <div class="text-body-1">
+                  **** **** **** {{ card.number.substring(card.number.length - 4) }}
+                </div>
+              </div>
+
+              <div class="d-flex flex-column text-sm-end gap-y-4">
+                <div class="order-sm-0 order-1">
+                  <VBtn
+                    variant="tonal"
+                    size="small"
+                    class="me-4"
+                    @click="openEditCardDialog(card)"
+                  >
+                    Edit
+                  </VBtn>
+                  <VBtn
+                    color="error"
+                    variant="tonal"
+                    size="small"
+                  >
+                    Delete
+                  </VBtn>
+                </div>
+
+                <div class="order-sm-1 order-0 text-sm">
+                  Card expires at {{ card.expiry }}
+                </div>
+              </div>
+            </VCardText>
+          </VCard>
+        </VCardText>
+      </VCard>
+    </VCol>
+
+    <VCol cols="12">
+      <!-- 👉 Billing Address -->
+      <VCard title="Billing Address">
+        <template #append>
+          <VBtn
+            size="small"
+            prepend-icon="bx-plus"
+            @click="isEditAddressDialogVisible = !isEditAddressDialogVisible"
+          >
+            Edit Address
+          </VBtn>
+        </template>
+
+        <VCardText>
+          <VRow>
+            <VCol
+              cols="12"
+              lg="6"
+            >
+              <VTable class="billing-address-table">
+                <tr>
+                  <td>
+                    <h6 class="text-h6 text-no-wrap mb-2">
+                      Company Name:
+                    </h6>
+                  </td>
+                  <td>
+                    <p class="text-body-1 mb-2">
+                      {{ currentAddress.companyName }}
+                    </p>
+                  </td>
+                </tr>
+                <tr>
+                  <td>
+                    <h6 class="text-h6 text-no-wrap mb-2">
+                      Billing Email:
+                    </h6>
+                  </td>
+                  <td>
+                    <p class="text-body-1 mb-2">
+                      {{ currentAddress.billingEmail }}
+                    </p>
+                  </td>
+                </tr>
+                <tr>
+                  <td>
+                    <h6 class="text-h6 text-no-wrap mb-2">
+                      Tax ID:
+                    </h6>
+                  </td>
+                  <td>
+                    <p class="text-body-1 mb-2">
+                      {{ currentAddress.taxID }}
+                    </p>
+                  </td>
+                </tr>
+                <tr>
+                  <td>
+                    <h6 class="text-h6 text-no-wrap mb-2">
+                      VAT Number:
+                    </h6>
+                  </td>
+                  <td>
+                    <p class="text-body-1 mb-2">
+                      {{ currentAddress.vatNumber }}
+                    </p>
+                  </td>
+                </tr>
+                <tr>
+                  <td class="d-flex align-baseline">
+                    <h6 class="text-h6 text-no-wrap">
+                      Billing Address:
+                    </h6>
+                  </td>
+                  <td>
+                    <p class="text-body-1 mb-2">
+                      {{ currentAddress.address }}
+                    </p>
+                  </td>
+                </tr>
+              </VTable>
+            </VCol>
+
+            <VCol
+              cols="12"
+              lg="6"
+            >
+              <VTable class="billing-address-table">
+                <tr>
+                  <td>
+                    <h6 class="text-h6 text-no-wrap mb-2">
+                      Contact:
+                    </h6>
+                  </td>
+                  <td>
+                    <p class="text-body-1 mb-2">
+                      {{ currentAddress.contact }}
+                    </p>
+                  </td>
+                </tr>
+                <tr>
+                  <td>
+                    <h6 class="text-h6 text-no-wrap mb-2">
+                      Country:
+                    </h6>
+                  </td>
+                  <td>
+                    <p class="text-body-1 mb-2">
+                      {{ currentAddress.country }}
+                    </p>
+                  </td>
+                </tr>
+                <tr>
+                  <td>
+                    <h6 class="text-h6 text-no-wrap mb-2">
+                      State:
+                    </h6>
+                  </td>
+                  <td>
+                    <p class="text-body-1 mb-2">
+                      {{ currentAddress.state }}
+                    </p>
+                  </td>
+                </tr>
+                <tr>
+                  <td>
+                    <h6 class="text-h6 text-no-wrap mb-2">
+                      Zip Code:
+                    </h6>
+                  </td>
+                  <td>
+                    <p class="text-body-1 mb-2">
+                      {{ currentAddress.zipCode }}
+                    </p>
+                  </td>
+                </tr>
+              </VTable>
+            </VCol>
+          </VRow>
+        </VCardText>
+      </VCard>
+    </VCol>
+  </VRow>
+
+  <!-- 👉 Edit Card Dialog -->
+  <CardAddEditDialog
+    v-model:isDialogVisible="isCardEditDialogVisible"
+    :card-details="currentCardDetails"
+  />
+
+  <!-- 👉 Add Card Dialog -->
+  <CardAddEditDialog v-model:isDialogVisible="isCardAddDialogVisible" />
+
+  <!-- 👉 Edit Address dialog -->
+  <AddEditAddressDialog
+    v-model:isDialogVisible="isEditAddressDialogVisible"
+    :billing-address="currentBillingAddress"
+  />
+
+  <!-- 👉 Upgrade plan dialog -->
+  <UserUpgradePlanDialog v-model:isDialogVisible="isUpgradePlanDialogVisible" />
+</template>
+
+<style lang="scss">
+.billing-address-table {
+  tr {
+    td:first-child {
+      inline-size: 148px;
+    }
+  }
+}
+</style>
+
+
+
+===== File: /home/rogers/Code/Sneat-Test/resources/ts/views/apps/user/view/UserBioPanel.vue =====
+<script setup lang="ts">
+interface Props {
+  userData: {
+    id: number
+    fullName: string
+    firstName: string
+    lastName: string
+    company: string
+    username: string
+    role: string
+    country: string
+    contact: string
+    email: string
+    currentPlan: string
+    status: string
+    avatar: string
+    taskDone: number
+    projectDone: number
+    taxId: string
+    language: string
+  }
+}
+
+const props = defineProps<Props>()
+
+const standardPlan = {
+  plan: 'Standard',
+  price: 99,
+  benefits: ['10 Users', 'Up to 10GB storage', 'Basic Support'],
+}
+
+const isUserInfoEditDialogVisible = ref(false)
+const isUpgradePlanDialogVisible = ref(false)
+
+// 👉 Role variant resolver
+const resolveUserRoleVariant = (role: string) => {
+  if (role === 'subscriber')
+    return { color: 'warning', icon: 'bx-user' }
+  if (role === 'author')
+    return { color: 'success', icon: 'bx-check-circle' }
+  if (role === 'maintainer')
+    return { color: 'primary', icon: 'bx-pie-chart-alt' }
+  if (role === 'editor')
+    return { color: 'info', icon: 'bx-pencil' }
+  if (role === 'admin')
+    return { color: 'secondary', icon: 'bx-server' }
+
+  return { color: 'primary', icon: 'bx-user' }
+}
+</script>
+
+<template>
+  <VRow>
+    <!-- SECTION User Details -->
+    <VCol cols="12">
+      <VCard v-if="props.userData">
+        <VCardText class="text-center pt-12">
+          <!-- 👉 Avatar -->
+          <VAvatar
+            rounded
+            :size="120"
+            :color="!props.userData.avatar ? 'primary' : undefined"
+            :variant="!props.userData.avatar ? 'tonal' : undefined"
+          >
+            <VImg
+              v-if="props.userData.avatar"
+              :src="props.userData.avatar"
+            />
+            <span
+              v-else
+              class="text-5xl font-weight-medium"
+            >
+              {{ avatarText(props.userData.fullName) }}
+            </span>
+          </VAvatar>
+
+          <!-- 👉 User fullName -->
+          <h5 class="text-h5 mt-4">
+            {{ props.userData.fullName }}
+          </h5>
+
+          <!-- 👉 Role chip -->
+          <VChip
+            label
+            :color="resolveUserRoleVariant(props.userData.role).color"
+            size="small"
+            class="text-capitalize mt-4"
+          >
+            {{ props.userData.role }}
+          </VChip>
+        </VCardText>
+
+        <VCardText>
+          <div class="d-flex justify-space-around gap-x-6 gap-y-2 flex-wrap mb-6">
+            <!-- 👉 Done task -->
+            <div class="d-flex align-center me-8">
+              <VAvatar
+                :size="40"
+                rounded
+                color="primary"
+                variant="tonal"
+                class="me-4"
+              >
+                <VIcon
+                  icon="bx-check"
+                  size="24"
+                />
+              </VAvatar>
+              <div>
+                <h5 class="text-h5">
+                  {{ `${(props.userData.taskDone / 1000).toFixed(2)}k` }}
+                </h5>
+
+                <span class="text-body-1 d-inline-block">Task Done</span>
+              </div>
+            </div>
+
+            <!-- 👉 Done Project -->
+            <div class="d-flex align-center me-4">
+              <VAvatar
+                :size="38"
+                rounded
+                color="primary"
+                variant="tonal"
+                class="me-4"
+              >
+                <VIcon
+                  icon="bx-customize"
+                  size="24"
+                />
+              </VAvatar>
+              <div>
+                <h5 class="text-h5">
+                  {{ kFormatter(props.userData.projectDone) }}
+                </h5>
+                <span class="text-body-1 d-inline-block">Project Done</span>
+              </div>
+            </div>
+          </div>
+
+          <!-- 👉 Details -->
+          <h5 class="text-h5">
+            Details
+          </h5>
+
+          <VDivider class="my-4" />
+
+          <!-- 👉 User Details list -->
+          <VList class="card-list mt-2">
+            <VListItem>
+              <VListItemTitle>
+                <h6 class="text-h6">
+                  Username:
+                  <div class="d-inline-block text-body-1">
+                    {{ props.userData.fullName }}
+                  </div>
+                </h6>
+              </VListItemTitle>
+            </VListItem>
+
+            <VListItem>
+              <VListItemTitle>
+                <h6 class="text-h6">
+                  Billing Email:
+                  <span class="text-body-1 d-inline-block">
+                    {{ props.userData.email }}
+                  </span>
+                </h6>
+              </VListItemTitle>
+            </VListItem>
+
+            <VListItem>
+              <VListItemTitle>
+                <h6 class="text-h6">
+                  Status:
+                  <div class="d-inline-block text-body-1 text-capitalize">
+                    {{ props.userData.status }}
+                  </div>
+                </h6>
+              </VListItemTitle>
+            </VListItem>
+
+            <VListItem>
+              <VListItemTitle>
+                <h6 class="text-h6">
+                  Role:
+                  <div class="d-inline-block text-capitalize text-body-1">
+                    {{ props.userData.role }}
+                  </div>
+                </h6>
+              </VListItemTitle>
+            </VListItem>
+
+            <VListItem>
+              <VListItemTitle>
+                <h6 class="text-h6">
+                  Tax ID:
+                  <div class="d-inline-block text-body-1">
+                    {{ props.userData.taxId }}
+                  </div>
+                </h6>
+              </VListItemTitle>
+            </VListItem>
+
+            <VListItem>
+              <VListItemTitle>
+                <h6 class="text-h6">
+                  Contact:
+                  <div class="d-inline-block text-body-1">
+                    {{ props.userData.contact }}
+                  </div>
+                </h6>
+              </VListItemTitle>
+            </VListItem>
+
+            <VListItem>
+              <VListItemTitle>
+                <h6 class="text-h6">
+                  Language:
+                  <div class="d-inline-block text-body-1">
+                    {{ props.userData.language }}
+                  </div>
+                </h6>
+              </VListItemTitle>
+            </VListItem>
+
+            <VListItem>
+              <VListItemTitle>
+                <h6 class="text-h6">
+                  Country:
+                  <div class="d-inline-block text-body-1">
+                    {{ props.userData.country }}
+                  </div>
+                </h6>
+              </VListItemTitle>
+            </VListItem>
+          </VList>
+        </VCardText>
+
+        <!-- 👉 Edit and Suspend button -->
+        <VCardText class="d-flex justify-center gap-x-4">
+          <VBtn
+            variant="elevated"
+            @click="isUserInfoEditDialogVisible = true"
+          >
+            Edit
+          </VBtn>
+
+          <VBtn
+            variant="tonal"
+            color="error"
+          >
+            Suspend
+          </VBtn>
+        </VCardText>
+      </VCard>
+    </VCol>
+    <!-- !SECTION -->
+
+    <!-- SECTION Current Plan -->
+    <VCol cols="12">
+      <VCard class="current-plan">
+        <VCardText class="d-flex">
+          <!-- 👉 Standard Chip -->
+          <VChip
+            label
+            color="primary"
+            size="small"
+            class="font-weight-medium"
+          >
+            Popular
+          </VChip>
+
+          <VSpacer />
+
+          <!-- 👉 Current Price  -->
+          <div class="d-flex align-center">
+            <sup class="text-h5 text-primary mt-1">$</sup>
+            <h1 class="text-h1 text-primary">
+              99
+            </h1>
+            <sub class="mt-3"><h6 class="text-h6 font-weight-regular mb-n1">/ month</h6></sub>
+          </div>
+        </VCardText>
+
+        <VCardText>
+          <!-- 👉 Price Benefits -->
+          <VList class="card-list">
+            <VListItem
+              v-for="benefit in standardPlan.benefits"
+              :key="benefit"
+            >
+              <div class="d-flex align-center gap-x-2">
+                <VIcon
+                  size="6"
+                  color="secondary"
+                  icon="bx-bxs-circle"
+                />
+                <div class="text-medium-emphasis">
+                  {{ benefit }}
+                </div>
+              </div>
+            </VListItem>
+          </VList>
+
+          <!-- 👉 Days -->
+          <div class="my-6">
+            <div class="d-flex justify-space-between mb-1">
+              <h6 class="text-h6">
+                Days
+              </h6>
+              <h6 class="text-h6">
+                26 of 30 Days
+              </h6>
+            </div>
+
+            <!-- 👉 Progress -->
+            <VProgressLinear
+              rounded
+              rounded-bar
+              :model-value="65"
+              color="primary"
+            />
+
+            <p class="mt-1 text-body-2 mb-0">
+              4 days remaining
+            </p>
+          </div>
+
+          <!-- 👉 Upgrade Plan -->
+          <div class="d-flex gap-4">
+            <VBtn
+              block
+              @click="isUpgradePlanDialogVisible = true"
+            >
+              Upgrade Plan
+            </VBtn>
+          </div>
+        </VCardText>
+      </VCard>
+    </VCol>
+    <!-- !SECTION -->
+  </VRow>
+
+  <!-- 👉 Edit user info dialog -->
+  <UserInfoEditDialog
+    v-model:isDialogVisible="isUserInfoEditDialogVisible"
+    :user-data="props.userData"
+  />
+
+  <!-- 👉 Upgrade plan dialog -->
+  <UserUpgradePlanDialog v-model:isDialogVisible="isUpgradePlanDialogVisible" />
+</template>
+
+<style lang="scss" scoped>
+@use "@core-scss/template/mixins" as templateMixins;
+
+.card-list {
+  --v-card-list-gap: 0.5rem;
+}
+
+.current-plan {
+  border: 2px solid rgb(var(--v-theme-primary));
+
+  @include templateMixins.custom-elevation(var(--v-theme-primary), "sm");
+}
+
+.text-capitalize {
+  text-transform: capitalize !important;
+}
+</style>
+
+
+
+===== File: /home/rogers/Code/Sneat-Test/resources/ts/views/apps/user/view/UserTabAccount.vue =====
+<script lang="ts" setup>
+import UserInvoiceTable from './UserInvoiceTable.vue'
+
+// Images
+import avatar1 from '@images/avatars/avatar-1.png'
+import avatar2 from '@images/avatars/avatar-2.png'
+import avatar3 from '@images/avatars/avatar-3.png'
+import avatar4 from '@images/avatars/avatar-4.png'
+import avatar5 from '@images/avatars/avatar-5.png'
+import avatar6 from '@images/avatars/avatar-6.png'
+import avatar7 from '@images/avatars/avatar-7.png'
+import avatar8 from '@images/avatars/avatar-8.png'
+import figma from '@images/icons/project-icons/figma.png'
+import html5 from '@images/icons/project-icons/html5.png'
+import pdf from '@images/icons/project-icons/pdf.png'
+import python from '@images/icons/project-icons/python.png'
+import react from '@images/icons/project-icons/react.png'
+import sketch from '@images/icons/project-icons/sketch.png'
+import vue from '@images/icons/project-icons/vue.png'
+import xamarin from '@images/icons/project-icons/xamarin.png'
+
+// Project Table Header
+const projectTableHeaders = [
+  { title: 'PROJECT', key: 'project' },
+  { title: 'LEADER', key: 'leader' },
+  { title: 'Team', key: 'team' },
+  { title: 'PROGRESS', key: 'progress' },
+  { title: 'Action', key: 'Action', sortable: false },
+]
+
+const search = ref('')
+
+const options = ref({ itemsPerPage: 5, page: 1 })
+
+const projects = [
+  {
+    logo: react,
+    name: 'BGC eCommerce App',
+    project: 'React Project',
+    leader: 'Eileen',
+    progress: 78,
+    hours: '18:42',
+    team: [avatar1, avatar8, avatar6],
+    extraMembers: 3,
+  },
+  {
+    logo: figma,
+    name: 'Falcon Logo Design',
+    project: 'Figma Project',
+    leader: 'Owen',
+    progress: 25,
+    hours: '20:42',
+    team: [avatar5, avatar2],
+  },
+  {
+    logo: vue,
+    name: 'Dashboard Design',
+    project: 'Vuejs Project',
+    leader: 'Keith',
+    progress: 62,
+    hours: '120:87',
+    team: [avatar8, avatar2, avatar1],
+  },
+  {
+    logo: xamarin,
+    name: 'Foodista mobile app',
+    project: 'Xamarin Project',
+    leader: 'Merline',
+    progress: 8,
+    hours: '120:87',
+    team: [avatar3, avatar4, avatar7],
+    extraMembers: 8,
+  },
+  {
+    logo: python,
+    name: 'Dojo Email App',
+    project: 'Python Project',
+    leader: 'Harmonia',
+    progress: 51,
+    hours: '230:10',
+    team: [avatar4, avatar3, avatar1],
+    extraMembers: 5,
+  },
+  {
+    logo: sketch,
+    name: 'Blockchain Website',
+    project: 'Sketch Project',
+    leader: 'Allyson',
+    progress: 92,
+    hours: '342:41',
+    team: [avatar1, avatar8],
+  },
+  {
+    logo: html5,
+    name: 'Hoffman Website',
+    project: 'HTML Project',
+    leader: 'Georgie',
+    progress: 80,
+    hours: '12:45',
+    team: [avatar1, avatar8, avatar6],
+  },
+]
+
+const moreList = [
+  { title: 'Download', value: 'Download' },
+  { title: 'Delete', value: 'Delete' },
+  { title: 'View', value: 'View' },
+]
+</script>
+
+<template>
+  <VRow>
+    <VCol cols="12">
+      <VCard title="Projects List">
+        <VCardItem class="pt-0">
+          <div class="d-flex justify-space-between align-center flex-wrap gap-4">
+            <AppSelect
+              :model-value="options.itemsPerPage"
+              :items="[
+                { value: 5, title: '5' },
+                { value: 10, title: '10' },
+                { value: 25, title: '25' },
+                { value: -1, title: 'All' },
+              ]"
+              style="inline-size: 5rem;"
+              @update:model-value="options.itemsPerPage = parseInt($event, 10)"
+            />
+            <div style="inline-size: 250px;">
+              <AppTextField
+                v-model="search"
+                placeholder="Search Project"
+              />
+            </div>
+          </div>
+        </VCardItem>
+        <VDivider />
+        <!-- 👉 User Project List Table -->
+
+        <!-- SECTION Datatable -->
+
+        <VDataTable
+          v-model:page="options.page"
+          :headers="projectTableHeaders"
+          :items-per-page="options.itemsPerPage"
+          :items="projects"
+          item-value="name"
+          hide-default-footer
+          :search="search"
+          show-select
+          class="text-no-wrap"
+        >
+          <!-- projects -->
+          <template #item.project="{ item }">
+            <div class="d-flex align-center gap-x-3">
+              <VAvatar
+                :size="34"
+                :image="item.logo"
+              />
+              <div>
+                <h6 class="text-h6 text-no-wrap">
+                  {{ item.name }}
+                </h6>
+                <div class="text-body-2">
+                  {{ item.project }}
+                </div>
+              </div>
+            </div>
+          </template>
+
+          <template #item.leader="{ item }">
+            <div class="text-base text-high-emphasis">
+              {{ item.leader }}
+            </div>
+          </template>
+
+          <!-- Team -->
+          <template #item.team="{ item }">
+            <div class="d-flex">
+              <div class="v-avatar-group">
+                <VAvatar
+                  v-for="(data, index) in item.team"
+                  :key="index"
+                  size="26"
+                >
+                  <VImg :src="data" />
+                </VAvatar>
+                <VAvatar
+                  v-if="item.extraMembers"
+                  :color="$vuetify.theme.current.dark ? '#373b50' : '#eeedf0'"
+                  :size="26"
+                >
+                  <div class="text-caption text-high-emphasis">
+                    +{{ item.extraMembers }}
+                  </div>
+                </VAvatar>
+              </div>
+            </div>
+          </template>
+
+          <!-- Progress -->
+          <template #item.progress="{ item }">
+            <div class="d-flex align-center gap-3">
+              <div class="flex-grow-1">
+                <VProgressLinear
+                  :height="6"
+                  :model-value="item.progress"
+                  color="primary"
+                  rounded
+                />
+              </div>
+              <div class="text-body-1 text-high-emphasis">
+                {{ item.progress }}%
+              </div>
+            </div>
+          </template>
+
+          <!-- Action -->
+          <template #item.Action>
+            <MoreBtn
+              :menu-list="moreList"
+              class="text-medium-emphasis"
+            />
+          </template>
+
+          <!-- TODO Refactor this after vuetify provides proper solution for removing default footer -->
+          <template #bottom>
+            <TablePagination
+              v-model:page="options.page"
+              :items-per-page="options.itemsPerPage"
+              :total-items="projects.length"
+            />
+          </template>
+        </VDataTable>
+        <!-- !SECTION -->
+      </VCard>
+    </VCol>
+
+    <VCol cols="12">
+      <!-- 👉 User Activity timeline -->
+      <VCard title="User Activity Timeline">
+        <VCardText>
+          <VTimeline
+            side="end"
+            align="start"
+            line-inset="9"
+            truncate-line="start"
+            density="compact"
+          >
+            <!-- SECTION Timeline Item: Flight -->
+            <VTimelineItem
+              dot-color="primary"
+              size="x-small"
+            >
+              <!-- 👉 Header -->
+              <div class="d-flex justify-space-between align-center gap-2 flex-wrap mb-3">
+                <span class="app-timeline-title">
+                  12 Invoices have been paid
+                </span>
+                <span class="app-timeline-meta">12 min ago</span>
+              </div>
+
+              <!-- 👉 Content -->
+              <div class="app-timeline-text">
+                Invoices have been paid to the company
+              </div>
+
+              <div class="d-inline-flex align-center timeline-chip mt-2">
+                <img
+                  :src="pdf"
+                  height="20"
+                  class="me-2"
+                  alt="img"
+                >
+                <span class="app-timeline-text font-weight-medium">
+                  invoice.pdf
+                </span>
+              </div>
+            </VTimelineItem>
+            <!-- !SECTION -->
+
+            <!-- SECTION Timeline Item: Interview Schedule -->
+            <VTimelineItem
+              size="x-small"
+              dot-color="success"
+            >
+              <!-- 👉 Header -->
+              <div class="d-flex justify-space-between align-center flex-wrap mb-3">
+                <div class="app-timeline-title">
+                  Client Meeting
+                </div>
+                <span class="app-timeline-meta">45 min ago</span>
+              </div>
+
+              <div class="app-timeline-text">
+                Project meeting with john @10:15am
+              </div>
+
+              <!-- 👉 Person -->
+              <div class="d-flex justify-space-between align-center flex-wrap">
+                <!-- 👉 Avatar & Personal Info -->
+                <div class="d-flex align-center mt-2">
+                  <VAvatar
+                    size="32"
+                    class="me-2"
+                    :image="avatar1"
+                  />
+                  <div class="d-flex flex-column">
+                    <p class="text-sm font-weight-medium text-medium-emphasis mb-0">
+                      Lester McCarthy (Client)
+                    </p>
+                    <span class="text-sm">CEO of ThemeSelection</span>
+                  </div>
+                </div>
+              </div>
+            </VTimelineItem>
+            <!-- !SECTION -->
+
+            <!-- SECTION Design Review -->
+            <VTimelineItem
+              size="x-small"
+              dot-color="info"
+            >
+              <!-- 👉 Header -->
+              <div class="d-flex justify-space-between align-center flex-wrap mb-3">
+                <span class="app-timeline-title">
+                  Create a new project for client
+                </span>
+                <span class="app-timeline-meta">2 Day Ago</span>
+              </div>
+
+              <!-- 👉 Content -->
+              <p class="app-timeline-text mb-2">
+                6 team members in a project
+              </p>
+
+              <div class="v-avatar-group demo-avatar-group">
+                <VAvatar :size="38">
+                  <VImg :src="avatar1" />
+                  <VTooltip
+                    activator="parent"
+                    location="top"
+                  >
+                    John Doe
+                  </VTooltip>
+                </VAvatar>
+
+                <VAvatar :size="38">
+                  <VImg :src="avatar2" />
+                  <VTooltip
+                    activator="parent"
+                    location="top"
+                  >
+                    Jennie Obrien
+                  </VTooltip>
+                </VAvatar>
+
+                <VAvatar :size="38">
+                  <VImg :src="avatar3" />
+                  <VTooltip
+                    activator="parent"
+                    location="top"
+                  >
+                    Peter Harper
+                  </VTooltip>
+                </VAvatar>
+
+                <VAvatar
+                  :size="38"
+                  :color="$vuetify.theme.current.dark ? '#373b50' : '#eeedf0'"
+                >
+                  +3
+                </VAvatar>
+              </div>
+            </VTimelineItem>
+            <!-- !SECTION -->
+          </VTimeline>
+        </VCardText>
+      </VCard>
+    </VCol>
+
+    <VCol cols="12">
+      <UserInvoiceTable />
+    </VCol>
+  </VRow>
+</template>
+
+
+
+===== File: /home/rogers/Code/Sneat-Test/resources/ts/views/apps/user/view/UserTabConnections.vue =====
+<script lang="ts" setup>
+import asana from '@images/icons/brands/asana.png'
+import behance from '@images/icons/brands/behance.png'
+import dribbble from '@images/icons/brands/dribbble.png'
+import facebook from '@images/icons/brands/facebook.png'
+import github from '@images/icons/brands/github.png'
+import google from '@images/icons/brands/google.png'
+import linkedin from '@images/icons/brands/linkedin.png'
+import mailchimp from '@images/icons/brands/mailchimp.png'
+import slack from '@images/icons/brands/slack.png'
+import twitter from '@images/icons/brands/twitter.png'
+
+const connectedAccounts = ref([
+  {
+    img: google,
+    title: 'Google',
+    text: 'Calendar and contacts',
+    connected: true,
+  },
+  {
+    img: slack,
+    title: 'Slack',
+    text: 'Communication',
+    connected: false,
+  },
+  {
+    img: github,
+    title: 'GitHub',
+    text: 'Manage your Git repositories',
+    connected: true,
+  },
+  {
+    img: mailchimp,
+    title: 'Mailchimp',
+    text: 'Email marketing service',
+    connected: false,
+  },
+  {
+    img: asana,
+    title: 'Asana',
+    text: 'Communication',
+    connected: false,
+  },
+])
+
+const socialAccounts = ref([
+  {
+    img: facebook,
+    title: 'Facebook',
+    connected: false,
+  },
+  {
+    img: twitter,
+    title: 'Twitter',
+    link: 'https://twitter.com/Theme_Selection',
+    username: '@Themeselection',
+    connected: true,
+  },
+  {
+    img: linkedin,
+    title: 'LinkedIn',
+    link: 'https://in.linkedin.com/company/themeselection',
+    username: '@Themeselection',
+    connected: true,
+  },
+  {
+    img: dribbble,
+    title: 'Dribbble',
+    connected: false,
+  },
+  {
+    img: behance,
+    title: 'Behance',
+    connected: false,
+  },
+])
+</script>
+
+<template>
+  <VRow>
+    <!-- 👉 connected accounts -->
+    <VCol cols="12">
+      <VCard
+        title="Connected Accounts"
+        subtitle="Display content from your connected accounts on your site"
+      >
+        <VCardText>
+          <VList class="card-list">
+            <VListItem
+              v-for="account in connectedAccounts"
+              :key="account.title"
+              :subtitle="account.text"
+            >
+              <template #title>
+                <h6 class="text-h6">
+                  {{ account.title }}
+                </h6>
+              </template>
+              <template #prepend>
+                <VAvatar
+                  start
+                  :size="36"
+                  :image="account.img"
+                  rounded
+                  class="me-1"
+                />
+              </template>
+
+              <template #append>
+                <VSwitch
+                  v-model="account.connected"
+                  density="compact"
+                  class="me-1"
+                />
+              </template>
+            </VListItem>
+          </VList>
+        </VCardText>
+      </VCard>
+    </VCol>
+
+    <!-- 👉 social accounts -->
+    <VCol cols="12">
+      <VCard
+        title="Social Accounts"
+        subtitle="Display content from social accounts on your site"
+      >
+        <VCardText>
+          <VList class="card-list">
+            <VListItem
+              v-for="(account) in socialAccounts"
+              :key="account.title"
+            >
+              <h6 class="text-h6">
+                {{ account.title }}
+              </h6>
+              <template #prepend>
+                <VAvatar
+                  start
+                  size="36"
+                  rounded="0"
+                  class="me-1"
+                  :image="account.img"
+                />
+              </template>
+
+              <VListItemSubtitle v-if="account.connected">
+                <a
+                  :href="account.link"
+                  target="_blank"
+                  rel="noopener noreferrer"
+                >
+                  {{ account.username }}
+                </a>
+              </VListItemSubtitle>
+
+              <VListItemSubtitle v-else>
+                Not connected
+              </VListItemSubtitle>
+
+              <template #append>
+                <IconBtn
+                  variant="tonal"
+                  :color="account.connected ? 'error' : 'secondary'"
+                  class="rounded"
+                >
+                  <VIcon :icon="account.connected ? 'bx-trash' : 'bx-link'" />
+                </IconBtn>
+              </template>
+            </VListItem>
+          </VList>
+        </VCardText>
+      </VCard>
+    </VCol>
+  </VRow>
+</template>
+
+<style lang="scss" scoped>
+.card-list {
+  --v-card-list-gap: 16px;
+}
+</style>
+
+
+
+===== File: /home/rogers/Code/Sneat-Test/resources/ts/views/apps/user/view/UserInvoiceTable.vue =====
+<script setup lang="ts">
+import type { Invoice } from '@db/apps/invoice/types'
+
+const searchQuery = ref('')
+const selectedStatus = ref()
+
+// Data table options
+const itemsPerPage = ref(10)
+const page = ref(1)
+const sortBy = ref()
+const orderBy = ref()
+
+// Update data table options
+const updateOptions = (options: any) => {
+  sortBy.value = options.sortBy[0]?.key
+  orderBy.value = options.sortBy[0]?.order
+}
+
+const isLoading = ref(false)
+
+// 👉 headers
+const headers = [
+  { title: '#', key: 'id' },
+  { title: 'Status', key: 'trending', sortable: false },
+  { title: 'Total', key: 'total' },
+  { title: 'Issued Date', key: 'date' },
+  { title: 'Actions', key: 'actions', sortable: false },
+]
+
+// 👉 Fetch Invoices
+const { data: invoiceData, execute: fetchInvoices } = await useApi<any>(createUrl('/apps/invoice', {
+  query: {
+    q: searchQuery,
+    status: selectedStatus,
+    itemsPerPage,
+    page,
+    sortBy,
+    orderBy,
+  },
+}))
+
+const invoices = computed((): Invoice[] => invoiceData.value?.invoices)
+const totalInvoices = computed(() => invoiceData.value?.totalInvoices)
+
+// 👉 Invoice status variant resolver
+const resolveInvoiceStatusVariantAndIcon = (status: string) => {
+  if (status === 'Partial Payment')
+    return { variant: 'success', icon: 'bx-check' }
+  if (status === 'Paid')
+    return { variant: 'warning', icon: 'bx-pie-chart-alt' }
+  if (status === 'Downloaded')
+    return { variant: 'info', icon: 'bx-down-arrow-alt' }
+  if (status === 'Draft')
+    return { variant: 'primary', icon: 'bx-folder' }
+  if (status === 'Sent')
+    return { variant: 'secondary', icon: 'bx-envelope' }
+  if (status === 'Past Due')
+    return { variant: 'error', icon: 'bx-error-circle' }
+
+  return { variant: 'secondary', icon: 'bx-x' }
+}
+
+const computedMoreList = computed(() => {
+  return (paramId: number) => ([
+    { title: 'Download', value: 'download', prependIcon: 'bx-download' },
+    {
+      title: 'Edit',
+      value: 'edit',
+      prependIcon: 'bx-pencil',
+      to: { name: 'apps-invoice-edit-id', params: { id: paramId } },
+    },
+    { title: 'Duplicate', value: 'duplicate', prependIcon: 'bx-duplicate' },
+  ])
+})
+
+// 👉 Delete Invoice
+// 👉 Delete Invoice
+const deleteInvoice = async (id: number) => {
+  await $api(`/apps/invoice/${id}`, { method: 'DELETE' })
+
+  fetchInvoices()
+}
+</script>
+
+<template>
+  <section v-if="invoices">
+    <VCard id="invoice-list">
+      <VCardText>
+        <div class="d-flex align-center justify-space-between flex-wrap gap-4">
+          <div class="text-h5">
+            Invoice List
+          </div>
+          <div class="d-flex align-center gap-x-4">
+            <AppSelect
+              :model-value="itemsPerPage"
+              :items="[
+                { value: 10, title: '10' },
+                { value: 25, title: '25' },
+                { value: 50, title: '50' },
+                { value: 100, title: '100' },
+                { value: -1, title: 'All' },
+              ]"
+              style="inline-size: 6.25rem;"
+              @update:model-value="itemsPerPage = parseInt($event, 10)"
+            />
+
+            <!-- 👉 Export invoice -->
+            <VBtn
+              append-icon="bx-export"
+              variant="tonal"
+              color="secondary"
+            >
+              Export
+            </VBtn>
+          </div>
+        </div>
+      </VCardText>
+
+      <VDivider />
+
+      <!-- SECTION Datatable -->
+      <VDataTableServer
+        v-model:items-per-page="itemsPerPage"
+        v-model:page="page"
+        :loading="isLoading"
+        :items-length="totalInvoices"
+        :headers="headers"
+        :items="invoices"
+        item-value="total"
+        class="text-no-wrap text-sm rounded-0"
+        @update:options="updateOptions"
+      >
+        <!-- id -->
+        <template #item.id="{ item }">
+          <RouterLink :to="{ name: 'apps-invoice-preview-id', params: { id: item.id } }">
+            #{{ item.id }}
+          </RouterLink>
+        </template>
+
+        <!-- trending -->
+        <template #item.trending="{ item }">
+          <VTooltip>
+            <template #activator="{ props }">
+              <VAvatar
+                :size="28"
+                v-bind="props"
+                :color="resolveInvoiceStatusVariantAndIcon(item.invoiceStatus).variant"
+                variant="tonal"
+              >
+                <VIcon
+                  :size="16"
+                  :icon="resolveInvoiceStatusVariantAndIcon(item.invoiceStatus).icon"
+                />
+              </VAvatar>
+            </template>
+            <p class="mb-0">
+              {{ item.invoiceStatus }}
+            </p>
+            <p class="mb-0">
+              Balance: {{ item.balance }}
+            </p>
+            <p class="mb-0">
+              Due date: {{ item.dueDate }}
+            </p>
+          </VTooltip>
+        </template>
+
+        <!-- Total -->
+        <template #item.total="{ item }">
+          ${{ item.total }}
+        </template>
+
+        <!-- issued Date -->
+        <template #item.date="{ item }">
+          {{ item.issuedDate }}
+        </template>
+
+        <!-- Actions -->
+        <template #item.actions="{ item }">
+          <IconBtn @click="deleteInvoice(item.id)">
+            <VIcon icon="bx-trash" />
+          </IconBtn>
+
+          <IconBtn :to="{ name: 'apps-invoice-preview-id', params: { id: item.id } }">
+            <VIcon icon="bx-show" />
+          </IconBtn>
+
+          <MoreBtn
+            :menu-list="computedMoreList(item.id)"
+            item-props
+            class="text-medium-emphasis"
+          />
+        </template>
+        <template #bottom>
+          <TablePagination
+            v-model:page="page"
+            :items-per-page="itemsPerPage"
+            :total-items="totalInvoices"
+          />
+        </template>
+      </VDataTableServer>
+      <!-- !SECTION -->
+    </VCard>
+  </section>
+</template>
+
+<style lang="scss">
+#invoice-list {
+  .invoice-list-actions {
+    inline-size: 8rem;
+  }
+
+  .invoice-list-search {
+    inline-size: 12rem;
+  }
+}
+</style>
+
+
+
+===== File: /home/rogers/Code/Sneat-Test/resources/ts/views/apps/user/view/UserTabNotifications.vue =====
+<script lang="ts" setup>
+const notifications = ref([
+  {
+    type: 'New for you',
+    email: true,
+    browser: false,
+    app: false,
+  },
+  {
+    type: 'Account activity',
+    email: false,
+    browser: true,
+    app: true,
+  },
+  {
+    type: 'A new browser used to sign in',
+    email: true,
+    browser: true,
+    app: true,
+  },
+  {
+    type: 'A new device is linked',
+    email: false,
+    browser: true,
+    app: false,
+  },
+])
+</script>
+
+<template>
+  <VCard
+    class="user-tab-notification"
+    title="Notifications"
+    subtitle="You will receive notification for the below selected items."
+  >
+    <VCardText class="px-0">
+      <VDivider />
+      <VTable class="text-no-wrap">
+        <thead>
+          <tr>
+            <th scope="col">
+              TYPE
+            </th>
+            <th scope="col">
+              EMAIL
+            </th>
+            <th scope="col">
+              BROWSER
+            </th>
+            <th scope="col">
+              APP
+            </th>
+          </tr>
+        </thead>
+
+        <tbody>
+          <tr
+            v-for="notification in notifications"
+            :key="notification.type"
+          >
+            <td class="text-high-emphasis">
+              {{ notification.type }}
+            </td>
+            <td>
+              <VCheckbox v-model="notification.email" />
+            </td>
+            <td>
+              <VCheckbox v-model="notification.browser" />
+            </td>
+            <td>
+              <VCheckbox v-model="notification.app" />
+            </td>
+          </tr>
+        </tbody>
+      </VTable>
+      <VDivider />
+    </VCardText>
+
+    <VCardText class="d-flex flex-wrap gap-4">
+      <VBtn>Save changes</VBtn>
+      <VBtn
+        color="secondary"
+        variant="tonal"
+      >
+        Discard
+      </VBtn>
+    </VCardText>
+  </VCard>
+</template>
+
+
+
+===== File: /home/rogers/Code/Sneat-Test/resources/ts/views/apps/user/view/UserTabSecurity.vue =====
+<script setup lang="ts">
+const isNewPasswordVisible = ref(false)
+const isConfirmPasswordVisible = ref(false)
+const smsVerificationNumber = ref('+1(968) 819-2547')
+const isTwoFactorDialogOpen = ref(false)
+
+// Recent devices Headers
+const recentDeviceHeader = [
+  { title: 'BROWSER', key: 'browser' },
+  { title: 'DEVICE', key: 'device' },
+  { title: 'LOCATION', key: 'location' },
+  { title: 'RECENT ACTIVITY', key: 'activity' },
+]
+
+const recentDevices = [
+  {
+    browser: ' Chrome on Windows',
+    icon: 'bx-bxl-windows',
+    color: 'info',
+    device: 'HP Spectre 360',
+    location: 'Switzerland',
+    activity: '10, July 2021 20:07',
+  },
+  {
+    browser: 'Chrome on Android',
+    icon: 'bx-bxl-android',
+    color: 'success',
+    device: 'Oneplus 9 Pro',
+    location: 'Dubai',
+    activity: '14, July 2021 15:15',
+  },
+  {
+    browser: 'Chrome on macOS',
+    icon: 'bx-bxl-apple',
+    color: 'secondary',
+    device: 'Apple iMac',
+    location: 'India',
+    activity: '16, July 2021 16:17',
+  },
+  {
+    browser: 'Chrome on iPhone',
+    icon: 'bx-mobile-alt',
+    color: 'error',
+    device: 'iPhone 12x',
+    location: 'Australia',
+    activity: '13, July 2021 10:10',
+  },
+
+]
+</script>
+
+<template>
+  <VRow>
+    <VCol cols="12">
+      <!-- 👉 Change password -->
+      <VCard title="Change Password">
+        <VCardText>
+          <VAlert
+            closable
+            variant="tonal"
+            color="warning"
+            class="mb-4"
+            title="Ensure that these requirements are met"
+            text="Minimum 8 characters long, uppercase & symbol"
+          />
+
+          <VForm @submit.prevent="() => { }">
+            <VRow>
+              <VCol
+                cols="12"
+                md="6"
+              >
+                <AppTextField
+                  label="New Password"
+                  placeholder="············"
+                  :type="isNewPasswordVisible ? 'text' : 'password'"
+                  :append-inner-icon="isNewPasswordVisible ? 'bx-hide' : 'bx-show'"
+                  @click:append-inner="isNewPasswordVisible = !isNewPasswordVisible"
+                />
+              </VCol>
+              <VCol
+                cols="12"
+                md="6"
+              >
+                <AppTextField
+                  label="Confirm Password"
+                  placeholder="············"
+                  :type="isConfirmPasswordVisible ? 'text' : 'password'"
+                  :append-inner-icon="isConfirmPasswordVisible ? 'bx-hide' : 'bx-show'"
+                  @click:append-inner="isConfirmPasswordVisible = !isConfirmPasswordVisible"
+                />
+              </VCol>
+            </VRow>
+
+            <VBtn
+              type="submit"
+              class="mt-4"
+            >
+              Change Password
+            </VBtn>
+          </VForm>
+        </VCardText>
+      </VCard>
+    </VCol>
+
+    <VCol cols="12">
+      <!-- 👉 Two step verification -->
+      <VCard
+        title="Two-steps verification"
+        subtitle="Keep your account secure with authentication step."
+      >
+        <VCardText>
+          <div class="text-h6 mb-1">
+            SMS
+          </div>
+          <AppTextField placeholder="+1(968) 819-2547">
+            <template #append>
+              <IconBtn color="secondary">
+                <VIcon
+                  icon="bx-edit"
+                  size="22"
+                />
+              </IconBtn>
+              <IconBtn color="secondary">
+                <VIcon
+                  icon="bx-user-plus"
+                  size="22"
+                />
+              </IconBtn>
+            </template>
+          </AppTextField>
+
+          <p class="mb-0 mt-4">
+            Two-factor authentication adds an additional layer of security to your account by requiring more than just a password to log in. <a
+              href="javascript:void(0)"
+              class="text-decoration-none"
+            >Learn more</a>.
+          </p>
+        </VCardText>
+      </VCard>
+    </VCol>
+
+    <VCol cols="12">
+      <!-- 👉 Recent devices -->
+
+      <VCard title="Recent devices">
+        <VDivider />
+        <VDataTable
+          :items="recentDevices"
+          :headers="recentDeviceHeader"
+          hide-default-footer
+          class="text-no-wrap"
+        >
+          <template #item.browser="{ item }">
+            <div class="d-flex align-center gap-x-4">
+              <VIcon
+                :icon="item.icon"
+                :color="item.color"
+                :size="22"
+              />
+              <div class="text-body-1 text-high-emphasis">
+                {{ item.browser }}
+              </div>
+            </div>
+          </template>
+          <!-- TODO Refactor this after vuetify provides proper solution for removing default footer -->
+          <template #bottom />
+        </VDataTable>
+      </VCard>
+    </VCol>
+  </VRow>
+
+  <!-- 👉 Enable One Time Password Dialog -->
+  <TwoFactorAuthDialog
+    v-model:isDialogVisible="isTwoFactorDialogOpen"
+    :sms-code="smsVerificationNumber"
+  />
+</template>
+
+
+
+===== File: /home/rogers/Code/Sneat-Test/resources/ts/views/apps/user/list/AddNewUserDrawer.vue =====
+<script setup lang="ts">
+import { computed, nextTick, onMounted, ref } from 'vue'
+import { PerfectScrollbar } from 'vue3-perfect-scrollbar'
+import { VSelect } from 'vuetify/components/VSelect'
+
+import type { VForm } from 'vuetify/components/VForm'
+
+interface Emit {
+  (e: 'update:isDrawerOpen', value: boolean): void
+  (e: 'userData', value: any): void
+}
+
+interface Props {
+  isDrawerOpen: boolean
+}
+
+interface Company {
+  id: number
+  name: string
+}
+
+interface Role {
+  id: number
+  name: string
+}
+
+const props = defineProps<Props>()
+const emit = defineEmits<Emit>()
+
+const isFormValid = ref(false)
+const refForm = ref<VForm | null>(null)
+
+const userName = ref('')
+const email = ref('')
+const company = ref<string | null>(null) // Selected company name
+const role = ref<string | null>(null) // Selected role name
+
+const companies = ref<Company[]>([]) // Array to store companies
+const roles = ref<Role[]>([]) // Array to store roles
+
+// Computed properties
+const companyNames = computed(() => companies.value.map(c => c.name))
+const roleNames = computed(() => roles.value.map(r => r.name))
+
+// Validators
+const requiredValidator = (value: string | number | null) => !!value || 'This field is required.'
+
+const emailValidator = (value: string | null) =>
+  /^[^\s@]+@[^\s.@]*\.[^\s@]+$/.test(value || '') || 'Enter a valid email.'
+
+// Fetch companies on component mount
+onMounted(async () => {
+  try {
+    // Fetch companies
+    const companiesResponse = await fetch('/api/companies/all', {
+      method: 'GET',
+      headers: {
+        'Content-Type': 'application/json',
+        'Authorization': `Bearer ${localStorage.getItem('accessToken')}`,
+      },
+    })
+
+    if (!companiesResponse.ok)
+      throw new Error('Failed to fetch companies.')
+
+    const companiesData = await companiesResponse.json()
+
+    companies.value = companiesData.map((comp: { id: number; companyName: string }) => ({
+      id: comp.id,
+      name: comp.companyName,
+    }))
+
+    // Fetch roles
+    const rolesResponse = await fetch('/api/roles', {
+      method: 'GET',
+      headers: {
+        'Content-Type': 'application/json',
+        'Authorization': `Bearer ${localStorage.getItem('accessToken')}`,
+      },
+    })
+
+    if (!rolesResponse.ok)
+      throw new Error('Failed to fetch roles.')
+
+    const rolesData = await rolesResponse.json()
+
+    roles.value = rolesData.map((r: { id: number; name: string }) => ({
+      id: r.id,
+      name: r.name,
+    }))
+  }
+  catch (error) {
+    console.error('Error fetching data:', error)
+    emit('userData', { error: 'Unable to load data. Please try again later.' })
+  }
+})
+
+// Drawer close handler
+const closeNavigationDrawer = () => {
+  emit('update:isDrawerOpen', false)
+
+  nextTick(() => {
+    refForm.value?.reset()
+    refForm.value?.resetValidation()
+  })
+}
+
+// Form submission
+const onSubmit = async () => {
+  console.log({
+    name: userName.value,
+    email: email.value,
+    password: 'password123',
+    company_id: companies.value.find(c => c.name === company.value)?.id,
+    role_id: roles.value.find(r => r.name === role.value)?.id,
+  })
+
+  refForm.value?.validate().then(async ({ valid }) => {
+    if (valid) {
+      try {
+        const response = await fetch('/api/users', {
+          method: 'POST',
+          headers: {
+            'Content-Type': 'application/json',
+            'Authorization': `Bearer ${localStorage.getItem('accessToken')}`,
+          },
+          body: JSON.stringify({
+            name: userName.value,
+            email: email.value,
+            password: 'password123', // Generate or input a secure temp password
+            company_id: companies.value.find(c => c.name === company.value)?.id,
+            role_id: roles.value.find(r => r.name === role.value)?.id,
+          }),
+        })
+
+        if (!response.ok)
+          throw new Error('Failed to create user')
+
+        const result = await response.json()
+
+        emit('userData', { success: 'User created successfully!' })
+        closeNavigationDrawer()
+      }
+      catch (error) {
+        console.error('Error:', error)
+        emit('userData', { error: 'Failed to create user. Please try again.' })
+      }
+    }
+  })
+}
+
+const handleDrawerModelValueUpdate = (val: boolean) => {
+  emit('update:isDrawerOpen', val)
+}
+</script>
+
+<template>
+  <VNavigationDrawer
+    temporary
+    :width="400"
+    location="end"
+    border="none"
+    class="scrollable-content"
+    :model-value="props.isDrawerOpen"
+    @update:model-value="handleDrawerModelValueUpdate"
+  >
+    <!-- Drawer Title -->
+    <AppDrawerHeaderSection
+      title="Add New User"
+      @cancel="closeNavigationDrawer"
+    />
+
+    <VDivider />
+
+    <PerfectScrollbar :options="{ wheelPropagation: false }">
+      <VCard flat>
+        <VCardText>
+          <VForm
+            ref="refForm"
+            v-model="isFormValid"
+            @submit.prevent="onSubmit"
+          >
+            <VRow>
+              <!-- Username -->
+              <VCol cols="12">
+                <AppTextField
+                  v-model="userName"
+                  :rules="[requiredValidator]"
+                  label="Username"
+                  placeholder="Johndoe"
+                />
+              </VCol>
+
+              <!-- Email -->
+              <VCol cols="12">
+                <AppTextField
+                  v-model="email"
+                  :rules="[requiredValidator, emailValidator]"
+                  label="Email"
+                  placeholder="johndoe@email.com"
+                />
+              </VCol>
+
+              <!-- Company -->
+              <VCol cols="12">
+                <VSelect
+                  v-model="company"
+                  :rules="[requiredValidator]"
+                  label="Select Company"
+                  placeholder="Select Company"
+                  :items="companyNames"
+                />
+              </VCol>
+
+              <!-- Role -->
+              <VCol cols="12">
+                <VSelect
+                  v-model="role"
+                  :rules="[requiredValidator]"
+                  label="Select Role"
+                  placeholder="Select Role"
+                  :items="roleNames"
+                />
+              </VCol>
+
+              <!-- Submit and Cancel -->
+              <VCol cols="12">
+                <VBtn
+                  type="submit"
+                  class="me-4"
+                >
+                  Submit
+                </VBtn>
+                <VBtn
+                  type="reset"
+                  variant="tonal"
+                  color="error"
+                  @click="closeNavigationDrawer"
+                >
+                  Cancel
+                </VBtn>
+              </VCol>
+            </VRow>
+          </VForm>
+        </VCardText>
+      </VCard>
+    </PerfectScrollbar>
+  </VNavigationDrawer>
+</template>
+
+
+
+===== File: /home/rogers/Code/Sneat-Test/resources/ts/views/apps/user/list/EditUserDrawer.vue =====
+<script setup lang="ts">
+import { computed, nextTick, onMounted, ref, watch } from 'vue'
+import { PerfectScrollbar } from 'vue3-perfect-scrollbar'
+import { VForm } from 'vuetify/components/VForm'
+import { VSelect } from 'vuetify/components/VSelect'
+
+// Props and Emit Types
+interface Props {
+  isDrawerOpen: boolean
+  userId: number | null
+}
+
+interface Emit {
+  (e: 'update:isDrawerOpen', value: boolean): void
+  (e: 'userUpdated', value: any): void
+}
+
+// Props and Emit
+const props = defineProps<Props>()
+const emit = defineEmits<Emit>()
+
+// Form Fields
+const isFormValid = ref(false)
+const refForm = ref<VForm | null>(null)
+
+const userName = ref('')
+const email = ref('')
+const company = ref<string | null>(null)
+const role = ref<string | null>(null)
+
+// Companies and Roles
+const companies = ref<{ id: number; name: string }[]>([])
+const roles = ref<{ id: number; name: string }[]>([])
+
+// Computed Properties
+const companyNames = computed(() => companies.value.map(c => c.name))
+const roleNames = computed(() => roles.value.map(r => r.name))
+
+// Validators
+const requiredValidator = (value: string | number | null) => !!value || 'This field is required.'
+
+const emailValidator = (value: string | null) =>
+  /^[^\s@]+@[^\s.@]*\.[^\s@]+$/.test(value || '') || 'Enter a valid email.'
+
+// Fetch User Details
+const fetchUserDetails = async () => {
+  if (!props.userId)
+    return
+
+  try {
+    const response = await fetch(`/api/users/${props.userId}`, {
+      method: 'GET',
+      headers: {
+        'Content-Type': 'application/json',
+        'Authorization': `Bearer ${localStorage.getItem('accessToken')}`,
+      },
+    })
+
+    if (!response.ok)
+      throw new Error('Failed to fetch user details.')
+
+    const user = await response.json()
+
+    // Map API response to form fields
+    userName.value = user.name || ''
+    email.value = user.email || ''
+    company.value = companies.value.find(c => c.id === user.company_id)?.name || null
+    role.value = roles.value.find(r => r.id === user.role_id)?.name || null
+  }
+  catch (error) {
+    console.error('Error fetching user details:', error)
+  }
+}
+
+// Fetch Companies and Roles
+const fetchDropdownData = async () => {
+  try {
+    const [companiesResponse, rolesResponse] = await Promise.all([
+      fetch('/api/companies/all', {
+        method: 'GET',
+        headers: {
+          'Content-Type': 'application/json',
+          'Authorization': `Bearer ${localStorage.getItem('accessToken')}`,
+        },
+      }),
+      fetch('/api/roles', {
+        method: 'GET',
+        headers: {
+          'Content-Type': 'application/json',
+          'Authorization': `Bearer ${localStorage.getItem('accessToken')}`,
+        },
+      }),
+    ])
+
+    if (!companiesResponse.ok)
+      throw new Error('Failed to fetch companies.')
+    if (!rolesResponse.ok)
+      throw new Error('Failed to fetch roles.')
+
+    const [companiesData, rolesData] = await Promise.all([
+      companiesResponse.json(),
+      rolesResponse.json(),
+    ])
+
+    companies.value = companiesData.map((comp: { id: number; companyName: string }) => ({
+      id: comp.id,
+      name: comp.companyName,
+    }))
+    roles.value = rolesData.map((r: { id: number; name: string }) => ({
+      id: r.id,
+      name: r.name,
+    }))
+  }
+  catch (error) {
+    console.error('Error fetching dropdown data:', error)
+  }
+}
+
+// Watchers
+watch(() => props.userId, async newUserId => {
+  if (newUserId)
+    await fetchUserDetails()
+})
+
+// Close Drawer Handler
+const closeDrawer = () => {
+  emit('update:isDrawerOpen', false)
+  nextTick(() => {
+    refForm.value?.reset()
+    refForm.value?.resetValidation()
+  })
+}
+
+// Submit Handler
+const submitForm = async () => {
+  if (!props.userId)
+    return
+
+  refForm.value?.validate().then(async ({ valid }) => {
+    if (valid) {
+      try {
+        const response = await fetch(`/api/users/${props.userId}`, {
+          method: 'PUT',
+          headers: {
+            'Content-Type': 'application/json',
+            'Authorization': `Bearer ${localStorage.getItem('accessToken')}`,
+          },
+          body: JSON.stringify({
+            name: userName.value || undefined,
+            email: email.value || undefined,
+            company_id: companies.value.find(c => c.name === company.value)?.id,
+            role_id: roles.value.find(r => r.name === role.value)?.id,
+          }),
+        })
+
+        if (!response.ok)
+          throw new Error('Failed to update user.')
+
+        const updatedUser = await response.json()
+
+        emit('userUpdated', { success: 'User updated successfully!', user: updatedUser })
+        closeDrawer()
+      }
+      catch (error) {
+        console.error('Error updating user:', error)
+        emit('userUpdated', { error: 'Failed to update user. Please try again.' })
+      }
+    }
+  })
+}
+
+// On Mounted
+onMounted(async () => {
+  await fetchDropdownData() // Fetch companies and roles first
+  if (props.userId)
+    await fetchUserDetails() // Then fetch user details
+})
+
+watch(() => props.userId, async newUserId => {
+  if (newUserId) {
+    await fetchDropdownData() // Ensure dropdowns are loaded
+    await fetchUserDetails() // Fetch user details
+  }
+})
+</script>
+
+<template>
+  <VNavigationDrawer
+    temporary
+    :width="400"
+    location="end"
+    border="none"
+    class="scrollable-content"
+    :model-value="props.isDrawerOpen"
+    @update:model-value="closeDrawer"
+  >
+    <!-- Drawer Header -->
+    <AppDrawerHeaderSection
+      title="Edit User"
+      @cancel="closeDrawer"
+    />
+
+    <VDivider />
+
+    <PerfectScrollbar :options="{ wheelPropagation: false }">
+      <VCard flat>
+        <VCardText>
+          <VForm
+            ref="refForm"
+            v-model="isFormValid"
+            @submit.prevent="submitForm"
+          >
+            <VRow>
+              <!-- Username -->
+              <VCol cols="12">
+                <AppTextField
+                  v-model="userName"
+                  label="Username"
+                  :placeholder="userName || 'Enter username'"
+                />
+              </VCol>
+
+              <!-- Email -->
+              <VCol cols="12">
+                <AppTextField
+                  v-model="email"
+                  :rules="[emailValidator]"
+                  label="Email"
+                  :placeholder="email || 'Enter email'"
+                />
+              </VCol>
+
+              <!-- Company -->
+              <VCol cols="12">
+                <VSelect
+                  v-model="company"
+                  label="Select Company"
+                  :placeholder="company || 'Select Company'"
+                  :items="companyNames"
+                />
+              </VCol>
+
+              <!-- Role -->
+              <VCol cols="12">
+                <VSelect
+                  v-model="role"
+                  label="Select Role"
+                  :placeholder="role || 'Select Role'"
+                  :items="roleNames"
+                />
+              </VCol>
+
+              <!-- Actions -->
+              <VCol cols="12">
+                <VBtn
+                  type="submit"
+                  class="me-4"
+                >
+                  Save
+                </VBtn>
+                <VBtn
+                  type="reset"
+                  variant="tonal"
+                  color="error"
+                  @click="closeDrawer"
+                >
+                  Cancel
+                </VBtn>
+              </VCol>
+            </VRow>
+          </VForm>
+        </VCardText>
+      </VCard>
+    </PerfectScrollbar>
+  </VNavigationDrawer>
+</template>
+
+
+
+===== File: /home/rogers/Code/Sneat-Test/resources/ts/views/apps/user/types.ts =====
+export interface UserParams {
+  q: string
+  role: string
+  plan: string
+  status: string
+  options: object
+}
+
+
+
+===== File: /home/rogers/Code/Sneat-Test/resources/ts/pages/apps/companies/list/index.vue =====
+<script setup lang="ts">
+import AddNewCompanyDrawer from '@/views/apps/companies/list/AddNewCompanyDrawer.vue';
+import EditCompanyDrawer from '@/views/apps/companies/list/EditCompanyDrawer.vue';
+import { computed, onMounted, ref, watch } from 'vue';
+
+// 👉 Store
+const searchQuery = ref('');
+const selectedRole = ref();
+const selectedPlan = ref();
+const selectedStatus = ref();
+
+// Data table options
+const itemsPerPage = ref(10);
+const page = ref(1);
+const sortBy = ref();
+const orderBy = ref();
+const selectedRows = ref([]);
+
+const isEditCompanyDrawerVisible = ref(false);
+const selectedCompanyId = ref<number | null>(null);
+
+// Drawers visibility state
+const isAddNewCompanyDrawerVisible = ref(false);
+
+// Headers
+const headers = [
+  { title: 'Company Name', key: 'companyName' },
+  { title: 'Status', key: 'status' },
+  { title: 'Actions', key: 'actions', sortable: false, align: 'end' },
+];
+
+// 👉 Open edit drawer
+const openEditCompanyDrawer = (companyId: number) => {
+  selectedCompanyId.value = companyId;
+  isEditCompanyDrawerVisible.value = true;
+};
+
+// 👉 Fetching companies
+const { data: companiesData, execute: fetchCompanies } = useApi(() => {
+  const params = new URLSearchParams({
+    page: String(page.value),
+    itemsPerPage: String(itemsPerPage.value),
+  }).toString();
+
+  const token = localStorage.getItem('accessToken');
+
+  return `/paginatedCompanies?${params}`;
+}, {
+  method: 'GET',
+  headers: {
+    'Content-Type': 'application/json',
+    'Authorization': `Bearer ${localStorage.getItem('accessToken')}`,
+  },
+  credentials: 'include',
+});
+
+const companies = computed(() => companiesData.value?.data || []);
+const totalCompanies = computed(() => companiesData.value?.total || 0);
+
+// Handle Add Company Result
+const handleCompanyData = (data: any) => {
+  if (data.success) {
+    console.log('Company added:', data.data)
+    // Refetch companies or update the list
+    fetchCompanies();
+
+  } else if (data.error) {
+    console.error(data.error)
+  }
+}
+
+onMounted(async () => {
+  try {
+    await fetchCompanies();
+  } catch (error) {
+    console.error('Error fetching companies:', error);
+  }
+});
+
+watch(
+  [searchQuery, selectedRole, selectedPlan, selectedStatus, itemsPerPage, page, sortBy, orderBy],
+  () => {
+    fetchCompanies();
+  }
+);
+
+// 👉 Delete Company
+const deleteCompany = async (id: number) => {
+  try {
+    const response = await fetch(`/api/companies/${id}`, {
+      method: 'DELETE',
+      headers: {
+        'Content-Type': 'application/json',
+        'Authorization': `Bearer ${localStorage.getItem('accessToken')}`,
+      },
+    })
+
+    if (!response.ok) throw new Error('Failed to delete company.')
+
+    console.log(`Company ${id} deleted successfully.`)
+
+    // Refetch companies after deletion
+    fetchCompanies()
+  } catch (error) {
+    console.error('Error deleting company:', error)
+  }
+}
+// 👉 Handle table actions
+// const deleteCompany = async (id: number) => {
+//   await $api(`/companies/${id}`, {
+//     method: 'DELETE',
+//   });
+
+//   fetchCompanies();
+// };
+
+// 👉 Update options
+const updateOptions = (options: any) => {
+  if (options.sortBy?.length) {
+    sortBy.value = options.sortBy[0]?.key;
+    orderBy.value = options.sortBy[0]?.order;
+  }
+
+  page.value = options.page || 1;
+  itemsPerPage.value = options.itemsPerPage || 10;
+
+  fetchCompanies();
+};
+</script>
+
+<template>
+  <section>
+    <!-- 👉 Filters and Actions -->
+    <VCard class="mb-6">
+      <VCardItem class="pb-4">
+        <VCardTitle>Filters</VCardTitle>
+      </VCardItem>
+
+      <VCardText>
+        <VRow>
+          <!-- 👉 Select Role -->
+          <VCol cols="12" sm="4">
+            <AppSelect
+              v-model="selectedRole"
+              placeholder="Select Role"
+              :items="roles"
+              clearable
+              clear-icon="bx-x"
+            />
+          </VCol>
+          <!-- 👉 Select Plan -->
+          <VCol cols="12" sm="4">
+            <AppSelect
+              v-model="selectedPlan"
+              placeholder="Select Plan"
+              :items="plans"
+              clearable
+              clear-icon="bx-x"
+            />
+          </VCol>
+          <!-- 👉 Select Status -->
+          <VCol cols="12" sm="4">
+            <AppSelect
+              v-model="selectedStatus"
+              placeholder="Select Status"
+              :items="status"
+              clearable
+              clear-icon="bx-x"
+            />
+          </VCol>
+        </VRow>
+      </VCardText>
+
+      <VDivider />
+
+      <VCardText class="d-flex flex-wrap gap-4">
+        <div class="me-3 d-flex gap-3">
+          <AppSelect
+            :model-value="itemsPerPage"
+            :items="[
+              { value: 10, title: '10' },
+              { value: 25, title: '25' },
+              { value: 50, title: '50' },
+              { value: 100, title: '100' },
+              { value: -1, title: 'All' },
+            ]"
+            style="inline-size: 6.25rem;"
+            @update:model-value="itemsPerPage = parseInt($event, 10)"
+          />
+        </div>
+        <VSpacer />
+
+        <div class="app-user-search-filter d-flex align-center flex-wrap gap-4">
+          <!-- 👉 Search  -->
+          <div style="inline-size: 15.625rem;">
+            <AppTextField v-model="searchQuery" placeholder="Search Company" />
+          </div>
+
+          <!-- 👉 Add New Company Button -->
+          <VBtn
+            prepend-icon="bx-plus"
+            @click="isAddNewCompanyDrawerVisible = true"
+          >
+            Add New Company
+          </VBtn>
+        </div>
+      </VCardText>
+    </VCard>
+
+    <!-- 👉 Add New Company Drawer -->
+    <AddNewCompanyDrawer v-model:isDrawerOpen="isAddNewCompanyDrawerVisible" />
+
+    <!-- 👉 Edit Company Drawer -->
+    <EditCompanyDrawer
+      v-model:isDrawerOpen="isEditCompanyDrawerVisible"
+      :company-id="selectedCompanyId"
+      @company-updated="handleCompanyUpdated"
+    />
+
+    <!-- 👉 Data Table -->
+    <VCard class="mb-6">
+      <VDataTableServer
+        v-model:items-per-page="itemsPerPage"
+        v-model:model-value="selectedRows"
+        v-model:page="page"
+        :items="companies"
+        item-value="id"
+        :items-length="totalCompanies"
+        :headers="headers"
+        class="text-no-wrap"
+        show-select
+        @update:options="updateOptions"
+      >
+        <!-- Company Name -->
+        <template #item.companyName="{ item }">
+          <h6 class="text-base">{{ item.companyName }}</h6>
+        </template>
+
+        <!-- Actions -->
+        <template #item.actions="{ item }">
+          <VBtn icon variant="text" color="medium-emphasis" @click="openEditCompanyDrawer(item.id)">
+          <VIcon icon="bx-pencil" />
+        </VBtn>
+          <IconBtn @click="deleteCompany(item.id)">
+            <VIcon icon="bx-trash" />
+          </IconBtn>
+        </template>
+      </VDataTableServer>
+    </VCard>
+  </section>
+</template>
+
+
+<!-- <script setup lang="ts">
+import { computed, onMounted, ref } from 'vue';
+
+// 👉 Store
+const searchQuery = ref('');
+const selectedRole = ref();
+const selectedPlan = ref();
+const selectedStatus = ref();
+
+// Data table options
+const itemsPerPage = ref(10);
+const page = ref(1);
+const sortBy = ref();
+const orderBy = ref();
+const selectedRows = ref([]);
+
+// Drawer visibility
+const isAddNewCompanyDrawerVisible = ref(false); // Controls the drawer visibility
+
+// Fetching companies logic remains the same
+const { data: companiesData, execute: fetchCompanies } = useApi(() => {
+  const params = new URLSearchParams({
+    page: String(page.value),
+    itemsPerPage: String(itemsPerPage.value),
+  }).toString();
+
+  const token = localStorage.getItem('accessToken');
+
+  return `/paginatedCompanies?${params}`;
+}, {
+  method: 'GET',
+  headers: {
+    'Content-Type': 'application/json',
+    'Authorization': `Bearer ${localStorage.getItem('accessToken')}`,
+  },
+  credentials: 'include',
+});
+
+const companies = computed(() => companiesData.value?.data || []);
+const totalCompanies = computed(() => companiesData.value?.total || 0);
+
+onMounted(async () => {
+  try {
+    await fetchCompanies();
+  } catch (error) {
+    console.error('Error fetching companies:', error);
+  }
+});
+
+// Handle table actions
+const deleteCompany = async (id: number) => {
+  await $api(`/companies/${id}`, {
+    method: 'DELETE',
+  });
+
+  fetchCompanies();
+};
+</script>
+<template>
+  <section>
+  -->
+    <!-- Add New Company Button -->
+   <!-- <VBtn
+    prepend-icon="bx-plus"
+    @click="isAddNewCompanyDrawerVisible = true"
+  >
+    Add New Company
+  </VBtn>
+
+  <VCard class="mb-6">
+    <VDivider />
+-->
+    <!-- Data Table -->
+    <!--
+    <VDataTableServer
+      v-model:items-per-page="itemsPerPage"
+      v-model:model-value="selectedRows"
+      v-model:page="page"
+      :items="companies"
+      item-value="id"
+      :items-length="totalCompanies"
+      :headers="[
+        { title: 'Company Name', key: 'companyName' },
+        { title: 'Status', key: 'status' },
+        { title: 'Actions', key: 'actions', sortable: false, align: 'end' },
+      ]"
+      class="text-no-wrap"
+      show-select
+    >
+      <template #item.companyName="{ item }">
+        <h6 class="text-base">{{ item.companyName }}</h6>
+      </template>
+
+      <template #item.actions="{ item }">
+        <VBtn
+          icon
+          variant="text"
+          color="medium-emphasis"
+          @click="deleteCompany(item.id)"
+        >
+          <VIcon icon="bx-trash" />
+        </VBtn>
+      </template>
+    </VDataTableServer>
+  </VCard>
+-->
+  <!-- Add New Company Drawer -->
+   <!--
+  <AddNewCompanyDrawer
+    v-model:isDrawerOpen="isAddNewCompanyDrawerVisible"
+  />
+</section>
+</template>
+-->
+
+
+
+===== File: /home/rogers/Code/Sneat-Test/resources/ts/views/apps/companies/list/EditCompanyDrawer.vue =====
+<script setup lang="ts">
+import { nextTick, onMounted, ref, watch } from 'vue';
+
+interface Props {
+  isDrawerOpen: boolean;
+  companyId: number | null;
+}
+
+interface Emit {
+  (e: 'update:isDrawerOpen', value: boolean): void;
+  (e: 'companyUpdated', value: any): void;
+}
+
+const props = defineProps<Props>();
+const emit = defineEmits<Emit>();
+
+const companyName = ref('');
+const refForm = ref(null);
+
+// Fetch company details
+const fetchCompanyDetails = async () => {
+  if (!props.companyId) return;
+
+  try {
+    const response = await fetch(`/api/companies/${props.companyId}`, {
+      method: 'GET',
+      headers: {
+        'Content-Type': 'application/json',
+        'Authorization': `Bearer ${localStorage.getItem('accessToken')}`,
+      },
+    });
+
+    if (!response.ok) throw new Error('Failed to fetch company details.');
+
+    const company = await response.json();
+    companyName.value = company.companyName || '';
+  } catch (error) {
+    console.error('Error fetching company details:', error);
+  }
+};
+
+// Close drawer
+const closeDrawer = () => {
+  emit('update:isDrawerOpen', false);
+  nextTick(() => refForm.value?.resetValidation());
+};
+
+// Update company
+const updateCompany = async () => {
+  if (!props.companyId) return;
+
+  try {
+    const response = await fetch(`/api/companies/${props.companyId}`, {
+      method: 'PUT',
+      headers: {
+        'Content-Type': 'application/json',
+        'Authorization': `Bearer ${localStorage.getItem('accessToken')}`,
+      },
+      body: JSON.stringify({ company_name: companyName.value }),
+    });
+
+    if (!response.ok) throw new Error('Failed to update company.');
+
+    const updatedCompany = await response.json();
+    emit('companyUpdated', { success: 'Company updated successfully!', company: updatedCompany });
+    closeDrawer();
+  } catch (error) {
+    console.error('Error updating company:', error);
+    emit('companyUpdated', { error: 'Failed to update company. Please try again.' });
+  }
+};
+
+// Watch companyId changes
+watch(() => props.companyId, fetchCompanyDetails);
+
+onMounted(fetchCompanyDetails);
+</script>
+
+<template>
+  <VNavigationDrawer
+    temporary
+    :width="400"
+    location="end"
+    border="none"
+    class="scrollable-content"
+    :model-value="props.isDrawerOpen"
+    @update:model-value="closeDrawer"
+  >
+    <AppDrawerHeaderSection title="Edit Company" @cancel="closeDrawer" />
+
+    <VDivider />
+
+    <VCardText>
+      <VForm ref="refForm" @submit.prevent="updateCompany">
+        <VTextField
+          v-model="companyName"
+          label="Company Name"
+          rules="[v => !!v || 'This field is required.']"
+        />
+        <VRow>
+          <VCol>
+            <VBtn type="submit">Save</VBtn>
+            <VBtn type="reset" variant="tonal" color="error" @click="closeDrawer">Cancel</VBtn>
+          </VCol>
+        </VRow>
+      </VForm>
+    </VCardText>
+  </VNavigationDrawer>
+</template>
+
+
+
+===== File: /home/rogers/Code/Sneat-Test/resources/ts/views/apps/companies/list/AddNewCompanyDrawer.vue =====
+<script setup lang="ts">
+import { defineEmits, defineProps, ref } from 'vue'
+
+// Props and Emits
+const props = defineProps({
+  isDrawerOpen: {
+    type: Boolean,
+    required: true,
+  },
+})
+const emit = defineEmits(['update:isDrawerOpen', 'companyData'])
+
+// Form Fields
+const companyName = ref('')
+const isFormValid = ref(false)
+
+// Validators
+const requiredValidator = (value: string | null) => !!value || 'This field is required.'
+
+// Close Drawer
+const closeDrawer = () => {
+  emit('update:isDrawerOpen', false)
+  companyName.value = '' // Reset field
+}
+
+// Form Submission
+const onSubmit = async () => {
+  if (!companyName.value.trim()) {
+    console.error('Company name is required')
+    return
+  }
+
+  try {
+    const response = await fetch('/api/companies', {
+      method: 'POST',
+      headers: {
+        'Content-Type': 'application/json',
+        'Authorization': `Bearer ${localStorage.getItem('accessToken')}`,
+      },
+      body: JSON.stringify({
+        company_name: companyName.value.trim(),
+      }),
+    })
+
+    if (!response.ok) throw new Error('Failed to create company.')
+
+    const result = await response.json()
+
+    emit('companyData', { success: 'Company created successfully!', data: result })
+    closeDrawer()
+  } catch (error) {
+    console.error('Error adding company:', error)
+    emit('companyData', { error: 'Failed to create company. Please try again.' })
+  }
+}
+</script>
+
+<template>
+  <VNavigationDrawer
+    v-model="props.isDrawerOpen"
+    temporary
+    :width="400"
+    location="end"
+    border="none"
+  >
+    <AppDrawerHeaderSection
+      title="Add New Company"
+      @cancel="closeDrawer"
+    />
+
+    <VDivider />
+
+    <VCardText>
+      <VForm v-model="isFormValid" @submit.prevent="onSubmit">
+        <VRow>
+          <!-- Company Name -->
+          <VCol cols="12">
+            <AppTextField
+              v-model="companyName"
+              :rules="[requiredValidator]"
+              label="Company Name"
+              placeholder="Enter company name"
+            />
+          </VCol>
+
+          <!-- Submit and Cancel -->
+          <VCol cols="12">
+            <VBtn type="submit" class="me-4">Submit</VBtn>
+            <VBtn variant="tonal" color="error" @click="closeDrawer">Cancel</VBtn>
+          </VCol>
+        </VRow>
+      </VForm>
+    </VCardText>
+  </VNavigationDrawer>
+</template>
+
+
+
+===== File: /home/rogers/Code/Sneat-Test/resources/js/axios.ts =====
+// resources/js/axios.ts
+import axios from 'axios'
+
+// Set base URL for Axios requests based on environment
+axios.defaults.baseURL = import.meta.env.MODE === 'development'
+  ? 'http://127.0.0.1:8000/api'
+  : 'https://stephandouglasduval.com/api'
+
+export default axios
+
+
+
diff --git a/an config:clear b/an config:clear
deleted file mode 100644
index 333a0b5..0000000
--- a/an config:clear	
+++ /dev/null
@@ -1,258 +0,0 @@
-
-                   SSUUMMMMAARRYY OOFF LLEESSSS CCOOMMMMAANNDDSS
-
-      Commands marked with * may be preceded by a number, _N.
-      Notes in parentheses indicate the behavior if _N is given.
-      A key preceded by a caret indicates the Ctrl key; thus ^K is ctrl-K.
-
-  h  H                 Display this help.
-  q  :q  Q  :Q  ZZ     Exit.
- ---------------------------------------------------------------------------
-
-                           MMOOVVIINNGG
-
-  e  ^E  j  ^N  CR  *  Forward  one line   (or _N lines).
-  y  ^Y  k  ^K  ^P  *  Backward one line   (or _N lines).
-  f  ^F  ^V  SPACE  *  Forward  one window (or _N lines).
-  b  ^B  ESC-v      *  Backward one window (or _N lines).
-  z                 *  Forward  one window (and set window to _N).
-  w                 *  Backward one window (and set window to _N).
-  ESC-SPACE         *  Forward  one window, but don't stop at end-of-file.
-  d  ^D             *  Forward  one half-window (and set half-window to _N).
-  u  ^U             *  Backward one half-window (and set half-window to _N).
-  ESC-)  RightArrow *  Right one half screen width (or _N positions).
-  ESC-(  LeftArrow  *  Left  one half screen width (or _N positions).
-  ESC-}  ^RightArrow   Right to last column displayed.
-  ESC-{  ^LeftArrow    Left  to first column.
-  F                    Forward forever; like "tail -f".
-  ESC-F                Like F but stop when search pattern is found.
-  r  ^R  ^L            Repaint screen.
-  R                    Repaint screen, discarding buffered input.
-        ---------------------------------------------------
-        Default "window" is the screen height.
-        Default "half-window" is half of the screen height.
- ---------------------------------------------------------------------------
-
-                          SSEEAARRCCHHIINNGG
-
-  /_p_a_t_t_e_r_n          *  Search forward for (_N-th) matching line.
-  ?_p_a_t_t_e_r_n          *  Search backward for (_N-th) matching line.
-  n                 *  Repeat previous search (for _N-th occurrence).
-  N                 *  Repeat previous search in reverse direction.
-  ESC-n             *  Repeat previous search, spanning files.
-  ESC-N             *  Repeat previous search, reverse dir. & spanning files.
-  ESC-u                Undo (toggle) search highlighting.
-  ESC-U                Clear search highlighting.
-  &_p_a_t_t_e_r_n          *  Display only matching lines.
-        ---------------------------------------------------
-        A search pattern may begin with one or more of:
-        ^N or !  Search for NON-matching lines.
-        ^E or *  Search multiple files (pass thru END OF FILE).
-        ^F or @  Start search at FIRST file (for /) or last file (for ?).
-        ^K       Highlight matches, but don't move (KEEP position).
-        ^R       Don't use REGULAR EXPRESSIONS.
-        ^W       WRAP search if no match found.
- ---------------------------------------------------------------------------
-
-                           JJUUMMPPIINNGG
-
-  g  <  ESC-<       *  Go to first line in file (or line _N).
-  G  >  ESC->       *  Go to last line in file (or line _N).
-  p  %              *  Go to beginning of file (or _N percent into file).
-  t                 *  Go to the (_N-th) next tag.
-  T                 *  Go to the (_N-th) previous tag.
-  {  (  [           *  Find close bracket } ) ].
-  }  )  ]           *  Find open bracket { ( [.
-  ESC-^F _<_c_1_> _<_c_2_>  *  Find close bracket _<_c_2_>.
-  ESC-^B _<_c_1_> _<_c_2_>  *  Find open bracket _<_c_1_>.
-        ---------------------------------------------------
-        Each "find close bracket" command goes forward to the close bracket 
-          matching the (_N-th) open bracket in the top line.
-        Each "find open bracket" command goes backward to the open bracket 
-          matching the (_N-th) close bracket in the bottom line.
-
-  m_<_l_e_t_t_e_r_>            Mark the current top line with <letter>.
-  M_<_l_e_t_t_e_r_>            Mark the current bottom line with <letter>.
-  '_<_l_e_t_t_e_r_>            Go to a previously marked position.
-  ''                   Go to the previous position.
-  ^X^X                 Same as '.
-  ESC-M_<_l_e_t_t_e_r_>        Clear a mark.
-        ---------------------------------------------------
-        A mark is any upper-case or lower-case letter.
-        Certain marks are predefined:
-             ^  means  beginning of the file
-             $  means  end of the file
- ---------------------------------------------------------------------------
-
-                        CCHHAANNGGIINNGG FFIILLEESS
-
-  :e [_f_i_l_e]            Examine a new file.
-  ^X^V                 Same as :e.
-  :n                *  Examine the (_N-th) next file from the command line.
-  :p                *  Examine the (_N-th) previous file from the command line.
-  :x                *  Examine the first (or _N-th) file from the command line.
-  :d                   Delete the current file from the command line list.
-  =  ^G  :f            Print current file name.
- ---------------------------------------------------------------------------
-
-                    MMIISSCCEELLLLAANNEEOOUUSS CCOOMMMMAANNDDSS
-
-  -_<_f_l_a_g_>              Toggle a command line option [see OPTIONS below].
-  --_<_n_a_m_e_>             Toggle a command line option, by name.
-  __<_f_l_a_g_>              Display the setting of a command line option.
-  ___<_n_a_m_e_>             Display the setting of an option, by name.
-  +_c_m_d                 Execute the less cmd each time a new file is examined.
-
-  !_c_o_m_m_a_n_d             Execute the shell command with $SHELL.
-  |XX_c_o_m_m_a_n_d            Pipe file between current pos & mark XX to shell command.
-  s _f_i_l_e               Save input to a file.
-  v                    Edit the current file with $VISUAL or $EDITOR.
-  V                    Print version number of "less".
- ---------------------------------------------------------------------------
-
-                           OOPPTTIIOONNSS
-
-        Most options may be changed either on the command line,
-        or from within less by using the - or -- command.
-        Options may be given in one of two forms: either a single
-        character preceded by a -, or a name preceded by --.
-
-  -?  ........  --help
-                  Display help (from command line).
-  -a  ........  --search-skip-screen
-                  Search skips current screen.
-  -A  ........  --SEARCH-SKIP-SCREEN
-                  Search starts just after target line.
-  -b [_N]  ....  --buffers=[_N]
-                  Number of buffers.
-  -B  ........  --auto-buffers
-                  Don't automatically allocate buffers for pipes.
-  -c  ........  --clear-screen
-                  Repaint by clearing rather than scrolling.
-  -d  ........  --dumb
-                  Dumb terminal.
-  -D xx_c_o_l_o_r  .  --color=xx_c_o_l_o_r
-                  Set screen colors.
-  -e  -E  ....  --quit-at-eof  --QUIT-AT-EOF
-                  Quit at end of file.
-  -f  ........  --force
-                  Force open non-regular files.
-  -F  ........  --quit-if-one-screen
-                  Quit if entire file fits on first screen.
-  -g  ........  --hilite-search
-                  Highlight only last match for searches.
-  -G  ........  --HILITE-SEARCH
-                  Don't highlight any matches for searches.
-  -h [_N]  ....  --max-back-scroll=[_N]
-                  Backward scroll limit.
-  -i  ........  --ignore-case
-                  Ignore case in searches that do not contain uppercase.
-  -I  ........  --IGNORE-CASE
-                  Ignore case in all searches.
-  -j [_N]  ....  --jump-target=[_N]
-                  Screen position of target lines.
-  -J  ........  --status-column
-                  Display a status column at left edge of screen.
-  -k [_f_i_l_e]  .  --lesskey-file=[_f_i_l_e]
-                  Use a lesskey file.
-  -K  ........  --quit-on-intr
-                  Exit less in response to ctrl-C.
-  -L  ........  --no-lessopen
-                  Ignore the LESSOPEN environment variable.
-  -m  -M  ....  --long-prompt  --LONG-PROMPT
-                  Set prompt style.
-  -n  -N  ....  --line-numbers  --LINE-NUMBERS
-                  Don't use line numbers.
-  -o [_f_i_l_e]  .  --log-file=[_f_i_l_e]
-                  Copy to log file (standard input only).
-  -O [_f_i_l_e]  .  --LOG-FILE=[_f_i_l_e]
-                  Copy to log file (unconditionally overwrite).
-  -p [_p_a_t_t_e_r_n]  --pattern=[_p_a_t_t_e_r_n]
-                  Start at pattern (from command line).
-  -P [_p_r_o_m_p_t]   --prompt=[_p_r_o_m_p_t]
-                  Define new prompt.
-  -q  -Q  ....  --quiet  --QUIET  --silent --SILENT
-                  Quiet the terminal bell.
-  -r  -R  ....  --raw-control-chars  --RAW-CONTROL-CHARS
-                  Output "raw" control characters.
-  -s  ........  --squeeze-blank-lines
-                  Squeeze multiple blank lines.
-  -S  ........  --chop-long-lines
-                  Chop (truncate) long lines rather than wrapping.
-  -t [_t_a_g]  ..  --tag=[_t_a_g]
-                  Find a tag.
-  -T [_t_a_g_s_f_i_l_e] --tag-file=[_t_a_g_s_f_i_l_e]
-                  Use an alternate tags file.
-  -u  -U  ....  --underline-special  --UNDERLINE-SPECIAL
-                  Change handling of backspaces.
-  -V  ........  --version
-                  Display the version number of "less".
-  -w  ........  --hilite-unread
-                  Highlight first new line after forward-screen.
-  -W  ........  --HILITE-UNREAD
-                  Highlight first new line after any forward movement.
-  -x [_N[,...]]  --tabs=[_N[,...]]
-                  Set tab stops.
-  -X  ........  --no-init
-                  Don't use termcap init/deinit strings.
-  -y [_N]  ....  --max-forw-scroll=[_N]
-                  Forward scroll limit.
-  -z [_N]  ....  --window=[_N]
-                  Set size of window.
-  -" [_c[_c]]  .  --quotes=[_c[_c]]
-                  Set shell quote characters.
-  -~  ........  --tilde
-                  Don't display tildes after end of file.
-  -# [_N]  ....  --shift=[_N]
-                  Set horizontal scroll amount (0 = one half screen width).
-                --file-size
-                  Automatically determine the size of the input file.
-                --follow-name
-                  The F command changes files if the input file is renamed.
-                --incsearch
-                  Search file as each pattern character is typed in.
-                --line-num-width=N
-                  Set the width of the -N line number field to N characters.
-                --mouse
-                  Enable mouse input.
-                --no-keypad
-                  Don't send termcap keypad init/deinit strings.
-                --no-histdups
-                  Remove duplicates from command history.
-                --rscroll=C
-                  Set the character used to mark truncated lines.
-                --save-marks
-                  Retain marks across invocations of less.
-                --status-col-width=N
-                  Set the width of the -J status column to N characters.
-                --use-backslash
-                  Subsequent options use backslash as escape char.
-                --use-color
-                  Enables colored text.
-                --wheel-lines=N
-                  Each click of the mouse wheel moves N lines.
-
-
- ---------------------------------------------------------------------------
-
-                          LLIINNEE EEDDIITTIINNGG
-
-        These keys can be used to edit text being entered 
-        on the "command line" at the bottom of the screen.
-
- RightArrow ..................... ESC-l ... Move cursor right one character.
- LeftArrow ...................... ESC-h ... Move cursor left one character.
- ctrl-RightArrow  ESC-RightArrow  ESC-w ... Move cursor right one word.
- ctrl-LeftArrow   ESC-LeftArrow   ESC-b ... Move cursor left one word.
- HOME ........................... ESC-0 ... Move cursor to start of line.
- END ............................ ESC-$ ... Move cursor to end of line.
- BACKSPACE ................................ Delete char to left of cursor.
- DELETE ......................... ESC-x ... Delete char under cursor.
- ctrl-BACKSPACE   ESC-BACKSPACE ........... Delete word to left of cursor.
- ctrl-DELETE .... ESC-DELETE .... ESC-X ... Delete word under cursor.
- ctrl-U ......... ESC (MS-DOS only) ....... Delete entire line.
- UpArrow ........................ ESC-k ... Retrieve previous command line.
- DownArrow ...................... ESC-j ... Retrieve next command line.
- TAB ...................................... Complete filename & cycle.
- SHIFT-TAB ...................... ESC-TAB   Complete filename & reverse cycle.
- ctrl-L ................................... Complete filename, list all.
diff --git a/app/Http/Controllers/UserController.php b/app/Http/Controllers/UserController.php
index 7b97520..6d48ee6 100755
--- a/app/Http/Controllers/UserController.php
+++ b/app/Http/Controllers/UserController.php
@@ -26,15 +26,13 @@ public function index(Request $request)
         'itemsPerPage' => $itemsPerPage,
         'q' => $request->get('q'),
     ]);
-    
     $users = User::query()
-    ->select(['id', 'name', 'email']) // ✅ Only fetch necessary fields
     ->when($request->get('q'), function ($query, $search) {
         $query->where('name', 'like', "%{$search}%")
               ->orWhere('email', 'like', "%{$search}%");
     })
     ->paginate($itemsPerPage, ['*'], 'page', $page);
-
+    
 
 // Transform users data only if there are results
 $transformedUsers = $users->getCollection()->map(function ($user) {
diff --git a/app/Models/User.php b/app/Models/User.php
index b601cb2..bfafb45 100755
--- a/app/Models/User.php
+++ b/app/Models/User.php
@@ -17,18 +17,19 @@ class User extends Authenticatable
      * The attributes that are mass assignable.
      */
     protected $fillable = [
-        'name', 'email', 'password',
+        'name',
+        'email',
+        'password',
+        'password_reset_required',
     ];
 
     /**
      * The attributes that should be hidden for serialization.
      */
     protected $hidden = [
-        'password', 'remember_token',
-    ]; // ✅ Hides unnecessary fields
-
-
-    protected $with = []; // ✅ Prevents auto-loading relationships
+        'password',
+        'remember_token',
+    ];
 
     /**
      * The attributes that should be cast.
@@ -83,29 +84,27 @@ public function subjects(): BelongsToMany
      * @return \Illuminate\Support\Collection
      */
     public function getPermissionsAttribute()
-{
-    if (!$this->relationLoaded('roles')) {
-        $this->load('roles.permissions');
+    {
+        \Log::info('Fetching permissions for user roles.');
+
+        return $this->roles->flatMap(function ($role) {
+            \Log::info('Mapping role permissions:', ['role_id' => $role->id]);
+
+            return $role->permissions->map(function ($permission) {
+                \Log::info('Mapping permission:', [
+                    'id' => $permission->id ?? 'N/A',
+                    'action' => $permission->action ?? 'N/A',
+                    'subject' => $permission->subject ?? 'N/A',
+                ]);
+
+                return [
+                    'id' => $permission->id,
+                    'action' => $permission->action,
+                    'subject' => $permission->subject,
+                ];
+            });
+        })->unique('id')->values();
     }
-
-    $permissions = $this->roles->flatMap(function ($role) {
-        return $role->permissions->map(function ($permission) {
-            return [
-                'id' => $permission->id ?? null,
-                'action' => $permission->action ?? 'read',
-                'subject' => $permission->subject ?? 'all',
-            ];
-        });
-    })->unique('id')->values();
-
-    \Log::info("User [{$this->id}] permissions:", $permissions->toArray());
-
-    return $permissions;
-}
-
-
-    
-
     protected static function boot()
     {
         parent::boot();
diff --git a/config/auth.php b/config/auth.php
index 0d67478..f965fbe 100755
--- a/config/auth.php
+++ b/config/auth.php
@@ -36,11 +36,17 @@
     */
 
     'guards' => [
-    'api' => [
-        'driver' => 'sanctum',
+        'web' => [
+            'driver' => 'session',
+            'provider' => 'users',
+        ],
+        'api' => [
+            'driver' => 'sanctum',
         'provider' => 'users',
+        // Hashing the api breaks authentication
+        // 'hash' => false,
+        ],
     ],
-],
 
     /*
     |--------------------------------------------------------------------------
diff --git a/config/sanctum.php b/config/sanctum.php
index 76eea4b..5cf4083 100755
--- a/config/sanctum.php
+++ b/config/sanctum.php
@@ -3,9 +3,81 @@
 use Laravel\Sanctum\Sanctum;
 
 return [
-    'stateful' => [], // ✅ No cookie authentication
-    'guard' => ['api'], // ✅ Use API guard for authentication
+
+    /*
+    |--------------------------------------------------------------------------
+    | Stateful Domains
+    |--------------------------------------------------------------------------
+    |
+    | Requests from the following domains / hosts will receive stateful API
+    | authentication cookies. Typically, these should include your local
+    | and production domains which access your API via a frontend SPA.
+    |
+    */
+
+    'stateful' => explode(',', env('SANCTUM_STATEFUL_DOMAINS', sprintf(
+        '%s%s',
+        'localhost,localhost:3000,127.0.0.1,127.0.0.1:8000,::1,https://stephandouglasduval.com/',
+        Sanctum::currentApplicationUrlWithPort()
+    ))),
+
+    /*
+    |--------------------------------------------------------------------------
+    | Sanctum Guards
+    |--------------------------------------------------------------------------
+    |
+    | This array contains the authentication guards that will be checked when
+    | Sanctum is trying to authenticate a request. If none of these guards
+    | are able to authenticate the request, Sanctum will use the bearer
+    | token that's present on an incoming request for authentication.
+    |
+    */
+
+    'guard' => ['web'],
+
+    /*
+    |--------------------------------------------------------------------------
+    | Expiration Minutes
+    |--------------------------------------------------------------------------
+    |
+    | This value controls the number of minutes until an issued token will be
+    | considered expired. This will override any values set in the token's
+    | "expires_at" attribute, but first-party sessions are not affected.
+    |
+    */
+
     'expiration' => null,
 
-    'middleware' => [], // ✅ Prevent Sanctum from expecting cookies
+    /*
+    |--------------------------------------------------------------------------
+    | Token Prefix
+    |--------------------------------------------------------------------------
+    |
+    | Sanctum can prefix new tokens in order to take advantage of numerous
+    | security scanning initiatives maintained by open source platforms
+    | that notify developers if they commit tokens into repositories.
+    |
+    | See: https://docs.github.com/en/code-security/secret-scanning/about-secret-scanning
+    |
+    */
+
+    'token_prefix' => env('SANCTUM_TOKEN_PREFIX', ''),
+
+    /*
+    |--------------------------------------------------------------------------
+    | Sanctum Middleware
+    |--------------------------------------------------------------------------
+    |
+    | When authenticating your first-party SPA with Sanctum you may need to
+    | customize some of the middleware Sanctum uses while processing the
+    | request. You may change the middleware listed below as required.
+    |
+    */
+
+    'middleware' => [
+        'authenticate_session' => Laravel\Sanctum\Http\Middleware\AuthenticateSession::class,
+        'encrypt_cookies' => Illuminate\Cookie\Middleware\EncryptCookies::class,
+        'validate_csrf_token' => Illuminate\Foundation\Http\Middleware\ValidateCsrfToken::class,
+    ],
+
 ];
